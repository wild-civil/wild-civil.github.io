<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>磨刀不误砍柴工</title>
      <link href="/post/f73586b.html"/>
      <url>/post/f73586b.html</url>
      
        <content type="html"><![CDATA[<p>2023-10-29 早上上班 磨了磨刀：</p><h1 id="word批量转pdf"><a href="#word批量转pdf" class="headerlink" title="word批量转pdf"></a>word批量转pdf</h1><h2 id="法一："><a href="#法一：" class="headerlink" title="法一："></a>法一：</h2><h4 id="1-在桌面随意新建一个doc文档，然后打开后同时按alt和F11，双击下图方框。"><a href="#1-在桌面随意新建一个doc文档，然后打开后同时按alt和F11，双击下图方框。" class="headerlink" title="1.在桌面随意新建一个doc文档，然后打开后同时按alt和F11，双击下图方框。"></a>1.在桌面随意新建一个doc文档，然后打开后同时按alt和F11，双击下图方框。</h4><p><img src="https://raw.githubusercontent.com/wild-civil/typora_img/main/%E7%A3%A8%E5%88%80%E4%B8%8D%E8%AF%AF%E7%A0%8D%E6%9F%B4%E5%B7%A5/202310301033846.png" alt="Double ThisDocument"></p><h4 id="2-将代码复制"><a href="#2-将代码复制" class="headerlink" title="2.将代码复制"></a>2.将代码复制</h4><p><img src="https://raw.githubusercontent.com/wild-civil/typora_img/main/%E7%A3%A8%E5%88%80%E4%B8%8D%E8%AF%AF%E7%A0%8D%E6%9F%B4%E5%B7%A5/202310301033052.png" alt="copy&amp;paste"></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">Sub BatchConvertToPDF()</span><br><span class="line">    Dim destFolderPath As String</span><br><span class="line">    destFolderPath = GetFolderPath</span><br><span class="line">    If destFolderPath &lt;&gt; Empty Then</span><br><span class="line">        Dim path As Variant</span><br><span class="line">        For Each path In GetFilePaths()</span><br><span class="line">            Dim indexOfSlash, indexOfDot As Integer</span><br><span class="line">            indexOfSlash = InStrRev(path, &quot;\&quot;)</span><br><span class="line">            indexOfDot = InStrRev(path, &quot;.&quot;)</span><br><span class="line">             </span><br><span class="line">            Dim destFilePath As String</span><br><span class="line">            destFilePath = destFolderPath + Mid(path, indexOfSlash, indexOfDot - indexOfSlash) + &quot;.pdf&quot;</span><br><span class="line">             </span><br><span class="line">            ConvertToPDF path, destFilePath</span><br><span class="line">        Next path</span><br><span class="line">    End If</span><br><span class="line">End Sub</span><br><span class="line"> </span><br><span class="line">Function GetFilePaths()</span><br><span class="line">    Dim folderPath As String</span><br><span class="line">    With Application.FileDialog(msoFileDialogFilePicker)</span><br><span class="line">        .Filters.Add &quot;word文件&quot;, &quot;*.doc; *.docx; *.docm&quot;</span><br><span class="line">        .Title = &quot;请择要转换的word文件&quot;</span><br><span class="line">        If .Show = -1 Then</span><br><span class="line">            Set GetFilePaths = .SelectedItems</span><br><span class="line">        End If</span><br><span class="line">    End With</span><br><span class="line">End Function</span><br><span class="line"> </span><br><span class="line">Function GetFolderPath()</span><br><span class="line">    Dim folderPath As String</span><br><span class="line">    With Application.FileDialog(msoFileDialogFolderPicker)</span><br><span class="line">        .AllowMultiSelect = False</span><br><span class="line">        .Title = &quot;请选择要存放的目录&quot;</span><br><span class="line">        If .Show = -1 Then</span><br><span class="line">            GetFolderPath = .SelectedItems(1)</span><br><span class="line">        End If</span><br><span class="line">    End With</span><br><span class="line">End Function</span><br><span class="line"> </span><br><span class="line">Sub ConvertToPDF(srcPath As Variant, destPath As String)</span><br><span class="line">    Documents.Open FileName:=srcPath, ConfirmConversions:=False, _</span><br><span class="line">        ReadOnly:=False, AddToRecentFiles:=False, PasswordDocument:=&quot;&quot;, _</span><br><span class="line">        PasswordTemplate:=&quot;&quot;, Revert:=False, WritePasswordDocument:=&quot;&quot;, _</span><br><span class="line">        WritePasswordTemplate:=&quot;&quot;, Format:=wdOpenFormatAuto, XMLTransform:=&quot;&quot;</span><br><span class="line">    ActiveDocument.ExportAsFixedFormat OutputFileName:= _</span><br><span class="line">        destPath, ExportFormat:= _</span><br><span class="line">        wdExportFormatPDF, OpenAfterExport:=False, OptimizeFor:= _</span><br><span class="line">        wdExportOptimizeForOnScreen, Range:=wdExportAllDocument, From:=1, To:=1, _</span><br><span class="line">        Item:=wdExportDocumentContent, IncludeDocProps:=True, KeepIRM:=True, _</span><br><span class="line">        CreateBookmarks:=wdExportCreateNoBookmarks, DocStructureTags:=True, _</span><br><span class="line">        BitmapMissingFonts:=True, UseISO19005_1:=False</span><br><span class="line">    ActiveDocument.Close</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure><h4 id="3-按F5运行代码，选择pdf要保存的位置，需要转换的word（word文件可多选），等待转换成功。"><a href="#3-按F5运行代码，选择pdf要保存的位置，需要转换的word（word文件可多选），等待转换成功。" class="headerlink" title="3.按F5运行代码，选择pdf要保存的位置，需要转换的word（word文件可多选），等待转换成功。"></a>3.按F5运行代码，选择pdf要保存的位置，需要转换的word（word文件可多选），等待转换成功。</h4><h2 id="法二："><a href="#法二：" class="headerlink" title="法二："></a>法二：</h2><p>（有福昕的前提下）</p><h4 id="非常简单-也很好用啊"><a href="#非常简单-也很好用啊" class="headerlink" title="非常简单 也很好用啊"></a>非常简单 也很好用啊</h4><p><img src="https://raw.githubusercontent.com/wild-civil/typora_img/main/%E7%A3%A8%E5%88%80%E4%B8%8D%E8%AF%AF%E7%A0%8D%E6%9F%B4%E5%B7%A5/202310301033987.png" alt="fuxin"><br>福昕高级PDF编辑器 <a href="https://www.aliyundrive.com/s/Ye8gpyiSSiC">https://www.aliyundrive.com/s/Ye8gpyiSSiC</a> 提取码: iz27 点击链接保存，或者复制本段内容，打开「阿里云盘」APP ，无需下载极速在线查看，视频原画倍速播放。</p><h1 id="批量复制文件名称"><a href="#批量复制文件名称" class="headerlink" title="批量复制文件名称"></a>批量复制文件名称</h1><h4 id="非常简单：选中要复制的文件，按住Shift再右键，复制文件地址"><a href="#非常简单：选中要复制的文件，按住Shift再右键，复制文件地址" class="headerlink" title="非常简单：选中要复制的文件，按住Shift再右键，复制文件地址"></a>非常简单：选中要复制的文件，按住Shift再右键，复制文件地址</h4><p><img src="https://raw.githubusercontent.com/wild-civil/typora_img/main/%E7%A3%A8%E5%88%80%E4%B8%8D%E8%AF%AF%E7%A0%8D%E6%9F%B4%E5%B7%A5/202310301033572.png" alt="copy_adrres"></p><h4 id="可以先复制到记事本，然后-Ctrl-H-替换多余的部分为空"><a href="#可以先复制到记事本，然后-Ctrl-H-替换多余的部分为空" class="headerlink" title="可以先复制到记事本，然后 Ctrl+H 替换多余的部分为空"></a>可以先复制到记事本，然后 Ctrl+H 替换多余的部分为空</h4><p><img src="https://raw.githubusercontent.com/wild-civil/typora_img/main/%E7%A3%A8%E5%88%80%E4%B8%8D%E8%AF%AF%E7%A0%8D%E6%9F%B4%E5%B7%A5/202310301033924.png" alt="replace"></p><h1 id="文件批量重命名"><a href="#文件批量重命名" class="headerlink" title="文件批量重命名"></a>文件批量重命名</h1><h4 id="不必多说，上链接"><a href="#不必多说，上链接" class="headerlink" title="不必多说，上链接"></a>不必多说，上链接</h4><p>ReNamer Pro 7.3.exe <a href="https://www.aliyundrive.com/s/17KLzJbQMAm">https://www.aliyundrive.com/s/17KLzJbQMAm</a> 点击链接保存，或者复制本段内容，打开「阿里云盘」APP ，无需下载极速在线查看，视频原画倍速播放。</p><p>阿里云超过200文件数目则无法分享（我没开会员），因此大家拿到手后双击exe文件可以选择安装便携版<br><img src="https://raw.githubusercontent.com/wild-civil/typora_img/main/%E7%A3%A8%E5%88%80%E4%B8%8D%E8%AF%AF%E7%A0%8D%E6%9F%B4%E5%B7%A5/202310301033157.png" alt="portable_v"></p><p>然后选中文即可<br><img src="https://raw.githubusercontent.com/wild-civil/typora_img/main/%E7%A3%A8%E5%88%80%E4%B8%8D%E8%AF%AF%E7%A0%8D%E6%9F%B4%E5%B7%A5/202310301033412.png" alt="simple_chinese"></p><p><img src="https://raw.githubusercontent.com/wild-civil/typora_img/main/%E7%A3%A8%E5%88%80%E4%B8%8D%E8%AF%AF%E7%A0%8D%E6%9F%B4%E5%B7%A5/202310301035291.png" alt="on_your_way"><br>非常简单，非常方便</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Matlab</title>
      <link href="/post/f73596b.html"/>
      <url>/post/f73596b.html</url>
      
        <content type="html"><![CDATA[<p>Matlab&#x2F;Simulink快捷键<br>Simulink快捷键<br>模型调整<br>Alt + Enter：为选定模块设置主要参数<br>Ctrl + Shift + I：打开或隐藏 Property Inspector<br>Shift + 拖动句柄：调整模块大小，保持相同的高宽比<br>Ctrl + 拖动句柄：从中心调整模块大小<br>Ctrl + R：顺时针旋转模块<br>Ctrl + Shift + R：逆时针旋转模块<br>Ctrl + I：翻转模块<br>Ctrl + F：查找模块<br>Ctrl + M：封装模块<br>Ctrl + U：在模块封装下查找<br>Ctrl + Shift + Y：注释模块<br>Ctrl + Shift + X：注释掉或取消注释模块<br>Ctrl + K：刷新Mode模块<br>Ctrl + L：对于链接模块，转到父模块的库<br>Ctrl + H：打开 Model Explorer</p><p>仿真键盘快捷键<br>Ctrl + E：打开 Configuration Parameters对话框<br>Ctrl + D：更新图<br>Ctrl + T：开始仿真<br>Ctrl + Shift + T：停止仿真<br>Ctrl + B：构建模型（用于代码生成）</p><p>调试和断点键盘快捷方式<br>F10：步骤<br>F11：步入<br>Shift + F11：步出<br>F5：运行<br>F12：设置&#x2F;清除断点<br>Ctrl + J：查看simple time<br>视图放大：r<br>视图缩小：v<br>————————————————<br>版权声明：本文为CSDN博主「小曾&amp;同学」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/acknole/article/details/112344263">https://blog.csdn.net/acknole/article/details/112344263</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> matlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git实战</title>
      <link href="/post/ff99adbe.html"/>
      <url>/post/ff99adbe.html</url>
      
        <content type="html"><![CDATA[<img src="http://qiniu.hanvon.top/blog_article/Learning/Git/git_logo.png" align="right" /><h1 id="Git实战小笔记"><a href="#Git实战小笔记" class="headerlink" title="Git实战小笔记"></a><strong>Git实战小笔记</strong></h1><p>什么是Git? 答：Git是一个 分布式的版本控制 软件。</p><p>为什么要做版本控制？答：要保留之前所有的版本,以便回滚和修改。</p><p>为啥要学Git?答：不学Git，无法参与满足大公司代码开发功能（版本管理、提交代码）。</p><blockquote><p>本文不讲解任何不同代码控制软件的不同，也不讲解可视化版本控制的使用。 为什么？答：大家都用这玩意，你别折腾上古工具(SVN)这些东西。</p></blockquote><h1 id="讲故事学Git"><a href="#讲故事学Git" class="headerlink" title="讲故事学Git"></a>讲故事学Git</h1><h2 id="第一阶段-单枪匹马开始干"><a href="#第一阶段-单枪匹马开始干" class="headerlink" title="第一阶段: 单枪匹马开始干"></a>第一阶段: 单枪匹马开始干</h2><p>想要让git对一个目录进行版本控制需要以下步骤:</p><ul><li>进入要管理的文件央</li><li>执行初始化命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><ul><li>管理目录下的文件状态</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">注:新增的文件和修改过后的文件都是红色</span><br></pre></td></tr></table></figure><p>管理指定文件(红变绿)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add [filename.filetype] //添加到缓存区</span><br><span class="line">git add .</span><br></pre></td></tr></table></figure><p> git status color:</p><p> red 🔴:not add</p><p> green 🟢:had added</p><ul><li>个人信息配置:用户名、邮箱 【一次即可】</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;[your email address]&quot;</span></span><br><span class="line">git config --global user.name <span class="string">&quot;[your nickname]&quot;</span> </span><br></pre></td></tr></table></figure><ul><li>生成版本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&#x27;描述信息&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>查看版本记录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><h2 id="第二阶段-拓展新功能"><a href="#第二阶段-拓展新功能" class="headerlink" title="第二阶段: 拓展新功能"></a>第二阶段: 拓展新功能</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add</span><br><span class="line">git commit -m <span class="string">&#x27;短视频&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="第三阶段-“约饭事件”"><a href="#第三阶段-“约饭事件”" class="headerlink" title="第三阶段: “约饭事件”"></a>第三阶段: “约饭事件”</h2><ul><li>回滚(reset)至之前版本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br><span class="line">git reset --hard [commit <span class="built_in">id</span>] //回滚版本</span><br></pre></td></tr></table></figure><ul><li>回滚之之后版本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br><span class="line">git reset --hard [commit <span class="built_in">id</span>] //回滚参考日志版本（无任何当前工作缓存）</span><br></pre></td></tr></table></figure><h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add</span><br><span class="line">git commit</span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line">git reflog</span><br><span class="line">git reset --hard 版本号</span><br></pre></td></tr></table></figure><img src="http://qiniu.hanvon.top/blog_article/Learning/Git/sum.png" style="max-width:70%; height:auto" /><h2 id="第四阶段-商城-amp-紧急修复bug"><a href="#第四阶段-商城-amp-紧急修复bug" class="headerlink" title="第四阶段:商城&amp;紧急修复bug"></a>第四阶段:商城&amp;紧急修复bug</h2><h4 id="2-5-1分支"><a href="#2-5-1分支" class="headerlink" title="2.5.1分支"></a>2.5.1分支</h4><p>分支可以给使用者提供多个环境的可以,意味着你可以把你的工作从开发主线上分离开来,以免影响开 发主线。</p><h4 id="2-5-2-紧急修复bug方案"><a href="#2-5-2-紧急修复bug方案" class="headerlink" title="2.5.2 紧急修复bug方案"></a>2.5.2 紧急修复bug方案</h4><img src="http://qiniu.hanvon.top/blog_article/Learning/Git/emergencyrepair.png" style="max-width:70%; height:auto" /><p>2.5.3 命令总结</p><ul><li>查看分支 (展示分支)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch </span><br></pre></td></tr></table></figure><ul><li>创建分支</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch [branch name]</span><br></pre></td></tr></table></figure><ul><li>切换分支</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout [branch name]</span><br><span class="line">git checkout -b [branch name] //切换并且创建分支</span><br></pre></td></tr></table></figure><ul><li>分支改名</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -m [old branch name] [new branch name] //分支改名</span><br></pre></td></tr></table></figure><ul><li>分支合并(可能产生冲突)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git merge [branch name] //合并到哪，切换哪的分支。</span><br><span class="line">🔴注意:先切换分支再合并</span><br></pre></td></tr></table></figure><ul><li>删除分支</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d [branch name] //删除分支</span><br></pre></td></tr></table></figure><h4 id="2-5-4-工作流"><a href="#2-5-4-工作流" class="headerlink" title="2.5.4 工作流"></a>2.5.4 工作流</h4><img src="http://qiniu.hanvon.top/blog_article/Learning/Git/branch.png" style="zoom:50%;" /><h2 id="第五阶段-进军三里屯"><a href="#第五阶段-进军三里屯" class="headerlink" title="第五阶段:进军三里屯"></a>第五阶段:进军三里屯</h2><p>有钱之后就要造呀,一个人在三里屯买了一层楼做办公室。</p><img src="http://qiniu.hanvon.top/blog_article/Learning/Git/hulian.png" style="max-width:60%; height:auto" /><h4 id="2-6-1-第一天上班前在家上传代码"><a href="#2-6-1-第一天上班前在家上传代码" class="headerlink" title="2.6.1 第一天上班前在家上传代码"></a>2.6.1 第一天上班前在家上传代码</h4><p>首先,需要注册github账号,并创建远程仓库,然后再执行如下命令,将代码上传到github。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 给远程仓库起别名</span><br><span class="line">git remote add origin 远程仓库地址</span><br><span class="line">2. 向远程推送代码</span><br><span class="line">git push -u origin 分支</span><br></pre></td></tr></table></figure><h4 id="2-6-2-初次在公司新电脑下载代码"><a href="#2-6-2-初次在公司新电脑下载代码" class="headerlink" title="2.6.2 初次在公司新电脑下载代码"></a>2.6.2 初次在公司新电脑下载代码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 克隆远程仓库代码</span><br><span class="line">git <span class="built_in">clone</span> 远程仓库地址  (内部已实现git remote add origin 远程仓库地址)</span><br><span class="line">2. 切换分支</span><br><span class="line">git checkout 分支</span><br></pre></td></tr></table></figure><p>在公司下载完代码后,继续开发</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. 切换到dev分支进行开发</span><br><span class="line">git checkout dev</span><br><span class="line">2. 把master分支合并到dev [仅一次] </span><br><span class="line">git merge master</span><br><span class="line">3. 修改代码</span><br><span class="line">4. 提交代码</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;xx&#x27;</span></span><br><span class="line">git push origin dev</span><br></pre></td></tr></table></figure><h4 id="2-6-3-下班回到家继续写代码"><a href="#2-6-3-下班回到家继续写代码" class="headerlink" title="2.6.3 下班回到家继续写代码"></a>2.6.3 下班回到家继续写代码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1. 切换到dev分支进行开发</span><br><span class="line">git checkout dev</span><br><span class="line">2. 拉代码</span><br><span class="line">git pull origin dev</span><br><span class="line">3. 继续开发</span><br><span class="line"></span><br><span class="line">4. 提交代码</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;xx&#x27;</span></span><br><span class="line">git push origin dev</span><br></pre></td></tr></table></figure><h4 id="2-6-4-到公司继续开发"><a href="#2-6-4-到公司继续开发" class="headerlink" title="2.6.4 到公司继续开发"></a>2.6.4 到公司继续开发</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1. 切换到dev分支进行开发</span><br><span class="line">git checkout dev</span><br><span class="line">2. 拉最新代码(不必再<span class="built_in">clone</span>,只需要通过pull获取最新代码即可)</span><br><span class="line">git pull origin dev</span><br><span class="line">3. 继续开发</span><br><span class="line"></span><br><span class="line">4. 提交代码</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;xx&#x27;</span></span><br><span class="line">git push origin dev</span><br></pre></td></tr></table></figure><p>开发完毕,要上线了！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. 将dev分支合并到master,进行上线</span><br><span class="line">git checkout master</span><br><span class="line">git merge dev</span><br><span class="line">git push origin master</span><br><span class="line">2. 把dev分支也推送到远程</span><br><span class="line">git checkout dev</span><br><span class="line">git merge master</span><br><span class="line">git push origin dev</span><br></pre></td></tr></table></figure><h4 id="2-6-5-在公司约妹子忘记提交代码"><a href="#2-6-5-在公司约妹子忘记提交代码" class="headerlink" title="2.6.5 在公司约妹子忘记提交代码"></a>2.6.5 在公司约妹子忘记提交代码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. 拉代码</span><br><span class="line">git pull origin dev</span><br><span class="line">2. 继续开发</span><br><span class="line"></span><br><span class="line">3. 提交代码</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;xx&#x27;</span></span><br><span class="line"></span><br><span class="line">注:忘记push了</span><br></pre></td></tr></table></figure><h4 id="2-6-6-回家继续写代码"><a href="#2-6-6-回家继续写代码" class="headerlink" title="2.6.6 回家继续写代码"></a>2.6.6 回家继续写代码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. 拉代码,发现在公司写的代码忘记提交 ... </span><br><span class="line">git pull origin dev</span><br><span class="line"></span><br><span class="line">2. 继续开发其他功能</span><br><span class="line"></span><br><span class="line">3. 把dev分支也推送到远程</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;xx&#x27;</span></span><br><span class="line">git push origin dev</span><br></pre></td></tr></table></figure><h4 id="2-6-7-到公司继续写代码"><a href="#2-6-7-到公司继续写代码" class="headerlink" title="2.6.7 到公司继续写代码"></a>2.6.7 到公司继续写代码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. 拉代码,把晚上在家写的代码拉到本地(有合并、可能产生冲突)</span><br><span class="line">git pull origin dev</span><br><span class="line"></span><br><span class="line">2. 如果有冲突,手动解决冲突</span><br><span class="line"></span><br><span class="line">3. 继续开发其他功能</span><br><span class="line"></span><br><span class="line">4. 把dev分支也推送到远程</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;xx&#x27;</span></span><br><span class="line">git push origin dev</span><br></pre></td></tr></table></figure><h4 id="2-6-8-其他"><a href="#2-6-8-其他" class="headerlink" title="2.6.8 其他"></a>2.6.8 其他</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git pull origin dev</span><br><span class="line">等价于</span><br><span class="line">git fetch origin dev</span><br><span class="line">git merge origin/dev</span><br></pre></td></tr></table></figure><img src="http://qiniu.hanvon.top/blog_article/Learning/Git/elsegitsum.png" style="max-width:80%; height:auto" /><h4 id="2-6-9-rebase的作用"><a href="#2-6-9-rebase的作用" class="headerlink" title="2.6.9 rebase的作用?"></a>2.6.9 rebase的作用?</h4><p>rebase可以保持提交记录简洁,不分叉。</p><h4 id="2-6-10-快速解决冲突"><a href="#2-6-10-快速解决冲突" class="headerlink" title="2.6.10 快速解决冲突"></a>2.6.10 快速解决冲突</h4><p>​①安装beyond compare<br>​②在git中配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --<span class="built_in">local</span> merge.tool bc3</span><br><span class="line">git config --<span class="built_in">local</span> mergetool.path <span class="string">&#x27;/usr/local/bin/bcomp&#x27;</span></span><br><span class="line">git config --<span class="built_in">local</span> mergetool.keepBackup <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>​③应用beyond compare 解决冲突</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git mergetool</span><br></pre></td></tr></table></figure><h3 id="2-7-小总结"><a href="#2-7-小总结" class="headerlink" title="2.7 小总结"></a>2.7 小总结</h3><ul><li>添加远程连接(别名)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin 地址</span><br></pre></td></tr></table></figure><ul><li>推送代码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin dev</span><br></pre></td></tr></table></figure><ul><li>下载代码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 地址</span><br></pre></td></tr></table></figure><ul><li>拉取代码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git pull origin dev</span><br><span class="line">等价于</span><br><span class="line">git fetch origin dev</span><br><span class="line">git merge origin/dev</span><br></pre></td></tr></table></figure><ul><li>保持代码提交整洁(变基)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase 分支</span><br></pre></td></tr></table></figure><ul><li>记录图形展示</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --graph --pretty=format:<span class="string">&quot;%h %s&quot;</span></span><br></pre></td></tr></table></figure><h2 id="第六阶段-多人协同开发工作流"><a href="#第六阶段-多人协同开发工作流" class="headerlink" title="第六阶段:多人协同开发工作流"></a>第六阶段:多人协同开发工作流</h2><h4 id="2-8-1-创建项目-amp-邀请成员"><a href="#2-8-1-创建项目-amp-邀请成员" class="headerlink" title="2.8.1 创建项目&amp;邀请成员"></a>2.8.1 创建项目&amp;邀请成员</h4><p>协同开发时,需要所有成员都可以对同一个项目进行操作,需要邀请成员并赋予权限,否则无法开发。 github支持两种创建项目的方式(供多人协同开发)。</p><p>​1.合作者,将用户添加到仓库合作者中之后,该用户就可以向当前仓库提交代码。<br>​2.组织,将成员邀请进入组织,组织下可以创建多个仓库,组织成员可以向组织下仓库提交代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">扩展: Tag标签管理</span><br><span class="line">为了能清晰的管理版本,在公司不会直接使用 commit来做版本,会基于Tag来实现: v1.0 、v1.2 、v2.0 版本。</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git tag -a v1.0 -m <span class="string">&#x27;版本介绍&#x27;</span> 创建本地创建Tag信息</span><br><span class="line">git tag -d v1.0删除Tag</span><br><span class="line">git push origin  --tags将本地tag信息推送到远程仓库</span><br><span class="line">git pull origin  --tags更新本地tag版本信息</span><br><span class="line"></span><br><span class="line">git checkout v.10切换tag</span><br><span class="line">git <span class="built_in">clone</span> -b v0.1 地址   指定tag下载代码</span><br></pre></td></tr></table></figure><h4 id="2-8-2-小弟开发"><a href="#2-8-2-小弟开发" class="headerlink" title="2.8.2 小弟开发"></a>2.8.2 小弟开发</h4><ul><li>小弟注册Github 或 Gitlab账号</li><li>邀请小弟进入组织(默认对组织中的项目具有读权限)</li><li>邀请小弟成为某项目的合作者</li><li>小弟在自己电脑上下载代码并开发</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/oldboy-org/dbhot.git</span><br><span class="line"><span class="built_in">cd</span> dbhot</span><br><span class="line">git checkout dev</span><br><span class="line">git checkout -b dzz</span><br><span class="line">写代码 ...</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;斗地主功能开发完成&#x27;</span></span><br><span class="line">git push origin ddz</span><br></pre></td></tr></table></figure><h4 id="2-8-3-code-review"><a href="#2-8-3-code-review" class="headerlink" title="2.8.3 code review"></a>2.8.3 code review</h4><p>​1.配置,代码review之后才能合并到dev分支。<br>​2.小弟提交 code review申请<br>​3.组长做 code review</p><h4 id="2-8-4-提测上线-预发布"><a href="#2-8-4-提测上线-预发布" class="headerlink" title="2.8.4 提测上线(预发布)"></a>2.8.4 提测上线(预发布)</h4><p>由专门团队或团队leader执行以下步骤:</p><p>​    1.基于dev分值创建release分值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout dev</span><br><span class="line">git checkout -b release</span><br></pre></td></tr></table></figure><p>​2.测试等<br>​3.合并到master</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用pull request</span><br><span class="line">或</span><br><span class="line">本地将release合并到master分支</span><br></pre></td></tr></table></figure><p>​4.在master分支打tag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag -a v2 -m <span class="string">&#x27;第二版  斗地主功能&#x27;</span></span><br><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure><p>​5.运维人员就可以去下载代码做上线了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b v2 地址</span><br></pre></td></tr></table></figure><h2 id="第七阶段-给开源软件贡献代码"><a href="#第七阶段-给开源软件贡献代码" class="headerlink" title="第七阶段:给开源软件贡献代码"></a>第七阶段:给开源软件贡献代码</h2><p>​1.fork源代码 将别人源代码拷贝到我自己的远程仓库。<br>​2.在自己仓库进行修改代码<br>​3.给源代码的作者提交 修复bug的申请 (pull request)</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="3-1-配置"><a href="#3-1-配置" class="headerlink" title="3.1 配置"></a>3.1 配置</h4><ul><li>项目配置文件:项目&#x2F;.git&#x2F;conig</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config -- user.name <span class="string">&#x27;冯一航&#x27;</span></span><br><span class="line">git config -- <span class="built_in">local</span> user.email <span class="string">&#x27;fengyihang@xx.com&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>全局配置文件: ~&#x2F;.gitconig</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&#x27;fengyihang&#x27;</span></span><br><span class="line">git config --global user.name <span class="string">&#x27;fengyihang@xx.com&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>系统配置文件: &#x2F;etc&#x2F;.gitconig</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --system user.name <span class="string">&#x27;fengyihang&#x27;</span></span><br><span class="line">git config --system user.name <span class="string">&#x27;fengyihang@xx.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意:需要有root权限</span></span><br></pre></td></tr></table></figure><p>应用场景:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gitconfig--<span class="built_in">local</span> user.name <span class="string">&#x27;冯一航&#x27;</span></span><br><span class="line">gitconfig--<span class="built_in">local</span> user.email <span class="string">&#x27;fengyihang@xx.com&#x27;</span></span><br><span class="line">gitconfig--<span class="built_in">local</span> merge.tool bc3</span><br><span class="line">gitconfig--<span class="built_in">local</span> mergetool.path <span class="string">&#x27;/usr/local/bin/bcomp&#x27;</span></span><br><span class="line">gitconfig--<span class="built_in">local</span> mergetool.keepBackup <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>git remote add origin 地址  ,默认添加在本地配置文件中(–local)</p><h4 id="3-2-免密码登录"><a href="#3-2-免密码登录" class="headerlink" title="3.2 免密码登录"></a>3.2 免密码登录</h4><ul><li>URL中体现</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">原来的地址:  https://github.com/Fengyihang/dbhot.git</span><br><span class="line">修改的地址:  https://用户名:密码@github.com/Fengyihang/dbhot.git  </span><br><span class="line">git remote add origin https://用户名:密码@github.com/Fengyihang/dbhot.git git push origin master</span><br></pre></td></tr></table></figure><ul><li>SSH实现</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 生成公钥和私钥(默认放在  ~/.ssh目录下,  id_rsa.pub公钥、  id_rsa私钥) ssh-keygen</span><br><span class="line">2. 拷贝公钥的内容,并设置到github中。</span><br><span class="line">3. 在git本地中配置ssh地址</span><br><span class="line">git remote add origin git@github.com:Fengyihang/dbhot.git</span><br><span class="line"></span><br><span class="line">4. 以后使用</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><ul><li>git自动管理凭证</li></ul><h4 id="3-3-git忽略文件"><a href="#3-3-git忽略文件" class="headerlink" title="3.3 git忽略文件"></a>3.3 git忽略文件</h4><p>让Git不再管理当前目录下的某些文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*.h</span><br><span class="line">!a.h</span><br><span class="line">files/</span><br><span class="line">*.py[c|a|d]</span><br></pre></td></tr></table></figure><p>更多参考: <a href="https://github.com/github/gitignore">https://github.com/github/gitignore</a></p><h4 id="3-4-github任务管理相关"><a href="#3-4-github任务管理相关" class="headerlink" title="3.4 github任务管理相关"></a>3.4 github任务管理相关</h4><ul><li>issues ,文档以及任务管理。</li><li>wiki ,项目文档。</li></ul><p>结语<br>好好学习天天向上, 希望git实战课程对你能够有所帮助,更多资源关注:</p><p>Notion：<a href="https://www.notion.so/Git-e623a6fa739a46eebd6c6646955c41c8">https://www.notion.so/Git-e623a6fa739a46eebd6c6646955c41c8</a></p><p>PDF：<a href="https://www.notion.so/Git-e623a6fa739a46eebd6c6646955c41c8#d173f23264714f6f9db110660db0fade">https://www.notion.so/Git-e623a6fa739a46eebd6c6646955c41c8#d173f23264714f6f9db110660db0fade</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>粗学IIC</title>
      <link href="/post/11f9a402.html"/>
      <url>/post/11f9a402.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、IIC简介"><a href="#一、IIC简介" class="headerlink" title="一、IIC简介"></a>一、IIC简介</h1><p><strong>I2C（Inter-Integrated Circuit，集成线路总线） 总线</strong>是由飞利浦(Philips)公司开发的一种简单、双向二线制同步串行总线。它只需要两根线即可在连接于总线上的器件之间传送信息。</p><p>I2C 总线支持任何IC 生产过程(NMOS CMOS、 双极性)。两线――串行数据（SDA） 和串行时钟 （SCL） 线在连接到总线的器件间传递信息。 每个器件都有一个唯一的地址识别（无论是微控制器——MCU、 LCD 驱动器、 存储器或键盘接口） ， 而且都可以作为一个发送器或接收器（由器件的功能决定) 。<br>在 <code>CPU 与被控 IC 之间</code>、 <code>IC 与 IC 之间进行双向传送</code>， 高速 IIC 总线一般<u>可达 400kbps 以上</u>。<br>I2C 总线在传送数据过程中共有三种类型信号， 它们分别是：&#x3D;&#x3D;开始信号、结束信号和应答信号&#x3D;&#x3D;。</p><h1 id="二、I2C总线物理拓补结构（主从模式）"><a href="#二、I2C总线物理拓补结构（主从模式）" class="headerlink" title="二、I2C总线物理拓补结构（主从模式）"></a>二、I2C总线物理拓补结构（主从模式）</h1><p><img src="https://raw.githubusercontent.com/wild-civil/typora_img/main/images/IIC%E6%80%BB%E7%BA%BF%E7%89%A9%E7%90%86%E6%8B%93%E6%89%91.jpg" alt="IIC总线物理拓扑"></p><p>一般情况下，数据线SDA和时钟线SCL都是处于上拉电阻状态。因为：在总线空闲状态时，这两根线一般被上面所接的上拉电阻拉高，保持着高电平。<font color=red>(上拉电阻一般在4.7k~10k之间，默认拉高)</font></p><p>数据的传输速率在标准模式下可达100kbit&#x2F;s，在快速模式下可达400kbit&#x2F;s，在高速模式（Hs模式）下可达3.4Mbit&#x2F;s，各种被控器件均并联在总线上，通过器件地址（每个器件的地址在器件手册有些）识别。</p><p>一般我们使用的I2C总线速度小于400Kbit&#x2F;s。</p><p>由于I2C器件一般采用开漏结构与总线连接，所以SCL和SDA线均接上拉电阻</p><h1 id="三、I2C时序"><a href="#三、I2C时序" class="headerlink" title="三、I2C时序"></a>三、I2C时序</h1><p>IIC总线在传输数据的过程的信号中，**<u>起始信号</u>是必需的<strong>，</strong>结束信号和应答信号，都可以不要**。同时我们还要介绍其<code>空闲状态、数据的有效性、数据传输</code>。</p><p>IIC总线的时序图：</p><p><img src="https://raw.githubusercontent.com/wild-civil/typora_img/main/images/iic%E6%97%B6%E5%BA%8F.jpg" alt="iic时序"></p><p>简化了的时序图</p><p><img src="https://raw.githubusercontent.com/wild-civil/typora_img/main/images/start_stop.jpg" alt="start_stop"></p><h2 id="空闲状态"><a href="#空闲状态" class="headerlink" title="空闲状态"></a>空闲状态</h2><p><strong>当IIC总线的数据线SDA和时钟线SCL两条信号线同时处于高电平时，规定为总线的空闲状态。</strong>此时各个器件的输出级场效应管均处在截止状态，即释放总线，由两条信号线各自的上拉电阻把电平拉高。 </p><h2 id="起始信号与停止信号"><a href="#起始信号与停止信号" class="headerlink" title="起始信号与停止信号"></a>起始信号与停止信号</h2><ul><li><p><strong>起始信号：</strong>当时钟线SCL为高电平时，数据线SDA由高到低低电的跳变；(启动信号是一种电平跳变时序信号，而不是一个电平信号)</p></li><li><p><strong>停止信号：</strong>当时钟线SCL为高电平时，数据线SDA由低到高低电的跳变；(停止信号也是一种电平跳变时序信号，而不是一个电平信号)</p></li></ul><h2 id="应答信号"><a href="#应答信号" class="headerlink" title="应答信号"></a>应答信号</h2><p>发送器每发送一个字节（8个bit），就在时钟脉冲9期间释放数据线，由接收器反馈一个应答信号。 </p><ul><li><p>应答信号为低电平时，规定为有效应答位（ACK，简称应答位），表示接收器已经成功地接收了该字节；</p></li><li><p>应答信号为高电平时，规定为非应答位（NACK），一般表示接收器接收该字节没有成功。</p></li></ul><p><img src="https://raw.githubusercontent.com/wild-civil/typora_img/main/images/ACK.jpg" alt="ACK"></p><p>对于反馈有效应答位ACK的要求是：接收器在第9个时钟脉冲之前的低电平期间将数据线SDA拉低，并且确保在该时钟的高电平期间为稳定的低电平。 <strong>如果接收器是主控器，则在它收到最后一个字节后，发送一个NACK信号，以通知被控发送器结束数据发送，并释放数据线SDA，以便主控接收器发送一个停止信号P。</strong></p><h3 id="数据有效性"><a href="#数据有效性" class="headerlink" title="数据有效性"></a>数据有效性</h3><p><strong>IIC总线进行数据传送时，时钟信号为高电平期间，数据线上的数据必须保持稳定；只有在时钟线上的信号为低电平期间，数据线上的高电平或低电平状态才允许变化。</strong> </p><p>即：<strong>数据在时钟线SCL的上升沿到来之前就需准备好。并在在下降沿到来之前必须稳定。</strong></p><p><img src="https://raw.githubusercontent.com/wild-civil/typora_img/main/images/stable.jpg" alt="stable"></p><h3 id="数据的传达"><a href="#数据的传达" class="headerlink" title="数据的传达"></a>数据的传达</h3><p>在IIC总线上传送的每一位数据都有一个时钟脉冲相对应（或同步控制），即在SCL串行时钟的配合下，在SDA上逐位地串行传送每一位数据。数据位的传输是边沿触发。</p><h3 id="延时时间"><a href="#延时时间" class="headerlink" title="延时时间"></a>延时时间</h3><p>可以查手册，也可以直接浏览下方图：</p><p><img src="https://raw.githubusercontent.com/wild-civil/typora_img/main/images/delay_time.jpg" alt="delay_time"></p><h2 id="IIC总线的数据传送"><a href="#IIC总线的数据传送" class="headerlink" title="IIC总线的数据传送"></a>IIC总线的数据传送</h2><p><strong>IIC总线上的每一个设备都可以作为主设备或者从设备，而且每一个设备都会对应一个唯一的地址（地址通过物理接地或者拉高），主从设备之间就通过这个地址来确定与哪个器件进行通信</strong>，在通常的应用中，我们把CPU带I2C总线接口的模块作为主设备，把挂接在总线上的其他设备都作为从设备。</p><p>也就是说，<strong>主设备在传输有效数据之前要先指定从设备的地址，地址指定的过程和上面数据传输的过程一样，只不过大多数从设备的地址是7位的，然后协议规定再给地址添加一个最低位用来表示接下来数据传输的方向，0表示主设备向从设备写数据，1表示主设备向从设备读数据。</strong></p><p><img src="https://raw.githubusercontent.com/wild-civil/typora_img/main/images/shixutu.jpg" alt="shixutu"></p><ul><li><strong>主设备往从设备中写数据。数据传输格式如下：</strong></li></ul><p><img src="https://raw.githubusercontent.com/wild-civil/typora_img/main/images/w_data.jpg" alt="w_data"></p><p>淡蓝色部分表示数据由主机向从机传送，粉红色部分则表示数据由从机向主机传送。</p><p><strong>写用0来表示（高电平），读用1来表示（低电平）。</strong></p><ul><li><strong>主设备从从设备中读数据。数据传输格式如下：</strong></li></ul><p><img src="https://raw.githubusercontent.com/wild-civil/typora_img/main/images/r_data.jpg" alt="r_data"></p><p><strong>在从机产生响应时，主机从发送变成接收，从机从接收变成发送。之后，数据由从机发送，主机接收，每个应答由主机产生，时钟信号仍由主机产生。若主机要终止本次传输，则发送一个非应答信号，接着主机产生停止条件。</strong></p><ul><li>主设备往从设备中写数据，然后重启起始条件，紧接着从从设备中读取数据；或者是主设备从从设备中读数据，然后重启起始条件，紧接着主设备往从设备中写数据。数据传输格式如下：</li></ul><p><img src="https://raw.githubusercontent.com/wild-civil/typora_img/main/images/rw_data.jpg" alt="rw_data"></p><p>在多主的通信系统中，总线上有多个节点，它们都有自己的寻址地址，可以作为从节点被别的节点访问，同时它们都可以作为主节点向其它的节点发送控制字节和传送数据。但是如果有两个或两个以上的节点都向总线上发送启动信号并开始传送数据，这样就形成了冲突。要解决这种冲突，就要进行仲裁的判决，这就是I2C总线上的仲裁。</p><p><strong>I2C总线上的仲裁分两部分：SCL线的同步和SDA线的仲裁。</strong></p><p>这部分就暂时不介绍了，想要了解：可以参考链接<a href="https://blog.csdn.net/bluewhaletech/article/details/37876111">浅谈I2C总线</a>或<a href="http://www.cnblogs.com/aaronLinux/p/6218660.html">I2C总线协议图解</a>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> iic </tag>
            
            <tag> 时序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学物联网之ESP8266NodeMCU（五）</title>
      <link href="/post/e2f4da2.html"/>
      <url>/post/e2f4da2.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、ESP8266闪存文件系统基本操作"><a href="#一、ESP8266闪存文件系统基本操作" class="headerlink" title="一、ESP8266闪存文件系统基本操作"></a>一、<a href="http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-operation/">ESP8266闪存文件系统基本操作</a></h1><p>当我们上传程序给ESP8266时，我们的程序具体存放在什么地方呢？</p><p>每一个ESP8266都配有一个闪存，这个闪存很像是一个小硬盘，我们上传的文件就被存放在这个闪存里。这个闪存的全称是Serial Peripheral Interface Flash File System（SPIFFS）。</p><p>除了可以存放上传的程序以外，我们还可以将网页文件或者系统配置文件存放在ESP8266的闪存中。在这节课里，我们将学习如何利用程序对闪存文件系统（SPIFFS）进行文件读取和修改。</p><h2 id="1、通过程序向闪存文件系统写入信息"><a href="#1、通过程序向闪存文件系统写入信息" class="headerlink" title="1、通过程序向闪存文件系统写入信息"></a>1、通过程序向闪存文件系统写入信息</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********************************************************************</span></span><br><span class="line"><span class="comment">项目名称/Project           : 零基础入门学用物联网</span></span><br><span class="line"><span class="comment">程序名称/Program name      : esp8266-flash-write</span></span><br><span class="line"><span class="comment">团队/Team                 : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">程序目的/Purpose           : 此程序用于演示如何向NodeMCU的SPIFFS中建立名为</span></span><br><span class="line"><span class="comment">                            notes.txt的文件，程序还将向该文件写入信息。</span></span><br><span class="line"><span class="comment">-----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">函数说明：</span></span><br><span class="line"><span class="comment">SPIFFS.open(file_name, &quot;w&quot;); </span></span><br><span class="line"><span class="comment">以上函数有两个参数：</span></span><br><span class="line"><span class="comment">第一个参数是被操作的文件名称，本示例中该文件为/notes.txt</span></span><br><span class="line"><span class="comment">第二个参数&quot;w&quot; 代表写入文件信息。（如需了解如何读取信息，请参阅示例程序esp8266-flash-read）</span></span><br><span class="line"><span class="comment">***********************************************************************/</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;FS.h&gt;</span>  <span class="comment">//★★★</span></span></span><br><span class="line"> </span><br><span class="line">String file_name = <span class="string">&quot;/taichi-maker/notes.txt&quot;</span>; <span class="comment">//被读取的文件位置和名称★★★</span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);</span><br><span class="line">  Serial.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  Serial.println(<span class="string">&quot;SPIFFS format start&quot;</span>);</span><br><span class="line">  SPIFFS.format();    <span class="comment">// 格式化SPIFFS★★★</span></span><br><span class="line">  Serial.println(<span class="string">&quot;SPIFFS format finish&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(SPIFFS.begin())&#123; <span class="comment">// 启动SPIFFS★★★</span></span><br><span class="line">    Serial.println(<span class="string">&quot;SPIFFS Started.&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;SPIFFS Failed to Start.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  File dataFile = SPIFFS.open(file_name, <span class="string">&quot;w&quot;</span>);<span class="comment">// 建立File对象用于向SPIFFS中的file对象（即/notes.txt）写入信息★★★</span></span><br><span class="line">  dataFile.println(<span class="string">&quot;Hello IOT World.&quot;</span>);       <span class="comment">// 向dataFile写入字符串信息★★★</span></span><br><span class="line">  dataFile.close();                           <span class="comment">// 完成文件写入后关闭文件★★★</span></span><br><span class="line">  Serial.println(<span class="string">&quot;Finished Writing data to SPIFFS&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用SPIFFS存储文件以前，我们必须使用<code>#include &quot;FS.h&quot;</code>,如以上程序第18行所示。</p><p>程序第20行，我们建立了一个字符串变量。该变量用于存储文件位置和文件名。其中<code>/</code>代表根目录。<code>/taichi-maker/</code>代表根目录下的<code>taichi-maker</code>目录。<code>notes.txt</code>代表着文件名称。</p><p>程序第27行<code>SPIFFS.format();</code>是对闪存文件系统进行格式化。这很想是我们对u盘进行格式化的操作。您无需每次使用闪存文件系统都对它进行格式化操作。这里仅仅是为了演示如何使用<code>SPIFFS.format();</code>。</p><p>程序第30行，<code>SPIFFS.begin()</code>用于启动闪存文件系统。在每次使用闪存文件系统以前都需要执行这一操作。如果闪存文件系统成功启动，该函数的返回值为布尔型，如果成功启动闪存文件形同，则返回真。否则将返回假。</p><p>程序第36行，<code>File dataFile = SPIFFS.open(file_name, &quot;w&quot;);</code>这条语句中，open函数可用于对SPIFFS进行操作。该函数共有两个参数。第一个参数<code>file_name</code>是被操作的文件名称，本示例中该文件为&#x2F;taichi-maker&#x2F;notes.txt<br>第二个参数<code>&quot;w&quot;</code>代表此操作为向SPIFFS写入文件信息。请注意：如果文件系统没有&#x2F;taichi-maker&#x2F;notes.txt文件，此操作将会在文件系统中建立该文件。如果文件系统有该文件，则程序将会重新建立该文件，即原有文件信息将会被覆盖。</p><p>程序第37行<code>dataFile.println(&quot;Hello IOT World.&quot;);</code>用于向dataFile文件写入信息。信息内容为“Hello IOT World.”。</p><p>程序第38行<code>dataFile.close();</code>用于关闭dataFile文件。结束文件操作后，应执行此操作。</p><h2 id="2、通过程序从闪存文件系统读取信息"><a href="#2、通过程序从闪存文件系统读取信息" class="headerlink" title="2、通过程序从闪存文件系统读取信息"></a>2、通过程序从闪存文件系统读取信息</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********************************************************************</span></span><br><span class="line"><span class="comment">项目名称/Project           : 零基础入门学用物联网</span></span><br><span class="line"><span class="comment">程序名称/Program name      : esp8266-flash-read</span></span><br><span class="line"><span class="comment">团队/Team                 : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">程序目的/Purpose           : 此程序用于演示如何从NodeMCU的内置SPIFFS中存储的文件notes.txt读取数据。</span></span><br><span class="line"><span class="comment">                           notes.txt 文件内容将会通过串口监视器显示出来供用户确认。</span></span><br><span class="line"><span class="comment">                           注意在使用本程序以前需要先将notes.txt 文件上传到NodeMCU开发板的SPIFFS中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">-----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">函数说明：</span></span><br><span class="line"><span class="comment">SPIFFS.open(file_name, &quot;r&quot;); </span></span><br><span class="line"><span class="comment">以上SPIFFS函数有两个参数：</span></span><br><span class="line"><span class="comment">第一个参数是被操作的文件名称，本示例中该文件为/notes.txt</span></span><br><span class="line"><span class="comment">第二个参数&quot;r&quot; 代表读取文件信息。（如需了解如何写入信息，请参阅示例程序esp8266-flash-write）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">***********************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;FS.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line">String file_name = <span class="string">&quot;/taichi-maker/notes.txt&quot;</span>;              <span class="comment">//被读取的文件位置和名称</span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);</span><br><span class="line">  Serial.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(SPIFFS.begin())&#123; <span class="comment">// 启动闪存文件系统</span></span><br><span class="line">    Serial.println(<span class="string">&quot;SPIFFS Started.&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;SPIFFS Failed to Start.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//确认闪存中是否有file_name文件★★★</span></span><br><span class="line">  <span class="keyword">if</span> (SPIFFS.exists(file_name))&#123;</span><br><span class="line">    Serial.print(file_name);</span><br><span class="line">    Serial.println(<span class="string">&quot; FOUND.&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Serial.print(file_name);</span><br><span class="line">    Serial.print(<span class="string">&quot; NOT FOUND.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//建立File对象用于从SPIFFS中读取文件★★★</span></span><br><span class="line">  File dataFile = SPIFFS.open(file_name, <span class="string">&quot;r&quot;</span>); </span><br><span class="line"> </span><br><span class="line">  <span class="comment">//读取文件内容并且通过串口监视器输出文件信息★★★</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;dataFile.size(); i++)&#123;</span><br><span class="line">    Serial.print((<span class="type">char</span>)dataFile.read());       </span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//完成文件读取后关闭文件</span></span><br><span class="line">  dataFile.close();                           </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序第36行，<code>SPIFFS.exists(file_name)</code>用于检查闪存文件系统中有file_name文件（注：file_name变量具体信息在本程序第23行）。该函数返回值为布尔型。如果文件存在则返回真，否则将返回假。</p><p>以上程序第45行，<code>File dataFile = SPIFFS.open(file_name, &quot;r&quot;);</code>这条语句中，open函数可用于对SPIFFS进行操作。该函数共有两个参数。第一个参数<code>file_name</code>是被操作的文件名称，本示例中该文件为&#x2F;taichi-maker&#x2F;notes.txt<br>第二个参数<code>&quot;r&quot;</code>代表此操作为读取文件信息。</p><p>以上程序第48行的for循环语句中，循环条件使用了函数<code>dataFile.size()</code>。该函数将会返回dataFile的大小。循环语句体中，<code>dataFile.read()</code>将会读取dataFile文件内容。每调用一次该含税都会返回dataFile文件中一个字符。再次调用，将会返回下一个字符。以此类推，直到dataFile结尾。通过for循环语句，程序将会依次读取dataFile文件内容，并且将文件内容逐字符输出于串口监视器中。</p><h2 id="3、通过程序向闪存文件系统文件添加信息"><a href="#3、通过程序向闪存文件系统文件添加信息" class="headerlink" title="3、通过程序向闪存文件系统文件添加信息"></a>3、通过程序向闪存文件系统文件添加信息</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********************************************************************</span></span><br><span class="line"><span class="comment">项目名称/Project           : 零基础入门学用物联网</span></span><br><span class="line"><span class="comment">程序名称/Program name      : esp8266-flash-append</span></span><br><span class="line"><span class="comment">团队/Team                 : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">程序目的/Purpose           : 此程序用于演示如何向NodeMCU的内置SPIFFS中存储的文件</span></span><br><span class="line"><span class="comment">                            notes.txt添加数据。                      </span></span><br><span class="line"><span class="comment">-----------------------------------------------------------------------  </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">函数说明：</span></span><br><span class="line"><span class="comment">SPIFFS.open(file_name, &quot;a&quot;); </span></span><br><span class="line"><span class="comment">以上SPIFFS函数有两个参数：</span></span><br><span class="line"><span class="comment">第一个参数是被操作的文件名称，本示例中该文件为/notes.txt</span></span><br><span class="line"><span class="comment">第二个参数&quot;a&quot; 代表添加文件信息。（如需了解如何读取信息，请参阅示例程序esp8266-flash-read）</span></span><br><span class="line"><span class="comment">此示例程序所演示的是向SPIFFS中的文件里添加信息。这一操作写入信息有所区别。</span></span><br><span class="line"><span class="comment">添加信息是不会删除文件内原有信息，而是在原有信息后面添加新的信息。</span></span><br><span class="line"><span class="comment">但写入操作（示例 esp8266-flash-write.ino）是将文件内容完全清除，重新写入新信息。    </span></span><br><span class="line"><span class="comment">***********************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;FS.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line">String file_name = <span class="string">&quot;/taichi-maker/notes.txt&quot;</span>;              <span class="comment">//被读取的文件位置和名称</span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);</span><br><span class="line">  Serial.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(SPIFFS.begin())&#123; <span class="comment">// 启动闪存文件系统</span></span><br><span class="line">    Serial.println(<span class="string">&quot;SPIFFS Started.&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;SPIFFS Failed to Start.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//确认闪存中是否有file_name文件</span></span><br><span class="line">  <span class="keyword">if</span> (SPIFFS.exists(file_name))&#123;</span><br><span class="line">    </span><br><span class="line">    Serial.print(file_name);</span><br><span class="line">    Serial.println(<span class="string">&quot; FOUND.&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    File dataFile = SPIFFS.open(file_name, <span class="string">&quot;a&quot;</span>);<span class="comment">// 建立File对象用于向SPIFFS中的file对象（即/notes.txt）写入信息★★★</span></span><br><span class="line">    dataFile.println(<span class="string">&quot;This is Appended Info.&quot;</span>); <span class="comment">// 向dataFile添加字符串信息★★★</span></span><br><span class="line">    dataFile.close();                           <span class="comment">// 完成文件操作后关闭文件★★★   </span></span><br><span class="line">    Serial.println(<span class="string">&quot;Finished Appending data to SPIFFS&quot;</span>);</span><br><span class="line">    </span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Serial.print(file_name);</span><br><span class="line">    Serial.print(<span class="string">&quot; NOT FOUND.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">                        </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在以上程序的第40行里，<code>File dataFile = SPIFFS.open(file_name, &quot;a&quot;);</code>这条语句中，open函数可用于对SPIFFS进行操作。该函数共有两个参数。第一个参数<code>file_name</code>是被操作的文件名称,第二个参数<code>&quot;a&quot;</code>代表向该文件添加信息。请留意，此处的添加信息是不会删除文件内原有信息，而是在原有信息后面添加新的信息。这与但写入操作是有所区别的。写入操作是将文件内容完全清除，重新写入新信息。<br>,<br>程序的第41行，<code>dataFile.println(&quot;This is Appended Info.&quot;)</code>，此语句作用将会向dataFile文件尾部添加双引号中的信息内容，也就是在文件尾部添加“This is Appended Info.”。</p><h2 id="4、通过程序读取目录内容"><a href="#4、通过程序读取目录内容" class="headerlink" title="4、通过程序读取目录内容"></a>4、通过程序读取目录内容</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********************************************************************</span></span><br><span class="line"><span class="comment">项目名称/Project           : 零基础入门学用物联网</span></span><br><span class="line"><span class="comment">程序名称/Program name      : esp8266-flash-folder-read</span></span><br><span class="line"><span class="comment">团队/Team                 : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">程序目的/Purpose           : 此程序用于演示如何从NodeMCU的内置SPIFFS中文件夹里读取文件信息</span></span><br><span class="line"><span class="comment">                           文件夹内容将会通过串口监视器显示出来。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">-----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">函数说明：</span></span><br><span class="line"><span class="comment">SPIFFS.openDir(folder_name);</span></span><br><span class="line"><span class="comment">以上函数打开指定目录并返回一个目录对象实例。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">***********************************************************************/</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;FS.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line">String file_name = <span class="string">&quot;/taichi-maker/myFile.txt&quot;</span>; <span class="comment">//被读取的文件位置和名称</span></span><br><span class="line">String folder_name = <span class="string">&quot;/taichi-maker&quot;</span>;         <span class="comment">//被读取的文件夹★★★</span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);</span><br><span class="line">  Serial.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(SPIFFS.begin())&#123; <span class="comment">// 启动闪存文件系统</span></span><br><span class="line">    Serial.println(<span class="string">&quot;SPIFFS Started.&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;SPIFFS Failed to Start.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  File dataFile = SPIFFS.open(file_name, <span class="string">&quot;w&quot;</span>);<span class="comment">// 建立File对象用于向SPIFFS中的file对象（即myFile.txt）写入信息</span></span><br><span class="line">  dataFile.println(<span class="string">&quot;Hello Taichi-Maker.&quot;</span>);    <span class="comment">// 向dataFile写入字符串信息</span></span><br><span class="line">  dataFile.close();                           <span class="comment">// 完成文件写入后关闭文件</span></span><br><span class="line">  Serial.println(F(<span class="string">&quot;Finished Writing data to SPIFFS&quot;</span>));</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 显示目录中文件内容以及文件大小</span></span><br><span class="line">  Dir dir = SPIFFS.openDir(folder_name);  <span class="comment">// 建立“目录”对象★★★</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span> (dir.next()) &#123;  <span class="comment">// dir.next()用于检查目录中是否还有“下一个文件”★★★</span></span><br><span class="line">    Serial.println(dir.fileName()); <span class="comment">// 输出文件名★★★</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本程序第23行建立了一个字符串变量。该变量用于存储文件夹名。其中<code>/</code>代表根目录。<code>/taichi-maker/</code>代表根目录下的<code>taichi-maker</code>目录。</p><p>本程序第41行<code>SPIFFS.openDir(folder_name)</code>中的openDir函数函将返回一个“目录”对象并且赋值给dir。此”目录”对象正是folder_name所存储的<code>/taichi-maker/</code>目录。后续程序对dir的所有操作都是针对<code>/taichi-maker/</code>所执行的。</p><p>本程序第43行while循环语句的循环条件是<code>dir.next()</code>的返回值。<code>dir.next()</code>函数用于检查dir文件夹内的文件。我们可以想象dir文件夹里有一个指针，每一次调用next函数都会让指针向下挪动一格。每一次挪动一格，如果下一个位置有文件，则返回真。否则将会返回假。因此，<code>while (dir.next())</code>循环语句中的内容会依次显示dir文件夹中的每一个文件的文件名。</p><h2 id="5、从闪存文件系统中删除文件"><a href="#5、从闪存文件系统中删除文件" class="headerlink" title="5、从闪存文件系统中删除文件"></a>5、从闪存文件系统中删除文件</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********************************************************************</span></span><br><span class="line"><span class="comment">项目名称/Project           : 零基础入门学用物联网</span></span><br><span class="line"><span class="comment">程序名称/Program name      : esp8266-flash-remove</span></span><br><span class="line"><span class="comment">团队/Team                 : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">程序目的/Purpose           : 此程序用于演示如何删除SPIFFS中存储的文件       </span></span><br><span class="line"><span class="comment">***********************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;FS.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line">String file_name = <span class="string">&quot;/taichi-maker/notes.txt&quot;</span>;              <span class="comment">//被读取的文件位置和名称</span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);</span><br><span class="line">  Serial.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(SPIFFS.begin())&#123; <span class="comment">// 启动闪存文件系统</span></span><br><span class="line">    Serial.println(<span class="string">&quot;SPIFFS Started.&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;SPIFFS Failed to Start.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//从闪存中删除file_name文件★★★</span></span><br><span class="line">  <span class="keyword">if</span> (SPIFFS.remove(file_name))&#123;</span><br><span class="line">    </span><br><span class="line">    Serial.print(file_name);</span><br><span class="line">    Serial.println(<span class="string">&quot; remove sucess&quot;</span>);</span><br><span class="line">    </span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Serial.print(file_name);</span><br><span class="line">    Serial.println(<span class="string">&quot; remove fail&quot;</span>);</span><br><span class="line">  &#125;                       </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序中第25行，通过使用<code>SPIFFS.remove(file_name)</code>将<code>file_name</code>所指代的文件进行了删除操作。另外，<code>SPIFFS.remove(file_name)</code>的返回值为布尔型。如果文件删除执行成功则返回真，否则返回假。</p><h2 id="6、显示闪存文件系统信息"><a href="#6、显示闪存文件系统信息" class="headerlink" title="6、显示闪存文件系统信息"></a>6、显示闪存文件系统信息</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********************************************************************</span></span><br><span class="line"><span class="comment">项目名称/Project           : 零基础入门学用物联网</span></span><br><span class="line"><span class="comment">程序名称/Program name      : esp8266-flash-info</span></span><br><span class="line"><span class="comment">团队/Team                 : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">程序目的/Purpose           : 此程序用于演示如何使用FSInfo对象来显示闪存文件系统状态</span></span><br><span class="line"><span class="comment">-----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">***********************************************************************/</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;FS.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line">FSInfo fs_info;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);</span><br><span class="line"> </span><br><span class="line">  SPIFFS.begin();       <span class="comment">//启动SPIFFS</span></span><br><span class="line">  Serial.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  Serial.println(<span class="string">&quot;SPIFFS Started.&quot;</span>);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 闪存文件系统信息</span></span><br><span class="line">  SPIFFS.info(fs_info);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 可用空间总和（单位：字节）</span></span><br><span class="line">  Serial.print(<span class="string">&quot;totalBytes: &quot;</span>);     </span><br><span class="line">  Serial.print(fs_info.totalBytes); </span><br><span class="line">  Serial.println(<span class="string">&quot; Bytes&quot;</span>); </span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 已用空间（单位：字节）</span></span><br><span class="line">  Serial.print(<span class="string">&quot;usedBytes: &quot;</span>); </span><br><span class="line">  Serial.print(fs_info.usedBytes);</span><br><span class="line">  Serial.println(<span class="string">&quot; Bytes&quot;</span>); </span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 最大文件名字符限制（含路径和&#x27;\0&#x27;）</span></span><br><span class="line">  Serial.print(<span class="string">&quot;maxPathLength: &quot;</span>); </span><br><span class="line">  Serial.println(fs_info.maxPathLength);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 最多允许打开文件数量</span></span><br><span class="line">  Serial.print(<span class="string">&quot;maxOpenFiles: &quot;</span>); </span><br><span class="line">  Serial.println(fs_info.maxOpenFiles);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 存储块大小</span></span><br><span class="line">  Serial.print(<span class="string">&quot;blockSize: &quot;</span>); </span><br><span class="line">  Serial.println(fs_info.blockSize);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 存储页大小</span></span><br><span class="line">  Serial.print(<span class="string">&quot;pageSize: &quot;</span>);</span><br><span class="line">  Serial.println(fs_info.pageSize);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序第16行语句<code>FSInfo fs_info;</code>建立了FSInfo 对象，用于存储闪存状态信息。</p><p>以上程序第26行语句<code>SPIFFS.info(fs_info);</code>。通过info函数将闪存状态信息赋给fs_info。后续的程序中，通过一系列语句将闪存状态信息通过串口监视器输出。具体信息内容可参考程序注释部分。</p><p>以上是关于ESP8266闪存文件系统的常用功能介绍。关于ESP8266闪存文件系统的更多操作介绍，请参考Arduino ESP8266官方页面中的介绍部分。该页面可点击以下链接前往。</p><p><a href="https://arduino-esp8266.readthedocs.io/en/latest/filesystem.html">https://arduino-esp8266.readthedocs.io/en/latest/filesystem.html</a></p><h1 id="二、通过Arduino-IDE向闪存文件系统上传文件"><a href="#二、通过Arduino-IDE向闪存文件系统上传文件" class="headerlink" title="二、通过Arduino IDE向闪存文件系统上传文件"></a>二、<a href="http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/upload-files/">通过Arduino IDE向闪存文件系统上传文件</a></h1><h2 id="1、下载-Arduino-ESP8266闪存文件插件程序"><a href="#1、下载-Arduino-ESP8266闪存文件插件程序" class="headerlink" title="1、下载 Arduino-ESP8266闪存文件插件程序"></a>1、下载 Arduino-ESP8266闪存文件插件程序</h2><p>您有两种方法可以下载该插件程序。</p><p><strong>第一种</strong>方法是通过<a href="https://github.com/esp8266/arduino-esp8266fs-plugin/releases">点击此链接进入 Arduino-ESP8266官方GitHub页面下载</a>。详情请见以下截图：</p><p><img src="https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266fs-download.jpg" alt="esp8266fs下载页面"></p><p>由于GitHub网站服务器在国外，有些朋友登录该网站会有些困难。如果是这样的话，那么您也可以<a href="http://www.taichi-maker.com/homepage/download/#esp8266fs">点击此链接进入太极创客网站下载页面去下载该插件</a>。</p><h2 id="2、确定Arduino-IDE项目文件夹位置"><a href="#2、确定Arduino-IDE项目文件夹位置" class="headerlink" title="2、确定Arduino IDE项目文件夹位置"></a>2、确定Arduino IDE项目文件夹位置</h2><p><img src="https://raw.githubusercontent.com/wild-civil/typora_img/main/images/Arduino-ide-preferences.jpg" alt="Arduino-ide-首选项菜单项"></p><p><img src="https://raw.githubusercontent.com/wild-civil/typora_img/main/images/Arduino-Project-Folder.jpg" alt="Arduino-IDE-项目文件夹位置"></p><h2 id="3、通过资源管理器打开Arduino-IDE项目文件夹并建立tools文件夹"><a href="#3、通过资源管理器打开Arduino-IDE项目文件夹并建立tools文件夹" class="headerlink" title="3、通过资源管理器打开Arduino IDE项目文件夹并建立tools文件夹"></a>3、通过资源管理器打开Arduino IDE项目文件夹并建立tools文件夹</h2><p><img src="https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266fs-tools-folder.jpg" alt="在项目文件夹中建立名称为tools的文件夹"></p><h2 id="4、解压缩esp8266fs插件压缩包，并将解压缩后的文件内容粘贴到项目文件夹中"><a href="#4、解压缩esp8266fs插件压缩包，并将解压缩后的文件内容粘贴到项目文件夹中" class="headerlink" title="4、解压缩esp8266fs插件压缩包，并将解压缩后的文件内容粘贴到项目文件夹中"></a>4、解压缩esp8266fs插件压缩包，并将解压缩后的文件内容粘贴到项目文件夹中</h2><p><img src="https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266fs-unzip.jpg" alt="esp8266fs解压缩"></p><p><img src="https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266fs-unzipped.jpg" alt="解压缩后可找到esp8266fs文件夹"></p><p><img src="https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266fs-paste.jpg" alt="将esp8266fs文件夹粘贴到tools文件夹里"></p><h2 id="5、重新启动Arduino-IDE"><a href="#5、重新启动Arduino-IDE" class="headerlink" title="5、重新启动Arduino IDE"></a>5、重新启动Arduino IDE</h2><h2 id="检查“工具”菜单确认插件安装"><a href="#检查“工具”菜单确认插件安装" class="headerlink" title="检查“工具”菜单确认插件安装"></a>检查“工具”菜单确认插件安装</h2><p><img src="https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266-data-upload-menu.jpg" alt="ESP8266 data upload 菜单项"></p><h2 id="6、根据上传的文件总大小来设置闪存大小"><a href="#6、根据上传的文件总大小来设置闪存大小" class="headerlink" title="6、根据上传的文件总大小来设置闪存大小"></a>6、根据上传的文件总大小来设置闪存大小</h2><p><img src="https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266-flash-size-settings.jpg" alt="设置esp8266闪存大小"></p><h2 id="7、将需要上传的文件保存在程序路径下的data文件夹中"><a href="#7、将需要上传的文件保存在程序路径下的data文件夹中" class="headerlink" title="7、将需要上传的文件保存在程序路径下的data文件夹中"></a>7、将需要上传的文件保存在程序路径下的data文件夹中</h2><p><img src="https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266-flash-data-storage.jpg" alt="将需要上传到esp8266闪存文件系统的文件保存在data目录中"></p><h2 id="8、将需要上传的文件保存在程序路径下的data文件夹中"><a href="#8、将需要上传的文件保存在程序路径下的data文件夹中" class="headerlink" title="8、将需要上传的文件保存在程序路径下的data文件夹中"></a>8、将需要上传的文件保存在程序路径下的data文件夹中</h2><p><img src="https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266-flash-data-upload.jpg" alt="通过ESP8266 Sketch Data Upload可以将data文件夹里的文件上传"></p><p>假如您不确定具体文件如何存储，请点击以下链接下载示例程序压缩包。<br><a href="http://www.taichi-maker.com/wp-content/uploads/2020/02/esp8266-data-upload.zip">文件上传示例程序</a></p><h1 id="三、使用闪存文件系统建立功能丰富的网络服务器"><a href="#三、使用闪存文件系统建立功能丰富的网络服务器" class="headerlink" title="三、使用闪存文件系统建立功能丰富的网络服务器"></a>三、<a href="http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-web-server/">使用闪存文件系统建立功能丰富的网络服务器</a></h1><p>掌握了如何向ESP8266开发板的闪存文件上传文件，我们就有了更多的空间来存储更加丰富的网页资源，从而让我们实现功能更加丰富的物联网项目。</p><p>本节教程里，我们将向您介绍一系列ESP8266开发板搭建的网页服务示例。通过这些示例，您可以通过物联网控制ESP8266开发板的引脚以及获取引脚状态。这些示例的功能相对单一，这是因为这些示例的目的是为您提供项目搭建的启发。在后续的教程中里，我们和为您提供一系列完整的物联网项目示例，供您学习参考。</p><ul><li><h2 id="在网页中加载闪存文件系统中的图片、CSS和JavaScript"><a href="#在网页中加载闪存文件系统中的图片、CSS和JavaScript" class="headerlink" title="在网页中加载闪存文件系统中的图片、CSS和JavaScript"></a><a href="http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-web-server/load-imagecsss-javascript/">在网页中加载闪存文件系统中的图片、CSS和JavaScript</a></h2></li><li><h2 id="通过网页控制ESP8266开发板的引脚"><a href="#通过网页控制ESP8266开发板的引脚" class="headerlink" title="通过网页控制ESP8266开发板的引脚"></a><a href="http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-web-server/esp8266-pin-control/">通过网页控制ESP8266开发板的引脚</a></h2></li><li><h2 id="通过网页文本框控制ESP8266开发板的PWM引脚"><a href="#通过网页文本框控制ESP8266开发板的PWM引脚" class="headerlink" title="通过网页文本框控制ESP8266开发板的PWM引脚"></a><a href="http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-web-server/text-pwm-pin-control/">通过网页文本框控制ESP8266开发板的PWM引脚</a></h2></li><li><h2 id="Ajax-控制LED引脚并将A0引脚读数实时显示于网页中"><a href="#Ajax-控制LED引脚并将A0引脚读数实时显示于网页中" class="headerlink" title="(Ajax)控制LED引脚并将A0引脚读数实时显示于网页中"></a><a href="http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-web-server/a0-pin-control/">(Ajax)控制LED引脚并将A0引脚读数实时显示于网页中</a></h2></li><li><h2 id="JavaScript-通过网页图形界面控制ESP8266的PWM引脚"><a href="#JavaScript-通过网页图形界面控制ESP8266的PWM引脚" class="headerlink" title="(JavaScript)通过网页图形界面控制ESP8266的PWM引脚"></a><a href="http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-web-server/javascript-know-pwm-control/">(JavaScript)通过网页图形界面控制ESP8266的PWM引脚</a></h2></li><li><h2 id="JavaScript-使用指针表显示模拟输入引脚数值"><a href="#JavaScript-使用指针表显示模拟输入引脚数值" class="headerlink" title="(JavaScript)使用指针表显示模拟输入引脚数值"></a><a href="http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-web-server/javascript-analog-input-gauge/">(JavaScript)使用指针表显示模拟输入引脚数值</a></h2></li><li><h2 id="通过网页将文件上传到ESP8266开发板闪存文件系统"><a href="#通过网页将文件上传到ESP8266开发板闪存文件系统" class="headerlink" title="通过网页将文件上传到ESP8266开发板闪存文件系统"></a><a href="http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-web-server/file-upload-server/">通过网页将文件上传到ESP8266开发板闪存文件系统</a></h2></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> esp8266 </tag>
            
            <tag> 物联网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学物联网之ESP8266NodeMCU（四）</title>
      <link href="/post/84438cc6.html"/>
      <url>/post/84438cc6.html</url>
      
        <content type="html"><![CDATA[<h1 id="建立基本网络服务器"><a href="#建立基本网络服务器" class="headerlink" title="建立基本网络服务器"></a><a href="http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/esp8266-nodemcu-web-server/web-server/">建立基本网络服务器</a></h1><p>网络服务是一个很宽泛的概念，我们在这里即将给您介绍的是网络服务中的网页服务功能。所谓<strong>网页服务</strong>就是专门用于网页浏览的服务。这个操作我相信所有看到这篇教程的朋友们都使用过，因为您现在正阅读的这篇教程就是通过网页服务传输到您面前的。</p><p>为了能够应付来自全世界的朋友们大量访问，网站服务器是一台运算能力很强的计算机。假如这个网站只有您自己访问，那么ESP8266-NodeMCU就足够了。下面这个示例程序可以让ESP8266-NodeMCU实现最基本的网页服务功能。请先将这段示例程序复制并且上传NodeMCU。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********************************************************************</span></span><br><span class="line"><span class="comment">项目名称/Project          : 零基础入门学用物联网</span></span><br><span class="line"><span class="comment">程序名称/Program name     : 3_2_1_First_Web_Server</span></span><br><span class="line"><span class="comment">团队/Team                : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)</span></span><br><span class="line"><span class="comment">程序目的/Purpose          : 使用NodeMCU建立基本服务器。用户可通过浏览器使用8266的IP地址</span></span><br><span class="line"><span class="comment">                           访问8266所建立的基本网页（Hello from ESP8266）</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">***********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WiFi.h&gt;</span>        <span class="comment">// 本程序使用 ESP8266WiFi库</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WiFiMulti.h&gt;</span>   <span class="comment">//  ESP8266WiFiMulti库</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WebServer.h&gt;</span>   <span class="comment">//  ESP8266WebServer库</span></span></span><br><span class="line"> </span><br><span class="line">ESP8266WiFiMulti wifiMulti;     <span class="comment">// 建立ESP8266WiFiMulti对象,对象名称是&#x27;wifiMulti&#x27;</span></span><br><span class="line"> </span><br><span class="line">ESP8266WebServer <span class="title function_">esp8266_server</span><span class="params">(<span class="number">80</span>)</span>;<span class="comment">// 建立ESP8266WebServer对象，对象名称为esp8266_server</span></span><br><span class="line">                                    <span class="comment">// 括号中的数字是网路服务器响应http请求的端口号</span></span><br><span class="line">                                    <span class="comment">// 网络服务器标准http端口号为80，因此这里使用80为端口号</span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);          <span class="comment">// 启动串口通讯</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">//通过addAp函数存储  WiFi名称       WiFi密码</span></span><br><span class="line">  wifiMulti.addAP(<span class="string">&quot;taichi-maker&quot;</span>, <span class="string">&quot;12345678&quot;</span>);  <span class="comment">// 这三条语句通过调用函数addAP来记录3个不同的WiFi网络信息。</span></span><br><span class="line">  wifiMulti.addAP(<span class="string">&quot;taichi-maker2&quot;</span>, <span class="string">&quot;87654321&quot;</span>); <span class="comment">// 这3个WiFi网络名称分别是taichi-maker, taichi-maker2, taichi-maker3。</span></span><br><span class="line">  wifiMulti.addAP(<span class="string">&quot;taichi-maker3&quot;</span>, <span class="string">&quot;13572468&quot;</span>); <span class="comment">// 这3个网络的密码分别是123456789，87654321，13572468。</span></span><br><span class="line">                                                <span class="comment">// 此处WiFi信息只是示例，请在使用时将需要连接的WiFi信息填入相应位置。</span></span><br><span class="line">                                                <span class="comment">// 另外这里只存储了3个WiFi信息，您可以存储更多的WiFi信息在此处。</span></span><br><span class="line"> </span><br><span class="line">  <span class="type">int</span> i = <span class="number">0</span>;                                 </span><br><span class="line">  <span class="keyword">while</span> (wifiMulti.run() != WL_CONNECTED) &#123;  <span class="comment">// 此处的wifiMulti.run()是重点。通过wifiMulti.run()，NodeMCU将会在当前</span></span><br><span class="line">    delay(<span class="number">1000</span>);                             <span class="comment">// 环境中搜索addAP函数所存储的WiFi。如果搜到多个存储的WiFi那么NodeMCU</span></span><br><span class="line">    Serial.print(i++); Serial.print(<span class="string">&#x27; &#x27;</span>);    <span class="comment">// 将会连接信号最强的那一个WiFi信号。</span></span><br><span class="line">  &#125;                                          <span class="comment">// 一旦连接WiFI成功，wifiMulti.run()将会返回“WL_CONNECTED”。这也是</span></span><br><span class="line">                                             <span class="comment">// 此处while循环判断是否跳出循环的条件。</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">// WiFi连接成功后将通过串口监视器输出连接成功信息 </span></span><br><span class="line">  Serial.println(<span class="string">&#x27;\n&#x27;</span>);                     <span class="comment">// WiFi连接成功后</span></span><br><span class="line">  Serial.print(<span class="string">&quot;Connected to &quot;</span>);            <span class="comment">// NodeMCU将通过串口监视器输出。</span></span><br><span class="line">  Serial.println(WiFi.SSID());              <span class="comment">// 连接的WiFI名称</span></span><br><span class="line">  Serial.print(<span class="string">&quot;IP address:\t&quot;</span>);            <span class="comment">// 以及</span></span><br><span class="line">  Serial.println(WiFi.localIP());           <span class="comment">// NodeMCU的IP地址</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//--------&quot;启动网络服务功能&quot;程序部分开始-------- //  此部分为程序为本示例程序重点1</span></span><br><span class="line">  esp8266_server.begin();                   <span class="comment">//  详细讲解请参见太极创客网站《零基础入门学用物联网》</span></span><br><span class="line">  esp8266_server.on(<span class="string">&quot;/&quot;</span>, handleRoot);       <span class="comment">//  第3章-第2节 ESP8266-NodeMCU网络服务器-1</span></span><br><span class="line">  esp8266_server.onNotFound(handleNotFound);        </span><br><span class="line"><span class="comment">//--------&quot;启动网络服务功能&quot;程序部分结束--------</span></span><br><span class="line">  Serial.println(<span class="string">&quot;HTTP esp8266_server started&quot;</span>);<span class="comment">//  告知用户ESP8266网络服务功能已经启动</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 以下函数语句为本示例程序重点3</span></span><br><span class="line"><span class="comment">详细讲解请参见太极创客网站《零基础入门学用物联网》</span></span><br><span class="line"><span class="comment">第3章-第2节 3_2_1_First_Web_Server 的说明讲解*/</span>  </span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">  esp8266_server.handleClient();     <span class="comment">// 处理http服务器访问</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 以下两个函数为本示例程序重点2</span></span><br><span class="line"><span class="comment">详细讲解请参见太极创客网站《零基础入门学用物联网》</span></span><br><span class="line"><span class="comment">第3章-第2节 3_2_1_First_Web_Server 的说明讲解*/</span>                                                                            </span><br><span class="line"><span class="type">void</span> <span class="title function_">handleRoot</span><span class="params">()</span> &#123;   <span class="comment">//处理网站根目录“/”的访问请求 </span></span><br><span class="line">  esp8266_server.send(<span class="number">200</span>, <span class="string">&quot;text/plain&quot;</span>, <span class="string">&quot;Hello from ESP8266&quot;</span>);   <span class="comment">// NodeMCU将调用此函数。 </span></span><br><span class="line">&#125;<span class="comment">//这个网站只有一个网页。且网页只有一行文字“Hello from ESP8266”。</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 设置处理404情况的函数&#x27;handleNotFound&#x27;</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">handleNotFound</span><span class="params">()</span>&#123;                                        <span class="comment">// 当浏览器请求的网络资源无法在服务器找到时，</span></span><br><span class="line">  esp8266_server.send(<span class="number">404</span>, <span class="string">&quot;text/plain&quot;</span>, <span class="string">&quot;404: Not found&quot;</span>);   <span class="comment">// NodeMCU将调用此函数。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上传给NodeMCU，启动NodeMCU并且确保它已经成功连接WiFi, 打开浏览器，在地址栏中输入NodeMCU的IP地址并按下回车。</p><p>假如将在浏览器中看到“Hello from ESP8266”(如下所示），那么恭喜您已经成功的让NodeMCU实现了网络服务功能，因为您所看到的这条文字信息正是来自于NodeMCU。换句话说，NodeMCU为您建立了一个超级迷你的小网站。</p><p>首先讲解示例程序的第1个重点内容：<strong>”启动网络服务功能“程序部分</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">esp8266_server.begin();             </span><br><span class="line">esp8266_server.on(<span class="string">&quot;/&quot;</span>, handleRoot);      </span><br><span class="line">esp8266_server.onNotFound(handleNotFound); </span><br></pre></td></tr></table></figure><p>程序第一句<code>esp8266_server.begin()</code>使用了ESP8266WebServer库中的<code>begin</code>函数。这个函数的作用是让ESP8266-NodeMCU来启动网络服务功能。该函数无需任何参数。</p><p>接下来的的语句<code>esp8266_server.on(&quot;/&quot;, handleRoot)</code>相对复杂一些。这条语句调用了ESP8266WebServer库中的<code>on</code>函数，该函数的作用是<strong>指挥NodeMCU来如何处理浏览器的http请求</strong>。我们看到<code>on</code>函数一共有两个参数，第一个参数是字符串”&#x2F;”，第二个参数是一个函数的名称handleRoot。这个handleRoot函数的具体内容，我后面会给您做详细讲解。现在请您留意<code>on</code>函数有两个参数，一个是字符串”&#x2F;”，另一个是函数名handleRoot。</p><p>下面我来给您仔细解释一下参数”&#x2F;”的作用。我们知道一个网站有很多页面。为了加以区分，这些页面都有各自的名称。对于刚刚您在浏览器看到的“Hello from ESP8266”这个页面是NodeMCU服务器中的网站首页。这个网站首页的名称正是”&#x2F;”。目前的ESP8266-NodeMCU服务器中只有一页，因此我们还无法了解如果想要调用其他页面该如何操作。不过请别担心，这个操作我们会在下一个示例程序中为您讲解。</p><p>好了，现在请将您的思绪拉回到我们的NodeMCU程序中来。接下来我们来看<code>on</code>函数的第二个参数。这个参数是<code>handleRoot</code>函数的名字。<code>handlRoot</code>函数的主要作用是告诉NodeMCU该如何生成和发送网站首页给浏览器。不过关于这个<code>handleRoot</code>函数的具体内容，我会在接下来的教程中给您做详细讲解。现在我们需要把关注点集中在<code>on</code>函数上。</p><p>最后我们再来完整的看一下这条语句<code>esp8266_server.on(&quot;/&quot;, handleRoot)</code>。它的作用就是告诉NodeMCU，当有浏览器请求网站首页时，请执行handlRoot函数来生成网站首页内容然后发送给浏览器。</p><p>讲到这里不知道您会不会感到好奇。我们只是在浏览器地址栏输入了NodeMCU的IP地址，然后就按下了回车。浏览器怎么会知道我们需要的是网站的首页呢。这是浏览器约定俗成的一种操作方法。当我们在地址栏只输入IP地址而没有任何附加地址信息，浏览器就会知道我们是要获取一个网站的首页信息。</p><p>结束了<code>on</code>函数的讲解，我们来继续往下看。下面一条语句<code>esp8266_server.onNotFound(handleNotFound)</code>使用了<code>onNotFound</code>函数。它的作用是<strong>指挥NodeMCU在收到无法满足的http请求时应该如何处理</strong>。目前Hello from ESP8266网站只有一个页面。假如有人想要浏览网站的其它页面，NodeMCU是无法满足这一请求的。这时候我们可以让NodeMCU答复一个“错误提示”页面给提出请求的浏览器。<code>onNotFound</code>函数就是用来告诉NodeMCU如果出现无法满足的http请求时该如何进行处理。<code>onNotFound</code>函数有一个参数，这个参数的内容是函数<code>handleNotFound</code>的名字。  </p><p>假设现在我们通过浏览器向NodeMCU服务器请求一个名叫“LED”的页面。由于NodeMCU的程序里没有“LED”页面信息，因此需要给浏览器答复一个“错误提示”页面。<code>onNotFound</code>的作用就是告诉NodeMCU在遇到这种无法满足的http请求时，应该执行<code>handleNotFound</code>函数来生成并发送“错误提示”页面给浏览器。</p><p>为了验证这一功能，我们来做一个实验。请在浏览器中输入NodMCU的IP地址然后加一个“&#x2F;LED”再回车。比如下图所示，我的NodeMCU的IP地址是192.168.0.109，那么当我在浏览器栏中输入<code>192.168.0.109/LED</code>然后回车，就会看到浏览器显示出文字404: Not found。</p><p>这里我们所看到的这行文字“404: Not found”正是因为NodeMCU没有名叫“LED”的页面，因此它会使用handleNotFound函数生成并发送给浏览器这个“错误提示”页面。既然讲到这里了，那么我们就来仔细看一看handleNotFound函数的具体内容。  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">handleNotFound</span><span class="params">()</span>&#123;                                </span><br><span class="line">  esp8266_server.send(<span class="number">404</span>, <span class="string">&quot;text/plain&quot;</span>, <span class="string">&quot;404: Not found&quot;</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>handleNotFound函数只有一条语句： <code>esp8266_server.send(404, &quot;text/plain&quot;, &quot;404: Not found&quot;)</code>。这条语句调用了ESP8266WebServer库中的<code>send</code>函数。该函数的作用是生成并且发送http响应信息。也就是说，电脑浏览器所收到的网页信息都是通过<code>send</code>函数生成并且发送的。那么具体这个网页信息是如何生成的呢？这就要仔细看看<code>send</code>函数的几个参数内容了。  </p><p>首先我们来看第一个参数404。这个数字对于很多朋友来说都不会感到陌生，在<a href="http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/internet-basics/application-layer/#http-response">互联网基础-应用层</a>的http响应部分对它做过介绍。404是一个服务器状态码。它的含义是“客户端的请求有错误”。也就是说，浏览器在收到了状态码404后就知道，它所请求的页面在服务器上是不存在的。请留意，这个服务器状态码是专门给浏览器用的。我们是看不到它的。为了让我们也看到页面不存在的出错信息，<code>send</code>函数的最后一个参数使用了一个字符串”404: Not found”。这个字符串的内容才是真正显示在浏览器中供我们阅读的内容。你可以任意的改变这个字符串的内容。  </p><p>到这里我们来小结一下。浏览器能够看懂的信息是send函数的第一个参数,它的类型是整数型，它的内容是数字404。而显示在浏览器中的出错信息是一个字符串型的参数。它是send函数的最后一个参数。在我们的示例程序里，它的内容是“404: Not found”。</p><p><code>send</code>函数还有一个字符串参数“text&#x2F;plain”。它的作用是<strong>说明http响应体的信息类型</strong>。在这段示例中，我们用“text&#x2F;plain”的原因是要告诉浏览器后面的”404: Not found”为一段纯文本信息。这里当然也可以使用其它类型的信息。不过这一知识我们后续教程中会给您介绍。</p><p>为了让您更好的理解刚刚给您解释的内容，我来对这句<code>esp8266_server.send(404, &quot;text/plain&quot;, &quot;404: Not found&quot;)</code>做一下总结。</p><p>send函数一共有3个参数。第一个参数404是服务器状态码。第二个参数“text&#x2F;plain”是说明http响应体信息类型。第三个参数“404: Not found”则是响应体的具体信息了。</p><p>细心的读者可能已经发现了。我在上面这段总结文字中指明了响应体这一概念。http响应是分为两部分的。第一部分是响应头，在我们这个示例中，响应头的内容就是404 text&#x2F;plain。而响应体的内容则是404: Not found。</p><p>结束了handleNotFound的讲解我们最后再来看看示例程序中另一个用于生成和发送首页信息的函数：<code>handleRoot</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">handleRoot</span><span class="params">()</span> &#123;                         </span><br><span class="line">    esp8266_server.send(<span class="number">200</span>, <span class="string">&quot;text/plain&quot;</span>, <span class="string">&quot;Hello from ESP8266&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段示例程序与刚刚我们见到的handleNotFound函数非常相似。都是使用<code>send</code>函数生成并且发送http响应信息。</p><p><code>send</code>函数的第一个参数200，它同样是一个服务器状态码，含义是“成功接收请求，并已完成整个处理过程”。 第二个参数text&#x2F;plain的作用我刚刚给您讲过，不再赘述了。最后一个参数”Hello from ESP8266″正是我们在浏览器中看到的首页文字内容。</p><p>最后我们来看一下这段示例程序的第3个重点内容，也就是loop函数中唯一的一条语句<code>esp8266_server.handleClient()</code>。这句程序调用了<code>handleClient</code>函数。它的主要作用之一是检查有没有设备通过网络向NodeMCU发送请求。<code>函数handleClient</code>每次被调用时，NodeMCU都会检查一下是否有人发送http请求。因此我们需要把它放在loop函数中，从而确保它能经常被调用。假如我们的loop函数里有类似delay一类的函数延迟程序运行，那么这时候就一定要注意了。如果<code>handleClient</code>函数长时间得不到调用，NodeMCU的网络服务会变得很不稳定。因此在使用NodeMCU执行网络服务功能的时候，一定要确保<code>handleClient</code>函数经常得以调用。我在这里反复强调这一点是因为这一点非常关键，请务必注意！</p><p>这一节的程序内容到这里就讲解完毕了，下一节教程我将为您讲解如何建立可以控制NodeMCU开发板的网页。</p><h1 id="通过网络服务实现NodeMCU开发板基本控制"><a href="#通过网络服务实现NodeMCU开发板基本控制" class="headerlink" title="通过网络服务实现NodeMCU开发板基本控制"></a><a href="http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/esp8266-nodemcu-web-server/pin-control/">通过网络服务实现NodeMCU开发板基本控制</a></h1><p>利用NodeMCU建立网络服务</p><p>用户通过浏览器可以访问NodeMCU所建立的网页</p><p>通过该网页，用户可实现对NodeMCU的控制。</p><p>以下是示例代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********************************************************************</span></span><br><span class="line"><span class="comment">项目名称/Project          : 零基础入门学用物联网</span></span><br><span class="line"><span class="comment">程序名称/Program name     : 3_2_2_Turning_on_and_off_an_LED</span></span><br><span class="line"><span class="comment">团队/Team                : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)</span></span><br><span class="line"><span class="comment">程序目的/Purpose          : 使用NodeMCU建立基本服务器。用户可通过浏览器使用8266的IP地址</span></span><br><span class="line"><span class="comment">                           访问8266所建立的基本网页并通过该页面点亮/熄灭NodeMCU的内置LED</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">***********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WiFi.h&gt;</span>        <span class="comment">// 本程序使用 ESP8266WiFi库</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WiFiMulti.h&gt;</span>   <span class="comment">//  ESP8266WiFiMulti库</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WebServer.h&gt;</span>   <span class="comment">//  ESP8266WebServer库</span></span></span><br><span class="line"> </span><br><span class="line">ESP8266WiFiMulti wifiMulti;     <span class="comment">// 建立ESP8266WiFiMulti对象,对象名称是 &#x27;wifiMulti&#x27;</span></span><br><span class="line"> </span><br><span class="line">ESP8266WebServer <span class="title function_">esp8266_server</span><span class="params">(<span class="number">80</span>)</span>;<span class="comment">// 建立网络服务器对象，该对象用于响应HTTP请求。监听端口（80）</span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);   <span class="comment">// 启动串口通讯</span></span><br><span class="line"> </span><br><span class="line">  pinMode(LED_BUILTIN, OUTPUT); <span class="comment">//设置内置LED引脚为输出模式以便控制LED</span></span><br><span class="line">  </span><br><span class="line">  wifiMulti.addAP(<span class="string">&quot;ssid_from_AP_1&quot;</span>, <span class="string">&quot;your_password_for_AP_1&quot;</span>); <span class="comment">// 将需要连接的一系列WiFi ID和密码输入这里</span></span><br><span class="line">  wifiMulti.addAP(<span class="string">&quot;ssid_from_AP_2&quot;</span>, <span class="string">&quot;your_password_for_AP_2&quot;</span>); <span class="comment">// ESP8266-NodeMCU再启动后会扫描当前网络</span></span><br><span class="line">  wifiMulti.addAP(<span class="string">&quot;ssid_from_AP_3&quot;</span>, <span class="string">&quot;your_password_for_AP_3&quot;</span>); <span class="comment">// 环境查找是否有这里列出的WiFi ID。如果有</span></span><br><span class="line">  Serial.println(<span class="string">&quot;Connecting ...&quot;</span>);                            <span class="comment">// 则尝试使用此处存储的密码进行连接。</span></span><br><span class="line">  </span><br><span class="line">  <span class="type">int</span> i = <span class="number">0</span>;                                 </span><br><span class="line">  <span class="keyword">while</span> (wifiMulti.run() != WL_CONNECTED) &#123;  <span class="comment">// 此处的wifiMulti.run()是重点。通过wifiMulti.run()，NodeMCU将会在当前</span></span><br><span class="line">    delay(<span class="number">1000</span>);                             <span class="comment">// 环境中搜索addAP函数所存储的WiFi。如果搜到多个存储的WiFi那么NodeMCU</span></span><br><span class="line">    Serial.print(i++); Serial.print(<span class="string">&#x27; &#x27;</span>);    <span class="comment">// 将会连接信号最强的那一个WiFi信号。</span></span><br><span class="line">  &#125;                                          <span class="comment">// 一旦连接WiFI成功，wifiMulti.run()将会返回“WL_CONNECTED”。这也是</span></span><br><span class="line">                                             <span class="comment">// 此处while循环判断是否跳出循环的条件。</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// WiFi连接成功后将通过串口监视器输出连接成功信息 </span></span><br><span class="line">  Serial.println(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">  Serial.print(<span class="string">&quot;Connected to &quot;</span>);</span><br><span class="line">  Serial.println(WiFi.SSID());              <span class="comment">// 通过串口监视器输出连接的WiFi名称</span></span><br><span class="line">  Serial.print(<span class="string">&quot;IP address:\t&quot;</span>);</span><br><span class="line">  Serial.println(WiFi.localIP());           <span class="comment">// 通过串口监视器输出ESP8266-NodeMCU的IP</span></span><br><span class="line"> </span><br><span class="line">  esp8266_server.begin();                           <span class="comment">// 启动网站服务</span></span><br><span class="line">  esp8266_server.on(<span class="string">&quot;/&quot;</span>, HTTP_GET, handleRoot);     <span class="comment">// 设置服务器根目录即&#x27;/&#x27;的函数&#x27;handleRoot&#x27;</span></span><br><span class="line">  esp8266_server.on(<span class="string">&quot;/LED&quot;</span>, HTTP_POST, handleLED);  <span class="comment">// 设置处理LED控制请求的函数&#x27;handleLED&#x27;</span></span><br><span class="line">  esp8266_server.onNotFound(handleNotFound);        <span class="comment">// 设置处理404情况的函数&#x27;handleNotFound&#x27;</span></span><br><span class="line"> </span><br><span class="line">  Serial.println(<span class="string">&quot;HTTP esp8266_server started&quot;</span>);<span class="comment">//  告知用户ESP8266网络服务功能已经启动</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">  esp8266_server.handleClient();                     <span class="comment">// 检查http服务器访问</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*设置服务器根目录即&#x27;/&#x27;的函数&#x27;handleRoot&#x27;</span></span><br><span class="line"><span class="comment">  该函数的作用是每当有客户端访问NodeMCU服务器根目录时，</span></span><br><span class="line"><span class="comment">  NodeMCU都会向访问设备发送 HTTP 状态 200 (Ok) 这是send函数的第一个参数。</span></span><br><span class="line"><span class="comment">  同时NodeMCU还会向浏览器发送HTML代码，以下示例中send函数中第三个参数，</span></span><br><span class="line"><span class="comment">  也就是双引号中的内容就是NodeMCU发送的HTML代码。该代码可在网页中产生LED控制按钮。 </span></span><br><span class="line"><span class="comment">  当用户按下按钮时，浏览器将会向NodeMCU的/LED页面发送HTTP请求，请求方式为POST。</span></span><br><span class="line"><span class="comment">  NodeMCU接收到此请求后将会执行handleLED函数内容*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">handleRoot</span><span class="params">()</span> &#123;       </span><br><span class="line">  esp8266_server.send(<span class="number">200</span>, <span class="string">&quot;text/html&quot;</span>, <span class="string">&quot;&lt;form action=\&quot;/LED\&quot; method=\&quot;POST\&quot;&gt;&lt;input type=\&quot;submit\&quot; value=\&quot;Toggle LED\&quot;&gt;&lt;/form&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//处理LED控制请求的函数&#x27;handleLED&#x27;</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">handleLED</span><span class="params">()</span> &#123;                          </span><br><span class="line">  digitalWrite(LED_BUILTIN,!digitalRead(LED_BUILTIN));<span class="comment">// 改变LED的点亮或者熄灭状态</span></span><br><span class="line">  esp8266_server.sendHeader(<span class="string">&quot;Location&quot;</span>,<span class="string">&quot;/&quot;</span>);          <span class="comment">// 跳转回页面根目录</span></span><br><span class="line">  esp8266_server.send(<span class="number">303</span>);                           <span class="comment">// 发送Http相应代码303 跳转  </span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 设置处理404情况的函数&#x27;handleNotFound&#x27;</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">handleNotFound</span><span class="params">()</span>&#123;</span><br><span class="line">  esp8266_server.send(<span class="number">404</span>, <span class="string">&quot;text/plain&quot;</span>, <span class="string">&quot;404: Not found&quot;</span>); <span class="comment">// 发送 HTTP 状态 404 (未找到页面) 并向浏览器发送文字 &quot;404: Not found&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="通过网络服务将开发板引脚状态显示在网页中"><a href="#通过网络服务将开发板引脚状态显示在网页中" class="headerlink" title="通过网络服务将开发板引脚状态显示在网页中"></a><a href="http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/esp8266-nodemcu-web-server/pin-state/">通过网络服务将开发板引脚状态显示在网页中</a></h1><p>为了便于学习，我们将使用D3引脚作为演示, 因为它已经与开发板上的FLASH按键开关连接好了。<em>我们可以通过NodeMCU开发板上的FLASH按键控制D3引脚的电平。</em></p><p><img src="https://raw.githubusercontent.com/wild-civil/typora_img/main/backgrounds/esp8266-nodemcu-Flash-Button-1.jpg" alt="NodeMCU开发板FLASH按键开关"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********************************************************************</span></span><br><span class="line"><span class="comment">项目名称/Project          : 零基础入门学用物联网</span></span><br><span class="line"><span class="comment">程序名称/Program name     : 3_2_3_Pin_State_Display</span></span><br><span class="line"><span class="comment">团队/Team                : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">程序目的/Purpose          : 使用NodeMCU建立基本服务器。该页面将会自动刷新并且显示NodeMCU</span></span><br><span class="line"><span class="comment">                           的D3引脚状态。NodeMCU开发板上的FLASH按键可以控制D3引脚的电平。</span></span><br><span class="line"><span class="comment">                           没有按下该按键时D3引脚将会保持高电平状态。当按下该按键后，</span></span><br><span class="line"><span class="comment">                           D3引脚会变为低电平。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">***********************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WiFi.h&gt;</span>        <span class="comment">// 本程序使用 ESP8266WiFi库</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WiFiMulti.h&gt;</span>   <span class="comment">//  ESP8266WiFiMulti库</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WebServer.h&gt;</span>   <span class="comment">//  ESP8266WebServer库</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> buttonPin D3            <span class="comment">// 按钮引脚D3</span></span></span><br><span class="line"> </span><br><span class="line">ESP8266WiFiMulti wifiMulti;     <span class="comment">// 建立ESP8266WiFiMulti对象,对象名称是&#x27;wifiMulti&#x27;</span></span><br><span class="line"> </span><br><span class="line">ESP8266WebServer <span class="title function_">esp8266_server</span><span class="params">(<span class="number">80</span>)</span>;<span class="comment">// 建立网络服务器对象，该对象用于响应HTTP请求。监听端口（80）</span></span><br><span class="line"> </span><br><span class="line"><span class="type">bool</span> pinState;  <span class="comment">// 存储引脚状态用变量</span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);   <span class="comment">// 启动串口通讯</span></span><br><span class="line"> </span><br><span class="line">  pinMode(buttonPin, INPUT_PULLUP); <span class="comment">// 将按键引脚设置为输入上拉模式</span></span><br><span class="line"> </span><br><span class="line">  wifiMulti.addAP(<span class="string">&quot;ssid_from_AP_1&quot;</span>, <span class="string">&quot;your_password_for_AP_1&quot;</span>); <span class="comment">// 将需要连接的一系列WiFi ID和密码输入这里</span></span><br><span class="line">  wifiMulti.addAP(<span class="string">&quot;ssid_from_AP_2&quot;</span>, <span class="string">&quot;your_password_for_AP_2&quot;</span>); <span class="comment">// ESP8266-NodeMCU再启动后会扫描当前网络</span></span><br><span class="line">  wifiMulti.addAP(<span class="string">&quot;ssid_from_AP_3&quot;</span>, <span class="string">&quot;your_password_for_AP_3&quot;</span>); <span class="comment">// 环境查找是否有这里列出的WiFi ID。如果有</span></span><br><span class="line">  Serial.println(<span class="string">&quot;Connecting ...&quot;</span>);                            <span class="comment">// 则尝试使用此处存储的密码进行连接。</span></span><br><span class="line">  </span><br><span class="line">  <span class="type">int</span> i = <span class="number">0</span>;                                 </span><br><span class="line">  <span class="keyword">while</span> (wifiMulti.run() != WL_CONNECTED) &#123;  <span class="comment">// 此处的wifiMulti.run()是重点。通过wifiMulti.run()，NodeMCU将会在当前</span></span><br><span class="line">    delay(<span class="number">1000</span>);                             <span class="comment">// 环境中搜索addAP函数所存储的WiFi。如果搜到多个存储的WiFi那么NodeMCU</span></span><br><span class="line">    Serial.print(i++); Serial.print(<span class="string">&#x27; &#x27;</span>);    <span class="comment">// 将会连接信号最强的那一个WiFi信号。</span></span><br><span class="line">  &#125;                                          <span class="comment">// 一旦连接WiFI成功，wifiMulti.run()将会返回“WL_CONNECTED”。这也是</span></span><br><span class="line">                                             <span class="comment">// 此处while循环判断是否跳出循环的条件。</span></span><br><span class="line">  <span class="comment">// WiFi连接成功后将通过串口监视器输出连接成功信息 </span></span><br><span class="line">  Serial.println(<span class="string">&#x27;\n&#x27;</span>);                     <span class="comment">// WiFi连接成功后</span></span><br><span class="line">  Serial.print(<span class="string">&quot;Connected to &quot;</span>);            <span class="comment">// NodeMCU将通过串口监视器输出。</span></span><br><span class="line">  Serial.println(WiFi.SSID());              <span class="comment">// 连接的WiFI名称</span></span><br><span class="line">  Serial.print(<span class="string">&quot;IP address:\t&quot;</span>);            <span class="comment">// 以及</span></span><br><span class="line">  Serial.println(WiFi.localIP());           <span class="comment">// NodeMCU的IP地址</span></span><br><span class="line">  </span><br><span class="line">  esp8266_server.begin();                   <span class="comment">// 启动网站服务                </span></span><br><span class="line">  esp8266_server.on(<span class="string">&quot;/&quot;</span>, handleRoot);       <span class="comment">// 设置服务器根目录即&#x27;/&#x27;的函数&#x27;handleRoot&#x27;</span></span><br><span class="line">  esp8266_server.onNotFound(handleNotFound);<span class="comment">// 设置处理404情况的函数&#x27;handleNotFound&#x27;        </span></span><br><span class="line"> </span><br><span class="line">  Serial.println(<span class="string">&quot;HTTP esp8266_server started&quot;</span>);<span class="comment">//  告知用户ESP8266网络服务功能已经启动</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span>&#123;</span><br><span class="line">  esp8266_server.handleClient();     <span class="comment">// 处理http服务器访问</span></span><br><span class="line">  pinState = digitalRead(buttonPin); <span class="comment">// 获取引脚状态</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//--------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">/* 以下函数处理网站首页的访问请求。此函数为本示例程序重点1</span></span><br><span class="line"><span class="comment">详细讲解请参见太极创客网站《零基础入门学用物联网》</span></span><br><span class="line"><span class="comment">第3章-第2节“通过网络服务将开发板引脚状态显示在网页中”的说明讲解。*/</span>                                                                       </span><br><span class="line"><span class="type">void</span> <span class="title function_">handleRoot</span><span class="params">()</span> &#123;   </span><br><span class="line">  String displayPinState;                   <span class="comment">// 存储按键状态的字符串变量</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(pinState == HIGH)&#123;                     <span class="comment">// 当按键引脚D3为高电平</span></span><br><span class="line">    displayPinState = <span class="string">&quot;Button State: HIGH&quot;</span>; <span class="comment">// 字符串赋值高电平信息</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;                                  <span class="comment">// 当按键引脚D3为低电平</span></span><br><span class="line">    displayPinState = <span class="string">&quot;Button State: LOW&quot;</span>;  <span class="comment">// 字符串赋值低电平信息</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  esp8266_server.send(<span class="number">200</span>, <span class="string">&quot;text/plain&quot;</span>, displayPinState); </span><br><span class="line">                                            <span class="comment">// 向浏览器发送按键状态信息  </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//--------------------------------------------------------------------------------</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 设置处理404情况的函数&#x27;handleNotFound&#x27;</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">handleNotFound</span><span class="params">()</span>&#123;                                        <span class="comment">// 当浏览器请求的网络资源无法在服务器找到时，</span></span><br><span class="line">  esp8266_server.send(<span class="number">404</span>, <span class="string">&quot;text/plain&quot;</span>, <span class="string">&quot;404: Not found&quot;</span>);   <span class="comment">// NodeMCU将调用此函数。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在以上程序的loop函数中，<code>pinState = digitalRead(buttonPin);</code> 语句将不断检查NodeMCU开发板D3引脚状态，也就是检查该引脚所连接的按键是否被按下。该状态将会存储与布尔变量pinState中。</p><p>变量pinState将会用于本程序的重点1，也就是handleRoot() 函数里。在handleRoot函数里，我们利用逻辑判断语句来对displayPinState 进行赋值。<strong>如果按键没有被按下</strong>，pinState为HIGH，这时候程序将会执行<code>displayPinState = &quot;Button State: HIGH&quot;;</code>也就是为displayPinState的赋值为“Button State: HIGH”。这句话的意思是“按键引脚状态为高电平”。反之，当我们按下按键后，程序将会执行<code>displayPinState = &quot;Button State: LOW&quot;;</code>也就是为displayPinState的赋值为“Button State: LOW”。</p><p>在handleRoot函数的结尾处，<br><code>esp8266_server.send(200, &quot;text/plain&quot;, displayPinState);</code><br>这条语句将会把displayPinState所存储的信息发送给浏览器。于是我们在没有按下按键时，将会得到以下页面信息。</p><h1 id="暂时没放图"><a href="#暂时没放图" class="headerlink" title="暂时没放图"></a><strong>暂时没放图</strong></h1><p>以上示例中，我们需要刷新网页页面才能将按键的最新状态显示在网页中。为了实现页面的自动刷新，请您参考以下示例程序。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********************************************************************</span></span><br><span class="line"><span class="comment">项目名称/Project          : 零基础入门学用物联网</span></span><br><span class="line"><span class="comment">程序名称/Program name     : 3_2_4_Pin_State_Display_Auto_Refresh</span></span><br><span class="line"><span class="comment">团队/Team                : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">程序目的/Purpose          : 使用NodeMCU建立基本服务器。该网页将显示引脚D3状态。同时状态会</span></span><br><span class="line"><span class="comment">                           每隔5秒钟更新一次。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">***********************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WiFi.h&gt;</span>        <span class="comment">// 本程序使用 ESP8266WiFi库</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WiFiMulti.h&gt;</span>   <span class="comment">//  ESP8266WiFiMulti库</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WebServer.h&gt;</span>   <span class="comment">//  ESP8266WebServer库</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> buttonPin D3            <span class="comment">// 按钮引脚D3</span></span></span><br><span class="line"> </span><br><span class="line">ESP8266WiFiMulti wifiMulti;     <span class="comment">// 建立ESP8266WiFiMulti对象,对象名称是&#x27;wifiMulti&#x27;</span></span><br><span class="line"> </span><br><span class="line">ESP8266WebServer <span class="title function_">esp8266_server</span><span class="params">(<span class="number">80</span>)</span>;<span class="comment">// 建立网络服务器对象，该对象用于响应HTTP请求。监听端口（80）</span></span><br><span class="line"> </span><br><span class="line"><span class="type">bool</span> pinState;                      <span class="comment">// 存储引脚状态用变量</span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);          <span class="comment">// 启动串口通讯</span></span><br><span class="line">  delay(<span class="number">10</span>);</span><br><span class="line">  Serial.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line"> </span><br><span class="line">  pinMode(buttonPin, INPUT_PULLUP); <span class="comment">// 将按键引脚设置为输入上拉模式</span></span><br><span class="line"> </span><br><span class="line">  wifiMulti.addAP(<span class="string">&quot;ssid_from_AP_1&quot;</span>, <span class="string">&quot;your_password_for_AP_1&quot;</span>); <span class="comment">// 将需要连接的一系列WiFi ID和密码输入这里</span></span><br><span class="line">  wifiMulti.addAP(<span class="string">&quot;ssid_from_AP_2&quot;</span>, <span class="string">&quot;your_password_for_AP_2&quot;</span>); <span class="comment">// ESP8266-NodeMCU在启动后会扫描当前网络</span></span><br><span class="line">  wifiMulti.addAP(<span class="string">&quot;ssid_from_AP_3&quot;</span>, <span class="string">&quot;your_password_for_AP_3&quot;</span>); <span class="comment">// 环境查找是否有这里列出的WiFi ID。如果有</span></span><br><span class="line">  Serial.println(<span class="string">&quot;Connecting ...&quot;</span>);                            <span class="comment">// 则尝试使用此处存储的密码进行连接。</span></span><br><span class="line">                                                               <span class="comment">// 另外这里只存储了3个WiFi信息，您可以存储更多</span></span><br><span class="line">                                                               <span class="comment">// 的WiFi信息在此处。</span></span><br><span class="line">  <span class="type">int</span> i = <span class="number">0</span>;                                 </span><br><span class="line">  <span class="keyword">while</span> (wifiMulti.run() != WL_CONNECTED) &#123;  <span class="comment">// 此处的wifiMulti.run()是重点。通过wifiMulti.run()，NodeMCU将会在当前</span></span><br><span class="line">    delay(<span class="number">1000</span>);                             <span class="comment">// 环境中搜索addAP函数所存储的WiFi。如果搜到多个存储的WiFi那么NodeMCU</span></span><br><span class="line">    Serial.print(i++); Serial.print(<span class="string">&#x27; &#x27;</span>);    <span class="comment">// 将会连接信号最强的那一个WiFi信号。</span></span><br><span class="line">  &#125;                                          <span class="comment">// 一旦连接WiFI成功，wifiMulti.run()将会返回“WL_CONNECTED”。这也是</span></span><br><span class="line">                                             <span class="comment">// 此处while循环判断是否跳出循环的条件。</span></span><br><span class="line">  <span class="comment">// WiFi连接成功后将通过串口监视器输出连接成功信息 </span></span><br><span class="line">  Serial.println(<span class="string">&#x27;\n&#x27;</span>);                     <span class="comment">// WiFi连接成功后</span></span><br><span class="line">  Serial.print(<span class="string">&quot;Connected to &quot;</span>);            <span class="comment">// NodeMCU将通过串口监视器输出。</span></span><br><span class="line">  Serial.println(WiFi.SSID());              <span class="comment">// 连接的WiFI名称</span></span><br><span class="line">  Serial.print(<span class="string">&quot;IP address:\t&quot;</span>);            <span class="comment">// 以及</span></span><br><span class="line">  Serial.println(WiFi.localIP());           <span class="comment">// NodeMCU的IP地址</span></span><br><span class="line">  </span><br><span class="line">  esp8266_server.begin();                  </span><br><span class="line">  esp8266_server.on(<span class="string">&quot;/&quot;</span>, handleRoot);      </span><br><span class="line">  esp8266_server.onNotFound(handleNotFound);        </span><br><span class="line"> </span><br><span class="line">  Serial.println(<span class="string">&quot;HTTP esp8266_server started&quot;</span>);<span class="comment">//  告知用户ESP8266网络服务功能已经启动</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span>&#123;</span><br><span class="line">  esp8266_server.handleClient();     <span class="comment">// 处理http服务器访问</span></span><br><span class="line">  pinState = digitalRead(buttonPin); <span class="comment">// 获取引脚状态</span></span><br><span class="line">&#125;                                                                   </span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 以下函数处理网站首页的访问请求。此函数为本示例程序重点1</span></span><br><span class="line"><span class="comment">详细讲解请参见太极创客网站《零基础入门学用物联网》</span></span><br><span class="line"><span class="comment">第3章-第2节“通过网络服务将开发板引脚状态显示在网页中”的说明讲解。*/</span>    </span><br><span class="line"><span class="type">void</span> <span class="title function_">handleRoot</span><span class="params">()</span> &#123;   <span class="comment">//处理网站目录“/”的访问请求 </span></span><br><span class="line">  esp8266_server.send(<span class="number">200</span>, <span class="string">&quot;text/html&quot;</span>, sendHTML(pinState));  </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//--------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">建立用于发送给客户端浏览器的HTML代码。此代码将会每隔5秒刷新页面。</span></span><br><span class="line"><span class="comment">通过页面刷新，引脚的最新状态也会显示于页面中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">String <span class="title function_">sendHTML</span><span class="params">(<span class="type">bool</span> buttonState)</span>&#123;</span><br><span class="line">  </span><br><span class="line">  String htmlCode = <span class="string">&quot;&lt;!DOCTYPE html&gt; &lt;html&gt;\n&quot;</span>;</span><br><span class="line">  htmlCode +=<span class="string">&quot;&lt;head&gt;&lt;meta http-equiv=&#x27;refresh&#x27; content=&#x27;5&#x27;/&gt;\n&quot;</span>;</span><br><span class="line">  htmlCode +=<span class="string">&quot;&lt;title&gt;ESP8266 Butoon State&lt;/title&gt;\n&quot;</span>;</span><br><span class="line">  htmlCode +=<span class="string">&quot;&lt;style&gt;html &#123; font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;&#125;\n&quot;</span>;</span><br><span class="line">  htmlCode +=<span class="string">&quot;body&#123;margin-top: 50px;&#125; h1 &#123;color: #444444;margin: 50px auto 30px;&#125; h3 &#123;color: #444444;margin-bottom: 50px;&#125;\n&quot;</span>;</span><br><span class="line">  htmlCode +=<span class="string">&quot;&lt;/style&gt;\n&quot;</span>;</span><br><span class="line">  htmlCode +=<span class="string">&quot;&lt;/head&gt;\n&quot;</span>;</span><br><span class="line">  htmlCode +=<span class="string">&quot;&lt;body&gt;\n&quot;</span>;</span><br><span class="line">  htmlCode +=<span class="string">&quot;&lt;h1&gt;ESP8266 BUTTON STATE&lt;/h1&gt;\n&quot;</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(buttonState)</span><br><span class="line">    &#123;htmlCode +=<span class="string">&quot;&lt;p&gt;Button Status: HIGH&lt;/p&gt;\n&quot;</span>;&#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    &#123;htmlCode +=<span class="string">&quot;&lt;p&gt;Button Status: LOW&lt;/p&gt;\n&quot;</span>;&#125;</span><br><span class="line">    </span><br><span class="line">  htmlCode +=<span class="string">&quot;&lt;/body&gt;\n&quot;</span>;</span><br><span class="line">  htmlCode +=<span class="string">&quot;&lt;/html&gt;\n&quot;</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> htmlCode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//--------------------------------------------------------------------------------</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 设置处理404情况的函数&#x27;handleNotFound&#x27;</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">handleNotFound</span><span class="params">()</span>&#123;                                        <span class="comment">// 当浏览器请求的网络资源无法在服务器找到时，</span></span><br><span class="line">  esp8266_server.send(<span class="number">404</span>, <span class="string">&quot;text/plain&quot;</span>, <span class="string">&quot;404: Not found&quot;</span>);   <span class="comment">// NodeMCU将调用此函数。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在以上示例程序中的<code>handleRoot</code>函数中，<code>esp8266_server.send(200, &quot;text/html&quot;, sendHTML(pinState))</code>语句的的3个参数 <code>sendHTML(pinState)</code>调用了<code>sendHTML</code>函数。该函数的作用是建立一个可以定时刷新的HTML网页代码。通过定时刷新网页，开发板的引脚状态将会不断地在页面中进行更新。</p><p>此HTML网页代码是由<code>sendHTML</code>函数产生的。该函数建立了一个字符串变量，该字符串变量所存储的信息正是网页HTML代码。值得注意的是，该HTML代码会不断地检查变量pinState状态，并且根据pinState的状态改变HTML代码的信息，从而实现在网页上显示引脚状态。</p><p>此HTML代码中真正实现定时刷新网页功能的语句是代码中的第79行语句。这条语句是告诉网页需要定时刷新，刷新频率5秒钟，即每5秒钟刷新一次页面。您可以通过改变此行语句中的数值5来调整页面刷新频率。</p><p>每一次页面刷新，浏览器都会向NodeMCU发送HTTP请求。NodeMCU在收到浏览器请求后，将会把最新的HTML代码信息返回给浏览器。浏览器收到最新的HTML代码后将会在页面中显示引脚的状态。<br>以下是没有按下按键时的页面显示信息。</p><h1 id="暂时没放图-1"><a href="#暂时没放图-1" class="headerlink" title="暂时没放图"></a><strong>暂时没放图</strong></h1>]]></content>
      
      
      
        <tags>
            
            <tag> esp8266 </tag>
            
            <tag> 物联网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学物联网之ESP8266NodeMCU（三）</title>
      <link href="/post/336e95a3.html"/>
      <url>/post/336e95a3.html</url>
      
        <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="安装-ESP8266-NodeMCU开发板驱动"><a href="#安装-ESP8266-NodeMCU开发板驱动" class="headerlink" title="安装 ESP8266-NodeMCU开发板驱动"></a><a href="http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/install-esp8266-nodemcu-driver/">安装 ESP8266-NodeMCU开发板驱动</a></h2><p>目前大部分电脑驱动都已自动安装完成，可先进行下一步，若遇连接问题，可自行百度安装驱动。</p><h2 id="为ESP8266-NodeMCU搭建Arduino-IDE开发环境"><a href="#为ESP8266-NodeMCU搭建Arduino-IDE开发环境" class="headerlink" title="为ESP8266-NodeMCU搭建Arduino IDE开发环境"></a><a href="http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/nodemcu-arduino-ide/">为ESP8266-NodeMCU搭建Arduino IDE开发环境</a></h2><p>**下载 Arduino IDE **</p><p>打开Arduino IDE，<strong>“文件” -&gt; “首选项”, 在 “附加开发板管理网址”</strong> 中输入以下网址：</p><p>esp8266开发板管理器地址：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://arduino.esp8266.com/stable/package_esp8266com_index.json</span><br></pre></td></tr></table></figure><p>（选填，方便日后开发esp32）esp32开发版管理器地址：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://dl.espressif.com/dl/package_esp32_index.json</span><br></pre></td></tr></table></figure><p>紧接着点击<strong>”工具“ -&gt; ”开发板“ -&gt; “开发板管理器”</strong>, <strong>在搜索栏中输入“esp8266”</strong>，看到搜索结果显示**”esp8266 by ESP8266 Community”, 选择最新版本安装即可（我这里是3.0.2）**</p><p>安装成功后，在<strong>”工具“ -&gt; ”开发板“ 中选择”NodeMCU 1.0 (ESP-12E Moudle)“ 即可</strong></p><p>紧接着设置<strong>NodeMCU开发板的端口，在 “工具” -&gt; “端口”</strong></p><p><font color=purple>（这里比较简单，如果有其它问题自行百度解决）</font></p><h1 id="NodeMCU开发板的接入点模式"><a href="#NodeMCU开发板的接入点模式" class="headerlink" title="NodeMCU开发板的接入点模式"></a><a href="http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/ap/">NodeMCU开发板的接入点模式</a></h1><h2 id="接入点模式（Access-Point-也称-AP）"><a href="#接入点模式（Access-Point-也称-AP）" class="headerlink" title="接入点模式（Access Point, 也称 AP）"></a>接入点模式（Access Point, 也称 AP）</h2><p><img src="https://raw.githubusercontent.com/wild-civil/typora_img/main/images/NodeMCU-Access-Point.png" alt="ESP8266-NodeMCU接入点(Access Point)工作模式"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">NodeMCU接入点模式 </span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">此程序用于演示如何将NodeMCU以接入点模式工作。通过此程序，您可以使用</span></span><br><span class="line"><span class="comment">电脑或者手机连接NodeMCU所建立WiFi网络。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WiFi.h&gt;</span>        <span class="comment">// 本程序使用ESP8266WiFi库</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *ssid = <span class="string">&quot;设定自己的wifi名&quot;</span>; <span class="comment">// 这里定义将要 建立 的WiFi名称</span></span><br><span class="line">                                   <span class="comment">// 您可以将自己想要建立的WiFi名称填写入此处的双引号中</span></span><br><span class="line"> </span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *password = <span class="string">&quot;设定自己的wifi密码&quot;</span>;  <span class="comment">// 这里定义将要建立的WiFi密码</span></span><br><span class="line">                                    <span class="comment">// 您可以将自己想要使用的WiFi密码放入引号内</span></span><br><span class="line">                                    <span class="comment">// 如果建立的WiFi不要密码，则在双引号内不要填入任何信息</span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);              <span class="comment">// 启动串口通讯</span></span><br><span class="line"> </span><br><span class="line">  WiFi.softAP(ssid, password);     <span class="comment">// 此语句是重点。WiFi.softAP用于启动NodeMCU的AP模式。</span></span><br><span class="line">                                   <span class="comment">// 括号中有两个参数，ssid是WiFi名。password是WiFi密码。</span></span><br><span class="line">                                   <span class="comment">// 这两个参数具体内容在setup函数之前的位置进行定义。</span></span><br><span class="line"> </span><br><span class="line">  Serial.print(<span class="string">&quot;Access Point: &quot;</span>);    <span class="comment">// 通过串口监视器输出信息</span></span><br><span class="line">  Serial.println(ssid);              <span class="comment">// 告知用户NodeMCU所建立的WiFi名</span></span><br><span class="line">  Serial.print(<span class="string">&quot;IP address: &quot;</span>);      <span class="comment">// 以及NodeMCU的IP地址</span></span><br><span class="line">  Serial.println(WiFi.softAPIP());   <span class="comment">// 通过调用WiFi.softAPIP()可以得到NodeMCU的IP地址</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将程序上传至开发板以后, NodeMCU在每次启动以后，都会自动启动接入点模式。接入点WiFi的详细信息会通过串口监视器输出给用户查看。</p><p>若想要验证一下电脑是否可以与NodeMCU进行网络通讯，那么同样可以在Windows操作系统的“命令提示符”中输入：<code>ping IP address</code></p><p>（注意：ping的IP地址是NodeMCU默认的接入点IP地址，这一信息在上面的 串口监视器截屏中可以看到。）</p><h1 id="NodeMCU开发板的无线终端模式"><a href="#NodeMCU开发板的无线终端模式" class="headerlink" title="NodeMCU开发板的无线终端模式"></a><a href="http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/station/">NodeMCU开发板的无线终端模式</a></h1><h2 id="无线终端模式-Station"><a href="#无线终端模式-Station" class="headerlink" title="无线终端模式(Station)"></a>无线终端模式(Station)</h2><h3 id="1-连接WiFI"><a href="#1-连接WiFI" class="headerlink" title="1. 连接WiFI"></a><strong>1. 连接WiFI</strong></h3><p><img src="https://raw.githubusercontent.com/wild-civil/typora_img/main/images/NodeMCU-Station.png" alt="ESP8266-NodeMCU无线终端(Wireless Station)工作模式">)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">NodeMCU无线终端模式连接WiFi</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">本示例程序用于演示如何使用NodeMCU无线终端模式连接WiFi</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WiFi.h&gt;</span>        <span class="comment">// 本程序使用ESP8266WiFi库</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* ssid     = <span class="string">&quot;自家路由器的wifi名&quot;</span>;      <span class="comment">// 连接WiFi名</span></span><br><span class="line">                                            <span class="comment">// 请将您需要连接的WiFi名填入引号中</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* password = <span class="string">&quot;自家路由器的wifi密码&quot;</span>;          <span class="comment">// 连接WiFi密码</span></span><br><span class="line">                                            <span class="comment">// 请将您需要连接的WiFi密码填入引号中</span></span><br><span class="line">                                            </span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);         <span class="comment">// 启动串口通讯</span></span><br><span class="line">  </span><br><span class="line">  WiFi.begin(ssid, password);                  <span class="comment">// 启动网络连接</span></span><br><span class="line">  Serial.print(<span class="string">&quot;Connecting to &quot;</span>);              <span class="comment">// 串口监视器输出网络连接信息</span></span><br><span class="line">  Serial.print(ssid); Serial.println(<span class="string">&quot; ...&quot;</span>);  <span class="comment">// 告知用户NodeMCU正在尝试WiFi连接</span></span><br><span class="line">  </span><br><span class="line">  <span class="type">int</span> i = <span class="number">0</span>;                                   <span class="comment">// 这一段程序语句用于检查WiFi是否连接成功</span></span><br><span class="line">  <span class="keyword">while</span> (WiFi.status() != WL_CONNECTED) &#123;      <span class="comment">// WiFi.status()函数的返回值是由NodeMCU的WiFi连接状态所决定的。 </span></span><br><span class="line">    delay(<span class="number">1000</span>);                               <span class="comment">// 如果WiFi连接成功则返回值为WL_CONNECTED                       </span></span><br><span class="line">    Serial.print(i++); Serial.print(<span class="string">&#x27; &#x27;</span>);      <span class="comment">// 此处通过While循环让NodeMCU每隔一秒钟检查一次WiFi.status()函数返回值</span></span><br><span class="line">  &#125;                                            <span class="comment">// 同时NodeMCU将通过串口监视器输出连接时长读秒。</span></span><br><span class="line">                                               <span class="comment">// 这个读秒是通过变量i每隔一秒自加1来实现的。</span></span><br><span class="line">                                               </span><br><span class="line">  Serial.println(<span class="string">&quot;&quot;</span>);                          <span class="comment">// WiFi连接成功后</span></span><br><span class="line">  Serial.println(<span class="string">&quot;Connection established!&quot;</span>);   <span class="comment">// NodeMCU将通过串口监视器输出&quot;连接成功&quot;信息。</span></span><br><span class="line">  Serial.print(<span class="string">&quot;IP address:    &quot;</span>);             <span class="comment">// 同时还将输出NodeMCU的IP地址。这一功能是通过调用</span></span><br><span class="line">  Serial.println(WiFi.localIP());              <span class="comment">// WiFi.localIP()函数来实现的。该函数的返回值即NodeMCU的IP地址。</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;                                   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-自动连接最强信号WiFi网络"><a href="#2-自动连接最强信号WiFi网络" class="headerlink" title="2. 自动连接最强信号WiFi网络"></a><strong>2. 自动连接最强信号WiFi网络</strong></h3><p>有时会在家，学校，公司等来回跑，这样的话没换一个地方就得重新更改代码，太麻烦，于是我们可以：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">NodeMCU无线终端模式连接WiFi-2</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">此程序将会控制NodeMCU在当前的网络环境里搜索预先存储好的WiFi。</span></span><br><span class="line"><span class="comment">一旦找到预存的WiFi名称，NodeMCU将会使用预存的密码信息尝试连接该WiFi。</span></span><br><span class="line"><span class="comment">如果同时找到多个预存WiFi，NodeMCU将会尝试连接信号最强的WiFi。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WiFi.h&gt;</span>          <span class="comment">// 本程序使用ESP8266WiFi库</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WiFiMulti.h&gt;</span>   <span class="comment">// 本程序使用ESP8266WiFiMulti库</span></span></span><br><span class="line"> </span><br><span class="line">ESP8266WiFiMulti wifiMulti;     <span class="comment">// 建立ESP8266WiFiMulti对象,对象名称是&#x27;wifiMulti&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);            <span class="comment">// 启动串口通讯</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//通过addAp函数存储  WiFi名称       WiFi密码</span></span><br><span class="line">  wifiMulti.addAP(<span class="string">&quot;taichi-maker&quot;</span>, <span class="string">&quot;12345678&quot;</span>);  <span class="comment">// 这三条语句通过调用函数addAP来记录3个不同的WiFi网络信息。</span></span><br><span class="line">  wifiMulti.addAP(<span class="string">&quot;taichi-maker2&quot;</span>, <span class="string">&quot;87654321&quot;</span>); <span class="comment">// 这3个WiFi网络名称分别是taichi-maker, taichi-maker2, taichi-maker3。</span></span><br><span class="line">  wifiMulti.addAP(<span class="string">&quot;taichi-maker3&quot;</span>, <span class="string">&quot;13572468&quot;</span>); <span class="comment">// 这3个网络的密码分别是123456789，87654321，13572468。</span></span><br><span class="line">                                                <span class="comment">// 此处WiFi信息只是示例，请在使用时将需要连接的WiFi信息填入相应位置。</span></span><br><span class="line">                                                <span class="comment">// 另外这里只存储了3个WiFi信息，您可以存储更多的WiFi信息在此处。</span></span><br><span class="line">                                                </span><br><span class="line">  Serial.println(<span class="string">&quot;Connecting ...&quot;</span>);         <span class="comment">// 通过串口监视器输出信息告知用户NodeMCU正在尝试连接WiFi</span></span><br><span class="line">  <span class="type">int</span> i = <span class="number">0</span>;                                 </span><br><span class="line">  <span class="keyword">while</span> (wifiMulti.run() != WL_CONNECTED) &#123;  <span class="comment">// 此处的wifiMulti.run()是重点。通过wifiMulti.run()，NodeMCU将会在当前</span></span><br><span class="line">    delay(<span class="number">1000</span>);                             <span class="comment">// 环境中搜索addAP函数所存储的WiFi。如果搜到多个存储的WiFi那么NodeMCU</span></span><br><span class="line">    Serial.print(<span class="string">&#x27;.&#x27;</span>);                       <span class="comment">// 将会连接信号最强的那一个WiFi信号。</span></span><br><span class="line">  &#125;                                           <span class="comment">// 一旦连接WiFI成功，wifiMulti.run()将会返回“WL_CONNECTED”。这也是</span></span><br><span class="line">                                              <span class="comment">// 此处while循环判断是否跳出循环的条件。</span></span><br><span class="line"> </span><br><span class="line">  </span><br><span class="line">  Serial.println(<span class="string">&#x27;\n&#x27;</span>);                     <span class="comment">// WiFi连接成功后</span></span><br><span class="line">  Serial.print(<span class="string">&quot;Connected to &quot;</span>);            <span class="comment">// NodeMCU将通过串口监视器输出。</span></span><br><span class="line">  Serial.println(WiFi.SSID());              <span class="comment">// 连接的WiFI名称</span></span><br><span class="line">  Serial.print(<span class="string">&quot;IP address:\t&quot;</span>);            <span class="comment">// 以及</span></span><br><span class="line">  Serial.println(WiFi.localIP());           <span class="comment">// NodeMCU的IP地址</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> esp8266 </tag>
            
            <tag> 物联网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学物联网之ESP8266NodeMCU（二）</title>
      <link href="/post/4e66da29.html"/>
      <url>/post/4e66da29.html</url>
      
        <content type="html"><![CDATA[<h1 id="TCP-x2F-IP协议簇（TCP-x2F-IP-Stack）"><a href="#TCP-x2F-IP协议簇（TCP-x2F-IP-Stack）" class="headerlink" title="TCP&#x2F;IP协议簇（TCP&#x2F;IP Stack）"></a><a href="http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/internet-basics/tcp-ip-stack/">TCP&#x2F;IP协议簇（TCP&#x2F;IP Stack）</a></h1><p>在网络系统中，为了保证通信设备之间能正确地进行通信，必须使用一种双方都能够理解的语言，这种语言被称为“协议”。</p><p>TCP&#x2F;IP协议簇是Internet的基础，也是当今最流行的组网形式。TCP&#x2F;IP是一组协议的代名词。</p><p>TCP&#x2F;IP协议被划分为4层，分别是：</p><table><thead><tr><th>分层名称</th><th>包含协议</th></tr></thead><tbody><tr><td>应用层</td><td>HTTP, FTP, mDNS, WebSocket, OSC …</td></tr><tr><td>传输层</td><td>TCP, UDP</td></tr><tr><td>网络层</td><td>IP</td></tr><tr><td>链路层（也称网络接口层）</td><td>Ethernet, Wi-Fi …</td></tr></tbody></table><h1 id="链路层（Link-Layer）"><a href="#链路层（Link-Layer）" class="headerlink" title="链路层（Link Layer）"></a><a href="http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/internet-basics/link-layer/">链路层（Link Layer）</a></h1><p>链路层的主要作用是实现设备之间的物理链接。举例来说，我们日常使用的WiFi就是链路层的一种。</p><h2 id="ESP8266利用WiFi联网时有三种工作模式。"><a href="#ESP8266利用WiFi联网时有三种工作模式。" class="headerlink" title="ESP8266利用WiFi联网时有三种工作模式。"></a>ESP8266利用WiFi联网时有三种工作模式。</h2><p><strong>模式1 – 无线终端模式（Wireless Station）</strong></p><p>如下图所示，ESP8266可通过WiFi连接无线路由器。这与用您的手机通过WiFi连接无线路由器的模式相同。</p><p><img src="https://raw.githubusercontent.com/wild-civil/typora_img/main/images/NodeMCU-Station.png" alt="ESP8266-NodeMCU无线终端(Wireless Station)工作模式"></p><p><strong>模式2 – 接入点模式（Access Point, 也称 AP）</strong></p><p>ESP8266也可以建立WiFi网络供其它设备连接。当ESP8266以此模式运行时，我们可以使用手机搜索ESP8266所发出的WiFi网络并进行连接。</p><p><img src="https://raw.githubusercontent.com/wild-civil/typora_img/main/images/NodeMCU-Access-Point.png" alt="ESP8266-NodeMCU接入点(Access Point)工作模式"></p><p><strong>模式3 – 混合模式（Wireless Station + AP）</strong></p><p>混合模式即以上两种模式的混合。</p><h1 id="网络层（Internet-Layer）"><a href="#网络层（Internet-Layer）" class="headerlink" title="网络层（Internet Layer）"></a><a href="http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/internet-basics/internet-layer/">网络层（Internet Layer）</a></h1><h5 id="网络层与IP协议"><a href="#网络层与IP协议" class="headerlink" title="网络层与IP协议"></a>网络层与IP协议</h5><p>尽管设备可以通过链路层联网，但是光有链路层还无法实现设备之间的数据通讯。因为网络设备没有明确的标识。网络设备无从知晓要向谁传输数据，也无法确定从何处获取数据。</p><p>网络层主要作用是通过IP协议为联网设备提供IP地址。</p><p>有了IP地址还不够，因为要确保网络中所有设备IP地址不重复，还需要DHCP (Dynamic Host Configuration Protocol) 服务器来实现这一功能。</p><p>当网络中所有设备都有了独立的IP地址后，设备之间就可以收发数据了。</p><h1 id="传输层（Transportation-Layer）"><a href="#传输层（Transportation-Layer）" class="headerlink" title="传输层（Transportation Layer）"></a><a href="http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/internet-basics/transportation-layer/">传输层（Transportation Layer）</a></h1><p>网络设备通讯时，数据丢失和数据受损的情况经常出现。传输层的<br>TCP（Transmission Control Protocol）和UDP（User Datagram Protocol）协议可以用来解决这一问题。通常我们会选择这两种协议中的一种来保证数据传输的准确性。具体选择哪一种协议要看我们使用的是何种网络应用。因为不同的网络应用对于数据的传输要求是不同的。</p><p>TCP协议可以更好的保证数据传输的准确性，但是传输速度比UDP协议而言要慢一些。TCP协议的特点是可以保证所有数据都能被接收端接收，数据的传输顺序也不会被打乱，而且如有数据损坏则重发受损数据。基于以上功能特点，TCP通常用于电子邮件及文件上传等。</p><p>UDP协议并不能保证所有数据都被接收端所接受。一旦出现数据受损的情况，UDP协议将会抛弃受损的数据。这些数据一旦被抛弃将会永久性的消失，发送端不会因为数据受损而重新发送。因此UDP协议远不如TCP协议可靠。</p><p>但是既然是这样，为何还有人会选择UDP协议呢？这是因为UDP比TCP速度快。因此UDP协议通常用于网络游戏以及语音聊天或视频聊天应用。</p><h1 id="应用层（Application-Layer）"><a href="#应用层（Application-Layer）" class="headerlink" title="应用层（Application Layer）"></a><a href="http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/internet-basics/application-layer/">应用层（Application Layer）</a></h1><p>传输层可以实现设备间的数据传输。但发送端和接收端还需要一种协议来理解这些传输信息的含义。这就引出了即将给您介绍的应用层。</p><h4 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a><strong>HTTP协议</strong></h4><p>应用层中有很多种协议，最常见是HTTP协议。它常被用来传输网页数据。我们这篇教程也将着重介绍HTTP协议。</p><p>HTTP协议由<strong>请求</strong>和<strong>响应</strong>构成。也就是说，HTTP的工作模式很像是一问一答。</p><h4 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a><strong>HTTP请求</strong></h4><p>举例来说，当您在浏览器输入<a href="http://www.taichi-maker.com这一网址并按下回车,这时候浏览器会把这一操作转换成一个http请求./">www.taichi-maker.com这一网址并按下回车，这时候浏览器会把这一操作转换成一个HTTP请求。</a></p><p>这个HTTP请求主要分为两大部分。一部分是请求头（Request Header）一部分是请求体（Request Body）。对于我们学习物联网知识来说，请求头是我们重点要关注的内容。而请求体的知识已经超越这篇教程的范围，抱歉我就不在这里详述了。</p><p>请看以下是简化后的请求头内容：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>www.taichi-maker.com</span><br></pre></td></tr></table></figure><p>在以上的HTTP请求中:</p><p>“GET” 是一个<strong>读取</strong>请求。也就是请求网站服务器把网页数据发送过来。</p><p>“&#x2F;” 的作用就是要告诉网站服务器，我这个读取请求的内容是网站根目录下的内容。换句话说，就是请求服务器把网站首页的网页数据发过来。</p><p>“HTTP&#x2F;1.1” 是指请求所采用的HTTP协议版本是1.1。</p><p>“Host: <a href="http://www.taichi-maker.com”表示请求的域名是/">www.taichi-maker.com”表示请求的域名是</a> <a href="http://www.taichi-maker.com/">www.taichi-maker.com</a> 也就是太极创客网站的域名。</p><p>以上是HTTP协议的 GET 请求中最关键的内容。在 HTTP 协议中，GET只是诸多请求方法中的一种。以下是HTTP协议中的其它请求方法：</p><p><strong>HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。</strong><br><strong>HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。</strong></p><p>关于请求方法，我们这里主要介绍的只有GET。其它的请求方法已经超越了我们这个教程的范围，就不在这里继续深入讲下去了。感兴趣的话，您可以通过互联网找到这方面的教程资源。</p><h4 id="HTTP响应"><a href="#HTTP响应" class="headerlink" title="HTTP响应"></a><strong>HTTP响应</strong></h4><p>接下来我们再看一看浏览器发送以上HTTP请求后，接收到的服务器HTTP响应。HTTP响应内容也是分为两个部分，一部分是响应头（Response Header）一部分是响应体（Response Body）。其中响应体部分是可选项，也就是说有些HTTP响应只有响应头，而响应体是空的。</p><p>我们先来给大家介绍响应头部分。</p><p>由于响应头信息量比较大，我们还是选出主要内容给大家讲解。如下所示：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html; charset=UTF-8</span><br></pre></td></tr></table></figure><p>“HTTP&#x2F;1.1”这个信息我们刚刚在HTTP请求部分中介绍过。它的含义就是此HTTP响应所采用的协议版本是1.1。</p><p>“200”这个代码可能有些朋友会感觉陌生。但是如果我说起“404”这个数字可能大家会感到更熟悉吧？无论是200也好还是404也好，这些都是HTTP响应状态码。它的作用是以代码的形式表达服务器在接到请求后的状态。“200”代表服务器成功找到了请求的网页资源（这一点大家在后面的OK中也已经体现出来了）。 “404”代表服务器无法找到请求的网页资源。：</p><p>以下是常见的服务器状态码：</p><p>100~199：成功接收请求，要求客户端继续提交下一次请求才能完成整个处理过程。</p><p>200~299：成功接收请求并已完成整个处理过程。常用200</p><p>300~399：完成请求，客户需进一步细化请求。</p><p>400~499：客户端的请求有错误，常用404和403(403的含义是权限不够，服务器拒绝访问。)</p><p>500~599：服务器端出现错误，常用500</p><p><strong>“Content-Type”</strong> 指示响应体的内容是什么类型。这里的响应体内容类型是<strong>“text&#x2F;htm”</strong>，即网页HTML代码。通过这一行响应头信息，我们的浏览器将会知道，在这一个响应中的响应体部分都是HTML网页代码。于是浏览器将会做好准备，将网页代码翻译成我们人类容易读懂的格式并且呈现在浏览器中。<strong>charset&#x3D;UTF-8</strong>是字符集。</p><p>我们再举一个例子，假设某一个响应头中“Content-Type” 类型是”image&#x2F;jpeg”。这就意味着该响应体中的信息是一个jpeg格式的图片，那么浏览器也就会按照jpeg的解码方式将图片呈现在我们的面前。</p><p>在以上示例中，我们使用互联网浏览器来讲解HTTP的请求和响应。当我们使用NodeMCU来开发物联网项目时，发出HTTP请求的就不再是浏览器而是NodeMCU开发板了。而读取这些响应请求的也将是NodeMCU开发板。那么，究竟如何让NodeMCU发出HTTP请求，而NodeMCU又是如何解读HTTP响应呢？这些都依赖于我们为NodeMCU开发的控制程序。这些内容会在后续的教程里给大家详细介绍。</p><h4 id="DNS（Domain-Name-System-x2F-域名系统）"><a href="#DNS（Domain-Name-System-x2F-域名系统）" class="headerlink" title="DNS（Domain Name System&#x2F;域名系统）"></a><strong>DNS（Domain Name System&#x2F;域名系统）</strong></h4><p>在之前的教程中，我曾经给大家讲过网络中的所有设备都具有独立的IP地址。这一点对于网站服务器来说也不例外。当我们使用浏览器访问某一个网站时，实际上我们是通过浏览器向网站服务器发送HTTP请求。然而网站服务器的IP地址很难记忆，比如太极创客网站的域名由两个单词组成，taichi是太极，maker是创客。这很好记，但是要想记住太极创客服务器的IP就没那么容易了。因为那是4个毫无规律的数字。</p><p>为了解决IP地址不好记这一问题，DNS被派上了用场。</p><p>我们可以把DNS看作是一个巨型电话本。电话本中的联系人一栏就是网站的域名，而电话本中的电话号码一栏则是这些网站的IP地址。有了DNS我们就可以使用简单易记的域名来访问网站了。</p><p>还是用太极创客网站来举例吧，每当我们在浏览器中输入域名<a href="www.taichi-maker.com">www.taichi-maker.com</a>并按下回车后，这时浏览器首先会向DNS服务器发送请求，请求的内容大致如下：“亲爱的DNS服务器，我那个明明可以靠脸吃饭却偏偏要学物联网的主人想访问一个域名是<a href="www.taichi-maker.com">www.taichi-maker.com</a>的网站。麻烦您把这个域名的网站服务器IP地址告诉我好吗？” DNS服务器在接收到这一请求后，会做出以下应答：“亲爱的浏览器，您要的网站服务器ip地址是 12 . 34 . 56 . 78。” 浏览器在接收到这一IP地址后，就开始向这个IP地址所对应的网站服务器正式发出HTTP GET请求了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> esp8266 </tag>
            
            <tag> 物联网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学物联网之ESP8266NodeMCU（一）</title>
      <link href="/post/a01e6d85.html"/>
      <url>/post/a01e6d85.html</url>
      
        <content type="html"><![CDATA[<h1 id="初识NodeMCU开发板"><a href="#初识NodeMCU开发板" class="headerlink" title="初识NodeMCU开发板"></a>初识NodeMCU开发板</h1><p>市面上销售的配有ESP8266芯片的开发板有很多种。比较流行的有SparkFun ESP8266 Thing、Adafruit Feather HUZZAH with ESP8266、NodeMCU等。这里选择跟太极创客团队学NodeMCU。</p><p><img src="https://raw.githubusercontent.com/wild-civil/typora_img/main/imagesnodemcu_pinLocation.jpg" alt="ESP8266-NodeMCU开发板"></p><h2 id="数字输入输出引脚（GPIO）"><a href="#数字输入输出引脚（GPIO）" class="headerlink" title="数字输入输出引脚（GPIO）"></a>数字输入输出引脚（GPIO）</h2><p>如下图所示，ESP8266芯片四周分布很多引脚。这些引脚大部分可用作输入输出使用。这些用作输入输出的引脚统称为GPIO。</p><p>当引脚以数字输出模式工作时，低电平是<font color=red size=4>0V</font>&gt; (灌电流)，高电平是<font color=red size=4>3.3V</font> (拉电流)。</p><p><font face="黑体" color=green size=4>请注意:ESP8266芯片与Arduino Uno&#x2F;Mega&#x2F;Nano等开发板的引脚电平电压有所区别。Arduino开发板的高电平是+5V，低电平是0V。</font></p><h3 id="GPIO编号与NodeMCU开发板引脚名的区别"><a href="#GPIO编号与NodeMCU开发板引脚名的区别" class="headerlink" title="GPIO编号与NodeMCU开发板引脚名的区别"></a>GPIO编号与NodeMCU开发板引脚名的区别</h3><p>请留意：在很多介绍ESP8266以及NodeMCU的资料里会出现两种引脚命名方法。一种是GPIO编号，一种是NodeMCU引脚名。请注意这两者是不同的，请千万不要混淆。</p><p><img src="https://raw.githubusercontent.com/wild-civil/typora_img/main/imagesnodemcu-pin-number.jpg" alt="nodemcu-pin-number"></p><p>简而言之，只要您看到GPIO这几个字母，就说明是芯片引脚，而没有GPIO这几个字母，那肯定是指开发板引脚。</p><h3 id="ESP8266-GPIO编号与NodeMCU开发板引脚名的对应关系"><a href="#ESP8266-GPIO编号与NodeMCU开发板引脚名的对应关系" class="headerlink" title="ESP8266 GPIO编号与NodeMCU开发板引脚名的对应关系"></a>ESP8266 GPIO编号与NodeMCU开发板引脚名的对应关系</h3><p><img src="https://raw.githubusercontent.com/wild-civil/typora_img/main/imagesnodemcu-pin-GPIO_001.png" alt="nodemcu-pin-GPIO_001"></p><p><img src="https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266_devkit_horizontal-002.png" alt="esp8266_devkit_horizontal-002"></p><p>在以上图片中深蓝底白色字的标识就是GPIO引脚编号。如<img src="http://www.taichi-maker.com/wp-content/uploads/2019/02/GPIO4.png" alt="NodeMCU-GPIO4"> </p><p>而开发板上所印刷的D2,D3等等就是NodeMCU开发板引脚名称。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">digitalWrite(<span class="number">4</span>, High);</span><br></pre></td></tr></table></figure><p>以上语句通过digitalWrite函数将引脚4设置为高电平。这里的数字4就是指GPIO4。也可以说这个语句是将NodeMCU开发板的D2引脚设置为高电平,即：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">digitalWrite(D2, High);    <span class="comment">//因为D2对应的是GPIO4。</span></span><br></pre></td></tr></table></figure><h2 id="可用引脚"><a href="#可用引脚" class="headerlink" title="可用引脚"></a>可用引脚</h2><p>ESP8266芯片有17个GPIO引脚（GPIO0～GPIO16）。这些引脚中的GPIO6～GPIO 11被用于连接开发板的闪存（Flash Memory）。如果在实验电路中使用GPIO6～GPIO11，NodeMCU开发板将无法正常工作。因此建议您<font color=red size=4>不要使用GPIO6～GPIO 11。</font></p><p><img src="https://raw.githubusercontent.com/wild-civil/typora_img/main/imagesesp8266_devkit_horizontal-flash-pins.png" alt="*ESP8266的GPIO6-GPIO11用于连接闪存，因此不建议使用这些引脚。*"></p><h3 id="电压电流限制"><a href="#电压电流限制" class="headerlink" title="电压电流限制"></a>电压电流限制</h3><p>NodeMCU开发板引脚的<font color=orange>输入输出电压限制是3.3 V</font>。如果向引脚施加3.6V以上的电压就有可能对芯片电路造成损坏。同时请注意，这些引脚的<font color=orange>最大输出电流是12mA。</font></p><p>由于NodeMCU开发板的引脚允许电压和电流都是低于Arduino开发板的引脚，将NodeMCU与Arduino引脚相互连接时一定要特别注意这两个开发板的引脚电压和电流的区别。操作不当极有可能可能会损坏NodeMCU开发板。</p><h3 id="特殊引脚情况说明"><a href="#特殊引脚情况说明" class="headerlink" title="特殊引脚情况说明"></a>特殊引脚情况说明</h3><p><strong>GPIO2引脚</strong> 在NodeMCU开发板启动时是不能连接低电平的。</p><p><strong>GPIO15引脚</strong>在开发板运行中一直保持低电平状态。因此请不要使用GPIO15引脚来读取开关状态或进行I²C通讯。</p><p><strong>GPIO0引脚</strong>在开发板运行中需要一直保持高电平状态。否则ESP8266将进入程序上传工作模式也就无法正常工作了。您无需对GPIO0引脚进行额外操作，因为NodeMCU的内置电路可以确保GPIO0引脚在工作时连接高电平而在上传程序时连接低电平。</p><h3 id="上拉电阻-x2F-下拉电阻"><a href="#上拉电阻-x2F-下拉电阻" class="headerlink" title="上拉电阻&#x2F;下拉电阻"></a>上拉电阻&#x2F;下拉电阻</h3><p><strong>GPIO 0-15引脚</strong>都配有内置上拉电阻。这一点与Arduino十分类似。<strong>GPIO16 引脚</strong>配有内置下拉电阻。</p><h3 id="模拟输入"><a href="#模拟输入" class="headerlink" title="模拟输入"></a>模拟输入</h3><p>ESP8266 只有一个模拟输入引脚（该引脚通过模拟-数字转换将引脚上的模拟电压数值转化为数字量）。<font color=red>此引脚可读取的模拟电压值为 0 – 1.0V。</font>请注意：ESP8266 芯片模拟输入引脚连接在1.0V以上电压可能损坏ESP8266芯片。</p><p>以上所描述的是针对ESP8266芯片的引脚。而对于NodeMCU开发板引脚，情况就不同了。</p><p>NodeMCU开发板配有降压电路。您可以用NodeMCU开发板的模拟输入引脚读取0-3.3V的模拟电压信号。</p><h3 id="通讯"><a href="#通讯" class="headerlink" title="通讯"></a>通讯</h3><h4 id="串行端口"><a href="#串行端口" class="headerlink" title="串行端口"></a><strong>串行端口</strong></h4><p>ESP8266有2个硬件串行端口（UART）。</p><p>串行端口0（UART0）使用GPIO1和GPIO3引脚。其中GPIO1引脚是TX0，GPIO3是RX0。</p><p>串行端口1（UART1）使用GPIO2和GPIO8引脚。其中GPIO2引脚是TX1，GPIO8是RX1。请注意，由于GPIO8被用于连接闪存芯片，串行端口1只能使用GPIO2来向外发送串行数据。</p><h4 id="I²C"><a href="#I²C" class="headerlink" title="I²C"></a><strong>I²C</strong></h4><p>ESP8266只有软件模拟的I²C端口，没有硬件I²C端口。也就是说我们可以使用任意的两个GPIO引脚通过软件模拟来实现I²C通讯。ESP8266的数据表（datasheet）中，GPIO2标注为SDA，GPIO14标注为SCL。</p><h4 id="SPI"><a href="#SPI" class="headerlink" title="SPI"></a><strong>SPI</strong></h4><p>ESP8266的SPI端口情况如下：</p><p>GPIO14 — CLK<br>GPIO12 — MISO<br>GPIO13 — MOSI<br>GPIO 15 — CS(SS)</p><h3 id="ESP8266引脚功能一览"><a href="#ESP8266引脚功能一览" class="headerlink" title="ESP8266引脚功能一览"></a><strong>ESP8266引脚功能一览</strong></h3><table><thead><tr><th align="left">GPIO</th><th align="left">功能</th><th align="left">状态</th><th align="left">限制</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">引导模式选择</td><td align="left">3.3V</td><td align="left">无Hi-Z</td></tr><tr><td align="left">1</td><td align="left">TX0</td><td align="left">–</td><td align="left">串口通讯过程中不能使用</td></tr><tr><td align="left">2</td><td align="left">引导模式选择 TX1</td><td align="left">3.3V</td><td align="left">启动时不能接地 启动时发送调试信息</td></tr><tr><td align="left">3</td><td align="left">RX0</td><td align="left">–</td><td align="left">串口通讯过程中不能使用</td></tr><tr><td align="left">4</td><td align="left">SDA (I²C)</td><td align="left">–</td><td align="left">–</td></tr><tr><td align="left">5</td><td align="left">SCL (I²C)</td><td align="left">–</td><td align="left">–</td></tr><tr><td align="left">6 – 11</td><td align="left">连接闪存</td><td align="left">x</td><td align="left">不可用</td></tr><tr><td align="left">12</td><td align="left">MISO (SPI)</td><td align="left">–</td><td align="left">–</td></tr><tr><td align="left">13</td><td align="left">MOSI (SPI)</td><td align="left">–</td><td align="left">–</td></tr><tr><td align="left">14</td><td align="left">SCK (SPI)</td><td align="left">–</td><td align="left">–</td></tr><tr><td align="left">15</td><td align="left">SS (SPI)</td><td align="left">0V</td><td align="left">上拉电阻不可用</td></tr><tr><td align="left">16</td><td align="left">睡眠唤醒</td><td align="left">–</td><td align="left">无上拉电阻，仅有下拉电阻 连接 RST 引脚实现睡眠唤醒</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> esp8266 </tag>
            
            <tag> 物联网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vi编辑器基本命令</title>
      <link href="/post/59501.html"/>
      <url>/post/59501.html</url>
      
        <content type="html"><![CDATA[<h2 id="vi模式切换"><a href="#vi模式切换" class="headerlink" title="vi模式切换"></a>vi模式切换</h2><p><img src="https://raw.githubusercontent.com/wild-civil/typora_img/main/images/vi.jpg" alt="vi"></p><h2 id="vi保存和退出命令"><a href="#vi保存和退出命令" class="headerlink" title="vi保存和退出命令"></a>vi保存和退出命令</h2><table><thead><tr><th align="center">命令</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">:q</td><td align="center">(Quit)退出未修改的文件（若文件被修改且未保存，则该命令无效）</td></tr><tr><td align="center">:q!</td><td align="center">强制退出，且不保存修改过的部分</td></tr><tr><td align="center">:w</td><td align="center">(Write)保存文件，但不退出</td></tr><tr><td align="center">:x</td><td align="center">(Exit)保存文件并退出（:x &lt;&#x3D;&gt; :wq）</td></tr><tr><td align="center">:w File</td><td align="center">另存为File给出的文件名，不退出</td></tr><tr><td align="center">:r File</td><td align="center">（Read)读入File指定的文件内容插入到光标处</td></tr></tbody></table><h2 id="vi命令、编辑模式切换"><a href="#vi命令、编辑模式切换" class="headerlink" title="vi命令、编辑模式切换"></a>vi命令、编辑模式切换</h2><table><thead><tr><th align="center">命令</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">i I<br />（Insert)</td><td align="center">i 命令将文本插入到光标所在位置前。<br />I 命令将文本插入当前行的行首。当输入 I 命令后，光标自动移到该行的行首。</td></tr><tr><td align="center">a A <br />(Append)</td><td align="center">a 命令将新文本追加到光标当前所在位置之后<br />A 命令将新文本追加到所在行的行尾。当输入 A 命令后，光标自动移到该行的行尾。</td></tr><tr><td align="center">o O<br />(Open)</td><td align="center">o 命令将在光标所在行的下面插入一个空行，并将光标置于该行的行首。<br />O 命令在光标所在行的上面插入一个空行，并将光标置于该行的行首。</td></tr><tr><td align="center">:！Command</td><td align="center">在vi中执行外部命令Command，按回车键可以返回vi继续工作<br />例如，在vi命令行模式下输入:! pwd可以查看当前所在目录又或者:! date 查看时间</td></tr></tbody></table><p>当 vi 处于文本编辑状态，屏幕最下行显示 “–INSERT–”说明信息</p><h2 id="vi拷贝-粘贴"><a href="#vi拷贝-粘贴" class="headerlink" title="vi拷贝 粘贴"></a>vi拷贝 粘贴</h2><table><thead><tr><th align="center">命令</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">[N] x<br />(Expurgate)</td><td align="center">删除从光标位置开始的连续N行字符(并复制到编辑缓冲区)</td></tr><tr><td align="center">[N] dd<br />(Delete)</td><td align="center">该命令删除光标所在的整行。在 dd 前可加上一个数字 N，表示删除当前行及其后 N-1 行的内容。</td></tr><tr><td align="center">[N] yy<br />(Yank)</td><td align="center">复制光标所在的整行。在 yy 前可加一个数字 N，表示复制当前行及其后 N-1 行的内容。</td></tr><tr><td align="center">p 或 P<br />(Put)</td><td align="center">从编辑缓冲区复制文本到当前光标处</td></tr><tr><td align="center">u<br />(Undo)</td><td align="center">该命令撤销上一次所做的操作。多次使用 u 命令会一步一步依次撤销之前做过的操作（在一次切换到文本输入模式中输入的所有文本算一次操作）。</td></tr></tbody></table><h2 id="vi光标命令"><a href="#vi光标命令" class="headerlink" title="vi光标命令"></a>vi光标命令</h2><table><thead><tr><th align="center">命令</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">h</td><td align="center">方向键，向左移动光标一个字符的位置，相当于键 “←”</td></tr><tr><td align="center">j</td><td align="center">方向键，向下移动光标到下一行的位置，相当于键 “↓”</td></tr><tr><td align="center">k</td><td align="center">方向键，向上移动光标到上一行的位置，相当于键 “↑”</td></tr><tr><td align="center">l</td><td align="center">方向键，向右移动光标一个字符的位置，相当于键 “→”</td></tr><tr><td align="center">:N</td><td align="center">移动光标到第N行 (N待定)</td></tr><tr><td align="center">1G</td><td align="center">移动光标到文件的第 1 行</td></tr><tr><td align="center">G</td><td align="center">移动光标到文件的最后 1 行</td></tr><tr><td align="center">:set number</td><td align="center">设置行号显示</td></tr><tr><td align="center">set</td><td align="center">取消行号显示</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android studio 七天Java零基础入门 记录</title>
      <link href="/post/34091.html"/>
      <url>/post/34091.html</url>
      
        <content type="html"><![CDATA[<h2 id="基本入门"><a href="#基本入门" class="headerlink" title="基本入门"></a>基本入门</h2>]]></content>
      
      
      
        <tags>
            
            <tag> Learning record </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo + github搭建个人博客</title>
      <link href="/post/95eb7d.html"/>
      <url>/post/95eb7d.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-github搭建个人博客，并绑定域名"><a href="#Hexo-github搭建个人博客，并绑定域名" class="headerlink" title="Hexo+github搭建个人博客，并绑定域名"></a>Hexo+github搭建个人博客，并绑定域名</h1><blockquote><p>搭建&amp;美化：<a href="http://haiyong.site/post/cda958f2.html">http://haiyong.site/post/cda958f2.html</a> </p></blockquote><p>注：本文章内容大部分来源(包括视频)来自：<a href="www.wushishu.xyz">www.wushishu.xyz </a>备用<a href="wushishu.github.io">wushishu.github.io</a></p><h1 id="第一部分视频学习"><a href="#第一部分视频学习" class="headerlink" title="第一部分视频学习"></a>第一部分视频学习</h1><iframe src="https://player.bilibili.com/player.html?aid=638754315&amp;bvid=BV1NY4y1C7Ng&amp;cid=714430663&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="800" height="500" style="box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-pan-x: ; --tw-pan-y: ; --tw-pinch-zoom: ; --tw-scroll-snap-strictness: proximity; --tw-ordinal: ; --tw-slashed-zero: ; --tw-numeric-figure: ; --tw-numeric-spacing: ; --tw-numeric-fraction: ; --tw-ring-inset: ; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgb(59 130 246 / 0.5); --tw-ring-offset-shadow: 0 0 #0000; --tw-ring-shadow: 0 0 #0000; --tw-shadow: 0 0 #0000; --tw-shadow-colored: 0 0 #0000; --tw-blur: ; --tw-brightness: ; --tw-contrast: ; --tw-grayscale: ; --tw-hue-rotate: ; --tw-invert: ; --tw-saturate: ; --tw-sepia: ; --tw-drop-shadow: ; --tw-backdrop-blur: ; --tw-backdrop-brightness: ; --tw-backdrop-contrast: ; --tw-backdrop-grayscale: ; --tw-backdrop-hue-rotate: ; --tw-backdrop-invert: ; --tw-backdrop-opacity: ; --tw-backdrop-saturate: ; --tw-backdrop-sepia: ; margin: 0px 0px 20px; color: rgb(76, 73, 72); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, &quot;Helvetica Neue&quot;, Lato, Roboto, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"></iframe><p>也可以直接跟着视频走</p><h2 id="安装并配置Node-js"><a href="#安装并配置Node-js" class="headerlink" title="安装并配置Node.js"></a>安装并配置Node.js</h2><p>Node.js下载:【它让JavaScript成为与PHP、Python、Perl、Ruby等服务端语言平起平坐的脚本语言。】</p><p>教程：<a href="https://blog.csdn.net/weixin_52799373/article/details/123840137%EF%BC%88%E8%BF%87%E7%A8%8B%E8%AF%A6%E7%BB%86%EF%BC%8C%E8%BF%98%E8%A6%86%E7%9B%96win11%EF%BC%8C%E8%AF%84%E8%AE%BA%E4%B8%8B%E9%9D%A2%E8%BF%98%E6%9C%89%E5%B8%88%E5%8F%94%E7%9A%84%E8%B6%B3%E8%BF%B9%EF%BC%89">https://blog.csdn.net/weixin_52799373/article/details/123840137（过程详细，还覆盖win11，评论下面还有师叔的足迹）</a></p><h4 id="注意一"><a href="#注意一" class="headerlink" title="注意一"></a>注意一</h4><p>全局安装最常用的 express 模块 进行测试</p><p>命令如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express -g</span><br></pre></td></tr></table></figure><p>报错图片：</p><img src="http://qiniu.hanvon.top/blog_article/Blog_building/202310311330969.png" alt="img" style="zoom:50%;" /><p>解决方法：</p><p>【亲测有效】</p><p>需要删除 npmrc 文件。</p><p><strong>强调：</strong>不是nodejs安装目录npm模块下的那个npmrc文件</p><p>而是在 C:\Users\（你的用户名）\下的.npmrc文件</p><p><em><strong>聪明的你，一定想到了直接用evering搜索，省的还要调用文件管理器在一点一点的找</strong></em></p><img src="http://qiniu.hanvon.top/blog_article/Blog_building/202310311331077.png" alt="img" style="zoom:50%;" /><h4 id="注意二"><a href="#注意二" class="headerlink" title="注意二"></a>注意二</h4><p><strong>在文章第四歩测试上查看安装结果</strong></p><p>可能会出现下面照片结果，更改了目录为什么还是C盘目录下，这时候只需要以管理员身份运行命令即可。</p><p>在下面路径下找到cmd.exe并且管理员身份运行即可。</p><p>推测：出像这种现象的原因就是执行权限不够，推荐大家在桌面建立一个快捷方式（管理员命令的）cmd</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\System32\cmd.exe</span><br></pre></td></tr></table></figure><img src="http://qiniu.hanvon.top/blog_article/Blog_building/202310311331718.png" alt="img" style="zoom:50%;" /><p><strong>创建管理员权限的cmd桌面快捷方式</strong></p><img src="http://qiniu.hanvon.top/blog_article/Blog_building/202310311331004.png" alt="img" style="zoom:50%;" /><h2 id="安装并配置Git"><a href="#安装并配置Git" class="headerlink" title="安装并配置Git"></a>安装并配置Git</h2><p>git是一个并源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理</p><p>Windows系统Git安装教程：<a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html">https://www.cnblogs.com/xueweisuoyong/p/11914045.html</a></p><h3 id="生成SSH-Keys"><a href="#生成SSH-Keys" class="headerlink" title="生成SSH Keys"></a>生成SSH Keys</h3><p>生成ssh</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的邮箱地址&quot;</span><br></pre></td></tr></table></figure><img src="http://qiniu.hanvon.top/blog_article/Blog_building/202310311331566.png" alt="img" style="zoom:50%;" /><p><strong>找到秘钥位置并复制</strong></p><img src="http://qiniu.hanvon.top/blog_article/Blog_building/202310311331246.png" alt="img" style="zoom:500%;" /><p><strong>测试ssh是否绑定成功</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果问你（yes or no）,直接 yes 就可以得到下面这段话</p><img src="http://qiniu.hanvon.top/blog_article/Blog_building/202310311331532.png" alt="img" style="zoom:50%;" /><h2 id="本地访问博客"><a href="#本地访问博客" class="headerlink" title="本地访问博客"></a>本地访问博客</h2><p>1、创建一个名为 Blog 的文件，在里面启用 Git Bash Here</p><p><a href="https://static001.geekbang.org/infoq/b0/b06a27bee58606277ea46f413b34ed14.png"><img src="http://qiniu.hanvon.top/blog_article/Blog_building/202310311331193.png" alt="img" style="zoom:50%;" /></a></p><p>2、初始化hexo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><img src="http://qiniu.hanvon.top/blog_article/Blog_building/202310311331023.png" alt="img" style="zoom:50%;" /><p>3、生成本地的hexo页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><img src="http://qiniu.hanvon.top/blog_article/Blog_building/202310311332717.png" alt="img" style="zoom:50%;" /><p>4、访问</p><p>打开本地服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:4000/</span><br></pre></td></tr></table></figure><p><a href="https://static001.geekbang.org/infoq/5f/5fde531819308103720a5c098f342092.png"><img src="http://qiniu.hanvon.top/blog_article/Blog_building/202310311332849.png" alt="img" style="zoom:50%;" /></a></p><blockquote><p>长按 Ctrl + c 关闭服务器</p></blockquote><p><a href="https://static001.geekbang.org/infoq/6f/6f77175cb6028832126b38d0b820be95.png"><img src="http://qiniu.hanvon.top/blog_article/Blog_building/202310311332255.png" alt="img" style="zoom:50%;" /></a></p><h2 id="上传到Github"><a href="#上传到Github" class="headerlink" title="上传到Github"></a>上传到Github</h2><p>修改_config.yml文件</p><img src="http://qiniu.hanvon.top/blog_article/Blog_building/202310311332108.png" alt="img" style="zoom:50%;" /><p><strong>把图片上位置更换成</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: 你的github地址</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><img src="http://qiniu.hanvon.top/blog_article/Blog_building/202310311332828.png" alt="img" style="zoom:50%;" /><p>安装hexo-deployer-git 自动部署发布工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p><a href="https://static001.geekbang.org/infoq/a9/a94aa787c8627d7bc2d95fc3aabe211d.png"><img src="http://qiniu.hanvon.top/blog_article/Blog_building/202310311332467.png" alt="img" style="zoom:50%;" /></a></p><h3 id="生成页面"><a href="#生成页面" class="headerlink" title="生成页面"></a><strong>生成页面</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p><a href="https://static001.geekbang.org/infoq/ec/ec4dc5e76906c62036e61f4d083ebaad.png"><img src="http://qiniu.hanvon.top/blog_article/Blog_building/202310311332692.png" alt="img" style="zoom:50%;" /></a></p><h4 id="注意一-1"><a href="#注意一-1" class="headerlink" title="注意一"></a>注意一</h4><p>如果报错如下：（无报错，请忽略此条）</p><p>报错信息是提示hexo的yml配置文件 冒号后面少了空格解决方案：</p><p>到提示行将对应的空格补上即可</p><p><a href="https://static001.geekbang.org/infoq/f1/f139b76ed562b895ece7557ebb5bb791.png"><img src="http://qiniu.hanvon.top/blog_article/Blog_building/202310311332399.png" alt="img" style="zoom:50%;" /></a></p><p>本地文件上传到Github上面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>中间会出现一个登录界面，可以用令牌登录。（令牌及时保存，就看不到了）</p><p>结束以后就上传 Github 就成功了！！！</p><p><a href="https://static001.geekbang.org/infoq/1b/1ba83adbf958f9ed0ad0129bd843f785.png"><img src="http://qiniu.hanvon.top/blog_article/Blog_building/202310311332663.png" alt="img" style="zoom:50%;" /></a></p><h4 id="注意二-1"><a href="#注意二-1" class="headerlink" title="注意二"></a>注意二</h4><p>如果出现如图错误网络报错，再次尝试，多次尝试，直到更换WiFi~~~~</p><p><a href="https://static001.geekbang.org/infoq/5e/5e33beb4a80df251722f550b7ca0de88.png"><img src="http://qiniu.hanvon.top/blog_article/Blog_building/202310311332772.png" alt="img" style="zoom:50%;" /></a></p><h2 id="访问GitHub博客"><a href="#访问GitHub博客" class="headerlink" title="访问GitHub博客"></a>访问GitHub博客</h2><p><a href="https://static001.geekbang.org/infoq/0a/0a397f64a129a210ccbebdff832de7af.png"><img src="http://qiniu.hanvon.top/blog_article/Blog_building/202310311332428.png" alt="img" style="zoom:50%;" /></a></p><p>访问博客，开始的页面是初始化页面，没有做美化和增加内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://wushishu.github.io/</span><br></pre></td></tr></table></figure><p><a href="https://static001.geekbang.org/infoq/aa/aa2f760148fbcbf6c3ce0b43cbe3433c.png"><img src="http://qiniu.hanvon.top/blog_article/Blog_building/202310311332934.png" alt="img" style="zoom: 50%;" /></a></p><h1 id="第二部分-文档学习"><a href="#第二部分-文档学习" class="headerlink" title="第二部分 文档学习"></a>第二部分 文档学习</h1><h2 id="撰写博客"><a href="#撰写博客" class="headerlink" title="撰写博客"></a>撰写博客</h2><p><em><strong>电脑要必须有Typora！电脑要必须有Typora！电脑要必须有Typora！</strong></em>（重要的事情说三遍）</p><p>文本教程：<a href="https://dhndzwxj.vercel.app/3276806131.html">https://dhndzwxj.vercel.app/3276806131.html</a></p><p>hexo标签教程：<a href="http://haiyong.site/post/cda958f2.html">http://haiyong.site/post/cda958f2.html</a>（参考文档看需求加不加）</p><p>我们打开自己的博客根目录，跟着我一个个了解里面的这些文件（夹）都是干什么的：</p><img src="http://qiniu.hanvon.top/blog_article/Blog_building/202310311332992.png" alt="img" style="zoom:50%;" /><ul><li><code>_config.yml</code>：俗称站点配置文件，很多与博客网站的格式、内容相关的设置都需要在里面改。</li><li><code>node_modules</code>:存储Hexo插件的文件，可以实现各种扩展功能。一般不需要管。</li><li><code>package.json</code>：别问我，我也不知道干嘛的。</li><li><code>scaffolds</code>：模板文件夹，里面的<code>post.md</code>文件可以设置每一篇博客的模板。具体用起来就知道能干嘛了。</li><li><code>source</code>：非常重要。所有的个人文件都在里面！</li><li><code>themes</code>：主题文件夹，可以从<a href="https://hexo.io/themes/">Hexo主题官网</a>或者网上大神的Github主页下载各种各样美观的主题，让自己的网站变得逼格高端的关键！</li></ul><p>接下来重点介绍<code>source</code>文件夹。新建的博客中，<code>source</code>文件夹下默认只有一个子文件夹——<code>_posts</code>。我们写的博客都放在这个子文件夹里面。我们还可以在<code>source</code>里面新建各种子文件夹满足自己的个性化需求，对初学者而言，我们先把精力放在主线任务上，然后再来搞这些细节。</p><p><a href="https://static001.geekbang.org/infoq/3f/3f7b8b410726691082019f2ab603976b.png"><img src="http://qiniu.hanvon.top/blog_article/Blog_building/202310311332045.png" alt="img" style="zoom:50%;" /></a></p><p>写好Hellworld内容后，在命令行一键三连：</p><blockquote><p>‘hexo cl’命令用于清除缓存文件（db.json）和已生成的静态文件（public）。</p><p>例如：在更换主题后，如果发现站点更改不生效，可以运行该命令。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo cl</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>然后随便打开一个浏览器，在网址栏输入<code>localhost:4000/</code>，就能发现自己的网站更新了！不过这只是在本地进行了更新，要想部署到网上（Github上），输入如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>然后在浏览器地址栏输入<code>https://yourname.github.io</code>，或者<code>yourname.github.io</code>就能在网上浏览自己的博客了！</p><p>以上，我们的博客网站1.0版本就搭建完成了，如果没有更多的需求，做到这里基本上就可以了。如果有更多的要求，还需要进一步的精耕细作！</p><h2 id="精耕细作"><a href="#精耕细作" class="headerlink" title="精耕细作"></a>精耕细作</h2><p><strong>海拥\Butterfly 主题美化：</strong><a href="http://haiyong.site/post/22e1d5da.html">http://haiyong.site/post/22e1d5da.html</a></p><p><strong>Butterfly参考文档（小白慎入，但是他也是你走向DIY必须迈出的一歩）</strong>:<a href="https://butterfly.js.org/posts/dc584b87/#Post-Front-matter">https://butterfly.js.org/posts/dc584b87/#Post-Front-matter</a></p><p>文章中要更改的文件（.yml .bug 等）可以要用viscode打开！！！</p><p><strong>Butterfly 主题安装</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>这里面如果报错，如下图所示（长路漫漫，bug满满）</p><img src="http://qiniu.hanvon.top/blog_article/Blog_building/202310311333567.png" alt="img" style="zoom:50%;" /><p>只需要在命令行中执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset http.proxy </span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure><p>再次安装主题即可成功</p><p><a href="https://static001.geekbang.org/infoq/a1/a1ee42ae917eb1c19261ec72b82efde4.png"><img src="http://qiniu.hanvon.top/blog_article/Blog_building/202310311333116.png" alt="img" style="zoom:50%;" /></a></p><p><strong>应用主题</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><p><a href="https://static001.geekbang.org/infoq/b0/b08a6de31ecdfcc74ccb0037f23094b3.png"><img src="http://qiniu.hanvon.top/blog_article/Blog_building/202310311333759.png" alt="img" style="zoom:50%;" /></a></p><p><strong>安装插件</strong></p><p>如果你没有 pug 以及 stylus 的渲染器，请下载安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p><a href="https://static001.geekbang.org/infoq/cd/cded5198aec31fec9f8b53bb76676174.png"><img src="http://qiniu.hanvon.top/blog_article/Blog_building/202310311333574.png" alt="img" style="zoom:50%;" /></a></p><h3 id="Butterfly-主题"><a href="#Butterfly-主题" class="headerlink" title="Butterfly 主题"></a>Butterfly 主题</h3><p>生成文章唯一链接</p><p>Hexo的默认文章链接格式是年，月，日，标题这种格式来生成的。如果你的标题是中文的话，那你的URL链接就会包含中文，</p><p>复制后的URL路径就是把中文变成了一大堆字符串编码，如果你在其他地方用这边文章的url链接，偶然你又修改了改文章的标题，那这个URL链接就会失效。为了给每一篇文章来上一个属于自己的链接，写下此教程，利用 hexo-abbrlink 插件，A Hexo plugin to generate static post link based on post titles ,来解决这个问题。 参考github官方： hexo-abbrlink 按照此教程配置完之后如下：</p><p>1、安装插件，在博客根目录 [Blogroot] 下打开终端，运行以下指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p><a href="https://static001.geekbang.org/infoq/32/32ad907f045425afedb968d20dab4507.png"><img src="http://qiniu.hanvon.top/blog_article/Blog_building/202310311333642.png" alt="img" style="zoom:50%;" /></a></p><p>2、插件安装成功后，在根目录 Blogroot(你的博客目录)的配置文件 _config.yml 找到 permalink：</p><p><a href="https://static001.geekbang.org/infoq/7e/7e4272e54cb25564b1e708e85c8539d2.png"><img src="http://qiniu.hanvon.top/blog_article/Blog_building/202310311334031.png" alt="img" style="zoom:50%;" /></a></p><h2 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h2><p>这次了解我上面只有一个HelloWord的时候，为什么不让右键新建，<strong>因为需要命令生成啊，铁汁！</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-deployer-git</span><br><span class="line"></span><br><span class="line">hexo new post &quot;新建博客文章名&quot;</span><br><span class="line"></span><br><span class="line">hexo cl &amp;&amp; hexo g  &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><h2 id="hexo更换背景图片"><a href="#hexo更换背景图片" class="headerlink" title="hexo更换背景图片"></a>hexo更换背景图片</h2><p>背景图片参考网址：</p><ul><li><a href="https://wallhaven.cc/">https://wallhaven.cc/</a></li><li><a href="https://wall.alphacoders.com/">https://wall.alphacoders.com/</a></li><li><a href="https://bz.zzzmh.cn/index">https://bz.zzzmh.cn/index</a></li></ul><p><em>本方法解决的是多次同步到GitHub上背景图片未成功的情况</em></p><p>直接更改原文件</p><p>图片所在目录：<code>hexo/themes/landscape/source/css/images/</code></p><p>图片名称：<code>banner.jpg</code></p><h2 id="⭐主题美化"><a href="#⭐主题美化" class="headerlink" title="⭐主题美化"></a>⭐主题美化</h2><p>芜湖，想做到和我主页一样的动态标题(网页崩溃欺骗)和透明页面吗</p><p>Let’s get started!</p><img src="http://qiniu.hanvon.top/blog_article/Blog_building/image-20231101154515640.png" style="zoom:80%;" /><img src="http://qiniu.hanvon.top/blog_article/Blog_building/image-20231101155107655.png" alt="path" style="zoom:80%;" /><p>一定要放在博客根目录下的source下，没有就新建一个</p><p>然后在\themes\butterfly\中的_config.yml文件下查找injection，将自己新建的文件路径添加进去</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Inject</span></span><br><span class="line"><span class="comment"># Insert the code to head (before &#x27;&lt;/head&gt;&#x27; tag) and the bottom (before &#x27;&lt;/body&gt;&#x27; tag)</span></span><br><span class="line"><span class="comment"># 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前</span></span><br><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/transpancy.css&quot;&gt;</span></span><br><span class="line">    <span class="comment"># - &lt;link rel=&quot;stylesheet&quot; href=&quot;/xxx.css&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;/js/cheat.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">    <span class="comment"># - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><img src="http://qiniu.hanvon.top/blog_article/Blog_building/image-20231101154311035.png" alt="image-20231101154311035" style="zoom:80%;" /><h3 id="动态标题"><a href="#动态标题" class="headerlink" title="动态标题"></a>动态标题</h3><p><code>cheat.js</code>的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动态标题</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">OriginTitile</span> = <span class="variable language_">document</span>.<span class="property">title</span>;</span><br><span class="line"><span class="keyword">var</span> titleTime;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;visibilitychange&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">hidden</span>) &#123;</span><br><span class="line">        <span class="comment">//离开当前页面时标签显示内容</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;网页崩溃啦w(ﾟДﾟ)w ！&#x27;</span>;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(titleTime);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//返回当前页面时标签显示内容</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;♪(^∇^*)我又好啦！&#x27;</span> + <span class="title class_">OriginTitile</span>;</span><br><span class="line">        <span class="comment">//两秒后变回正常标题</span></span><br><span class="line">        titleTime = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">title</span> = <span class="title class_">OriginTitile</span>;</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="透明页面"><a href="#透明页面" class="headerlink" title="透明页面"></a>透明页面</h3><p><code>transpancy.css</code>的代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 文章页背景 */</span></span><br><span class="line"><span class="selector-class">.layout_post</span>&gt;<span class="selector-id">#post</span> &#123;</span><br><span class="line">    <span class="comment">/* 以下代表透明度为0.7 可以自行修改*/</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,.<span class="number">7</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 所有页面背景 */</span></span><br><span class="line"><span class="selector-id">#aside_content</span> <span class="selector-class">.card-widget</span>, <span class="selector-id">#recent-posts</span>&gt;<span class="selector-class">.recent-post-item</span>, <span class="selector-class">.layout_page</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:first</span>-child<span class="selector-pseudo">:not</span>(<span class="selector-class">.recent-posts</span>), <span class="selector-class">.layout_post</span>&gt;<span class="selector-id">#page</span>, <span class="selector-class">.layout_post</span>&gt;<span class="selector-id">#post</span>, <span class="selector-class">.read-mode</span> <span class="selector-class">.layout_post</span>&gt;<span class="selector-id">#post</span>&#123;</span><br><span class="line">    <span class="comment">/* 以下代表透明度为0.7 */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,.<span class="number">7</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*侧边卡片的透明度 */</span></span><br><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--card-bg</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">7</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 页脚透明 */</span></span><br><span class="line"><span class="selector-id">#footer</span> &#123;</span><br><span class="line">    <span class="comment">/* 以下代表透明度为0.5 */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>, .<span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>注意一件事：css要放在head；js要放在bottom。不能乱放！</code></p><p>参考：<a href="https://conzxy.github.io/2022/08/19/hexo/transparent_bg/">透明化</a>    <a href="https://blog.csdn.net/qq_44138925/article/details/128843200">透明化</a>    <a href="https://blog.csdn.net/qq_43740362/article/details/113790851?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-113790851-blog-128843200.235%5Ev38%5Epc_relevant_sort_base1&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-113790851-blog-128843200.235%5Ev38%5Epc_relevant_sort_base1&utm_relevant_index=5">渐变</a></p><h1 id="第三部分-绑定自己的域名"><a href="#第三部分-绑定自己的域名" class="headerlink" title="第三部分 绑定自己的域名"></a>第三部分 绑定自己的域名</h1><p>博客地址：<a href="https://www.likecs.com/show-30474.html">https://www.likecs.com/show-30474.html</a></p><p><strong>绑定之后你就有有一个自己专属的博客了。</strong></p><p>买一个域名，可以一块钱白嫖，但是续费贵的飞天！！！</p><p><em><strong>注意请谨慎绑定，想我就会出现提交一次 (hexo d) ,需要重新绑定域名</strong></em></p><h1 id="图床："><a href="#图床：" class="headerlink" title="图床："></a>图床：</h1><p>我试了两种：GitHub和七牛云</p><p>我想说，如果你有自己的域名。可以选择七牛云，相比GitHub来说快很多</p><img src="http://qiniu.hanvon.top/blog_article/Blog_building/202310311350299.png" alt="image-20231031135024267" style="zoom: 67%;" /><img src="http://qiniu.hanvon.top/blog_article/Blog_building/202310311352581.png" alt="image-20231031135228551" style="zoom: 67%;" /><img src="http://qiniu.hanvon.top/blog_article/Blog_building/202310311353997.png" alt="image-20231031135328962" style="zoom: 67%;" /><img src="http://qiniu.hanvon.top/blog_article/Blog_building/202310311354876.png" alt="image-20231031135414847" style="zoom:67%;" /><img src="http://qiniu.hanvon.top/blog_article/Blog_building/202310311401584.png" alt="image-20231031140102545" style="zoom:67%;" /><img src="http://qiniu.hanvon.top/blog_article/Blog_building/202310311404397.png" alt="image-20231031140446365" style="zoom:67%;" /><img src="http://qiniu.hanvon.top/blog_article/Blog_building/202310311409077.png" alt="image-20231031140957036" style="zoom:67%;" /><p>进行到这一步就成功喽</p><p>下一步，去PicGo设置：</p><img src="http://qiniu.hanvon.top/blog_article/Blog_building/202310311408731.png" alt="image-20231031140821695" style="zoom:67%;" /><p><a href="https://www.cnblogs.com/skuld-yi/p/14533794.html">https://www.cnblogs.com/skuld-yi/p/14533794.html</a></p><p>—大部分转载至 武师叔</p><p>关注公众号武师叔————————–回复博客————————-即可获得博客PDF文件</p>]]></content>
      
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> 博客美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/16107.html"/>
      <url>/post/16107.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-github搭建个人博客"><a href="#Hexo-github搭建个人博客" class="headerlink" title="Hexo+github搭建个人博客"></a>Hexo+github搭建个人博客</h1><h2 id="一、搭建"><a href="#一、搭建" class="headerlink" title="一、搭建"></a>一、搭建</h2><h3 id="1、视频教程："><a href="#1、视频教程：" class="headerlink" title="1、视频教程："></a>1、视频教程：</h3><h3 id="2、简易文本教程："><a href="#2、简易文本教程：" class="headerlink" title="2、简易文本教程："></a>2、简易文本教程：</h3><ul><li><h4 id="安装并配置Node-js"><a href="#安装并配置Node-js" class="headerlink" title="安装并配置Node.js"></a>安装并配置Node.js</h4></li><li><h4 id="安装并配置Git"><a href="#安装并配置Git" class="headerlink" title="安装并配置Git"></a>安装并配置Git</h4></li><li><h4 id="生成SSH-Keys"><a href="#生成SSH-Keys" class="headerlink" title="生成SSH Keys"></a>生成SSH Keys</h4><p>a. 空白处右击，打开Git Bash，输入<code>ssh-keygen -t rsa -C &quot;你的邮箱地址&quot;</code> (将邮箱改为自己的) 敲四次回车；</p><p>b. 在<code>C:\Users\admin\.ssh</code>(admin更改为你自己的用户名)，找到”<code>id_rsa.pub</code>”文件，打开，复制秘钥</p><p>c. 打开”Github” -&gt; “seetings” -&gt; “SSH and Gpg Keys” -&gt; 点击”New SSH key”, -&gt; Title随便，将密匙复制到key -&gt; Add SSH key</p><p>d. 在Git Bash中输入<code>ssh -T git@github.com</code> (无需更改) 测试ssh是否绑定成功, 输入 yes 回车</p></li><li><h4 id="本地访问博客"><a href="#本地访问博客" class="headerlink" title="本地访问博客"></a>本地访问博客</h4><p>1、创建一个名为 Blog 的文件，在里面启用 Git Bash Here</p><p>2、输入hexo init初始化hexo</p><p>3、输入hexo s生成本地的hexo页面</p><p>4、将网址输入浏览器即可访问博客，Ctrl + c停用</p></li><li><h4 id="上到Github"><a href="#上到Github" class="headerlink" title="上到Github"></a>上到Github</h4></li></ul><p>修改-config.yml文件，在文件最后添加：(注意冒号后需添加一个半角的空格)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: 你的github地址</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><p>启用 Git Bash Here，输入<code>npm install hexo-deployer-git --save</code>安装hexo-deployer-git 自动部署发布工具</p><p>输入<code>hexo g</code>生成页面</p><p>输入<code>hexo d</code>本地文件部署到Github上面</p><p>在浏览器中输入<a href="https://wild-civil.github.io/%E8%AE%BF%E9%97%AEGitHub%E5%8D%9A%E5%AE%A2">https://wild-civil.github.io/访问GitHub博客</a> (请将wild-civil改为自己的github用户名)</p><p>文本教程：<a href="https://dhndzwxj.vercel.app/3276806131.html">https://dhndzwxj.vercel.app/3276806131.html</a></p><p>hexo标签教程：<a href="http://haiyong.site/post/cda958f2.html">http://haiyong.site/post/cda958f2.html</a> (很棒的教程)</p><p>自定义 js、css等的添加：<a href="http://www.gocit.cn/posts/5.html">http://www.gocit.cn/posts/5.html</a></p><p><a href="https://www.wxnacy.com/2017/12/12/hexo-cust-js/">https://www.wxnacy.com/2017/12/12/hexo-cust-js/</a></p><h2 id="二、Quick-Start"><a href="#二、Quick-Start" class="headerlink" title="二、Quick Start"></a>二、Quick Start</h2><h4 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &quot;My New Post&quot;</span><br></pre></td></tr></table></figure><p>也可输入<code>hexo n</code></p><p>More info: Writing</p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>也可输入<code>hexo s</code></p><p>More info: Server</p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>也可输入<code>hexo g</code></p><p>More info: Generating</p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>也可输入<code>hexo d</code></p><p>More info: Deployment</p><p>hexo更换背景图片 背景图片参考网址：</p><p><a href="https://wallhaven.cc/">https://wallhaven.cc/</a> <a href="https://wall.alphacoders.com/">https://wall.alphacoders.com/</a> <a href="https://bz.zzzmh.cn/index">https://bz.zzzmh.cn/index</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
