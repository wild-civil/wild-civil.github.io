{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":0},{"_id":"source/images/dragon_and_knight.jpg","path":"images/dragon_and_knight.jpg","modified":0,"renderable":0},{"_id":"source/images/dragon_and_knight_full.jpg","path":"images/dragon_and_knight_full.jpg","modified":0,"renderable":0},{"_id":"source/images/mountain.jpg","path":"images/mountain.jpg","modified":0,"renderable":0},{"_id":"source/images/praire.jpg","path":"images/praire.jpg","modified":0,"renderable":0},{"_id":"source/images/wechat.jpg","path":"images/wechat.jpg","modified":0,"renderable":0},{"_id":"source/nginx-1.22.0/nginx.exe","path":"nginx-1.22.0/nginx.exe","modified":0,"renderable":0},{"_id":"source/images/background/beautymoon.jpg","path":"images/background/beautymoon.jpg","modified":0,"renderable":0},{"_id":"source/images/background/web_background.jpg","path":"images/background/web_background.jpg","modified":0,"renderable":0},{"_id":"source/images/background/yeguangyun.jpg","path":"images/background/yeguangyun.jpg","modified":0,"renderable":0},{"_id":"source/images/background/yizhigiraffe.jpg","path":"images/background/yizhigiraffe.jpg","modified":0,"renderable":0},{"_id":"source/images/pictures_in_documents/git.png","path":"images/pictures_in_documents/git.png","modified":0,"renderable":0},{"_id":"source/nginx-1.22.0/conf/fastcgi.conf","path":"nginx-1.22.0/conf/fastcgi.conf","modified":0,"renderable":0},{"_id":"source/nginx-1.22.0/conf/fastcgi_params","path":"nginx-1.22.0/conf/fastcgi_params","modified":0,"renderable":0},{"_id":"source/nginx-1.22.0/conf/koi-utf","path":"nginx-1.22.0/conf/koi-utf","modified":0,"renderable":0},{"_id":"source/nginx-1.22.0/conf/koi-win","path":"nginx-1.22.0/conf/koi-win","modified":0,"renderable":0},{"_id":"source/nginx-1.22.0/conf/mime.types","path":"nginx-1.22.0/conf/mime.types","modified":0,"renderable":0},{"_id":"source/nginx-1.22.0/conf/nginx.conf","path":"nginx-1.22.0/conf/nginx.conf","modified":0,"renderable":0},{"_id":"source/nginx-1.22.0/conf/scgi_params","path":"nginx-1.22.0/conf/scgi_params","modified":0,"renderable":0},{"_id":"source/nginx-1.22.0/conf/uwsgi_params","path":"nginx-1.22.0/conf/uwsgi_params","modified":0,"renderable":0},{"_id":"source/nginx-1.22.0/conf/win-utf","path":"nginx-1.22.0/conf/win-utf","modified":0,"renderable":0},{"_id":"source/nginx-1.22.0/contrib/README","path":"nginx-1.22.0/contrib/README","modified":0,"renderable":0},{"_id":"source/nginx-1.22.0/contrib/geo2nginx.pl","path":"nginx-1.22.0/contrib/geo2nginx.pl","modified":0,"renderable":0},{"_id":"source/nginx-1.22.0/docs/CHANGES","path":"nginx-1.22.0/docs/CHANGES","modified":0,"renderable":0},{"_id":"source/nginx-1.22.0/docs/CHANGES.ru","path":"nginx-1.22.0/docs/CHANGES.ru","modified":0,"renderable":0},{"_id":"source/nginx-1.22.0/docs/LICENSE","path":"nginx-1.22.0/docs/LICENSE","modified":0,"renderable":0},{"_id":"source/nginx-1.22.0/docs/OpenSSL.LICENSE","path":"nginx-1.22.0/docs/OpenSSL.LICENSE","modified":0,"renderable":0},{"_id":"source/nginx-1.22.0/docs/PCRE.LICENCE","path":"nginx-1.22.0/docs/PCRE.LICENCE","modified":0,"renderable":0},{"_id":"source/nginx-1.22.0/docs/README","path":"nginx-1.22.0/docs/README","modified":0,"renderable":0},{"_id":"source/nginx-1.22.0/docs/zlib.LICENSE","path":"nginx-1.22.0/docs/zlib.LICENSE","modified":0,"renderable":0},{"_id":"source/nginx-1.22.0/logs/access.log","path":"nginx-1.22.0/logs/access.log","modified":0,"renderable":0},{"_id":"source/nginx-1.22.0/logs/error.log","path":"nginx-1.22.0/logs/error.log","modified":0,"renderable":0},{"_id":"source/nginx-1.22.0/logs/nginx.pid","path":"nginx-1.22.0/logs/nginx.pid","modified":0,"renderable":0},{"_id":"source/images/pictures_in_documents/IIC/ACK.jpg","path":"images/pictures_in_documents/IIC/ACK.jpg","modified":0,"renderable":0},{"_id":"source/images/pictures_in_documents/IIC/iic时序.jpg","path":"images/pictures_in_documents/IIC/iic时序.jpg","modified":0,"renderable":0},{"_id":"source/images/pictures_in_documents/IIC/IIC总线物理拓扑.jpg","path":"images/pictures_in_documents/IIC/IIC总线物理拓扑.jpg","modified":0,"renderable":0},{"_id":"source/images/pictures_in_documents/IIC/delay_time.jpg","path":"images/pictures_in_documents/IIC/delay_time.jpg","modified":0,"renderable":0},{"_id":"source/images/pictures_in_documents/IIC/rw_data.jpg","path":"images/pictures_in_documents/IIC/rw_data.jpg","modified":0,"renderable":0},{"_id":"source/images/pictures_in_documents/IIC/shixutu.jpg","path":"images/pictures_in_documents/IIC/shixutu.jpg","modified":0,"renderable":0},{"_id":"source/images/pictures_in_documents/IIC/stable.jpg","path":"images/pictures_in_documents/IIC/stable.jpg","modified":0,"renderable":0},{"_id":"source/images/pictures_in_documents/IIC/start_stop.jpg","path":"images/pictures_in_documents/IIC/start_stop.jpg","modified":0,"renderable":0},{"_id":"source/images/pictures_in_documents/IIC/r_data.jpg","path":"images/pictures_in_documents/IIC/r_data.jpg","modified":0,"renderable":0},{"_id":"source/images/pictures_in_documents/IIC/w_data.jpg","path":"images/pictures_in_documents/IIC/w_data.jpg","modified":0,"renderable":0},{"_id":"source/images/pictures_in_documents/vi编辑器基本命令/vi.jpg","path":"images/pictures_in_documents/vi编辑器基本命令/vi.jpg","modified":0,"renderable":0},{"_id":"source/images/pictures_in_documents/学物联网-NodeMCU-一/esp8266_devkit_horizontal-002.png","path":"images/pictures_in_documents/学物联网-NodeMCU-一/esp8266_devkit_horizontal-002.png","modified":0,"renderable":0},{"_id":"source/images/pictures_in_documents/学物联网-NodeMCU-一/esp8266_devkit_horizontal-flash-pins.png","path":"images/pictures_in_documents/学物联网-NodeMCU-一/esp8266_devkit_horizontal-flash-pins.png","modified":0,"renderable":0},{"_id":"source/images/pictures_in_documents/学物联网-NodeMCU-一/nodemcu-pin-GPIO_001.png","path":"images/pictures_in_documents/学物联网-NodeMCU-一/nodemcu-pin-GPIO_001.png","modified":0,"renderable":0},{"_id":"source/images/pictures_in_documents/学物联网-NodeMCU-一/nodemcu-pin-number.jpg","path":"images/pictures_in_documents/学物联网-NodeMCU-一/nodemcu-pin-number.jpg","modified":0,"renderable":0},{"_id":"source/images/pictures_in_documents/学物联网-NodeMCU-二/TCP_IP协议簇.jpg","path":"images/pictures_in_documents/学物联网-NodeMCU-二/TCP_IP协议簇.jpg","modified":0,"renderable":0},{"_id":"source/images/pictures_in_documents/学物联网-NodeMCU-一/nodemcu_pinLocation.jpg","path":"images/pictures_in_documents/学物联网-NodeMCU-一/nodemcu_pinLocation.jpg","modified":0,"renderable":0},{"_id":"source/images/pictures_in_documents/学物联网-NodeMCU-五/esp8266fs-download.jpg","path":"images/pictures_in_documents/学物联网-NodeMCU-五/esp8266fs-download.jpg","modified":0,"renderable":0},{"_id":"source/nginx-1.22.0/contrib/unicode2nginx/koi-utf","path":"nginx-1.22.0/contrib/unicode2nginx/koi-utf","modified":0,"renderable":0},{"_id":"source/nginx-1.22.0/contrib/unicode2nginx/unicode-to-nginx.pl","path":"nginx-1.22.0/contrib/unicode2nginx/unicode-to-nginx.pl","modified":0,"renderable":0},{"_id":"source/nginx-1.22.0/contrib/unicode2nginx/win-utf","path":"nginx-1.22.0/contrib/unicode2nginx/win-utf","modified":0,"renderable":0},{"_id":"source/nginx-1.22.0/contrib/vim/ftdetect/nginx.vim","path":"nginx-1.22.0/contrib/vim/ftdetect/nginx.vim","modified":0,"renderable":0},{"_id":"source/nginx-1.22.0/contrib/vim/ftplugin/nginx.vim","path":"nginx-1.22.0/contrib/vim/ftplugin/nginx.vim","modified":0,"renderable":0},{"_id":"source/nginx-1.22.0/contrib/vim/syntax/nginx.vim","path":"nginx-1.22.0/contrib/vim/syntax/nginx.vim","modified":0,"renderable":0},{"_id":"source/nginx-1.22.0/contrib/vim/indent/nginx.vim","path":"nginx-1.22.0/contrib/vim/indent/nginx.vim","modified":0,"renderable":0}],"Cache":[{"_id":"source/nginx-1.22.0/logs/access.log","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1664638457786},{"_id":"source/nginx-1.22.0/logs/error.log","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1664638471659},{"_id":"source/_data/link.yml","hash":"bcc8391e6c82ad62d9c2cd1769afcbd275639608","modified":1664638456400},{"_id":"source/categories/index.md","hash":"51d22723e9455464f0af1a0ea9c0243f09f7a750","modified":1664638464552},{"_id":"source/_posts/Android-studio 七天入门 记录.md","hash":"9af38d49adcb17fe97d8cfa7efea0094a68fbbff","modified":1664638456352},{"_id":"source/_posts/Git实战.md","hash":"db0d8bdc255797be9b4e74b41d38e81c0bca11ec","modified":1698820885654},{"_id":"source/_posts/hello-world.md","hash":"06c4b088621d62ffeda34edbf1628cec1fe049ce","modified":1698820935438},{"_id":"source/_posts/hexo-github搭建个人博客.md","hash":"145d8e398d9bd63a566fb8988a9b34b3d025d360","modified":1698826041169},{"_id":"source/_posts/image-20231101154126264.png","hash":"317387ae5d209be843e9cd1aaaebef839475e28c","modified":1698824486275},{"_id":"source/_posts/image-20231101154311035.png","hash":"fb8a4efc2e727587100840332363382949137ea4","modified":1698824591048},{"_id":"source/_posts/image-20231101154515640.png","hash":"88ecfd1e2a81a79ba771cb35ee9622c538fe9553","modified":1698824715650},{"_id":"source/_posts/image-20231101155107655.png","hash":"251540ae26e9515329ec51145933a8e8e93a045a","modified":1698825067663},{"_id":"source/_posts/vi编辑器基本命令.md","hash":"205edbd6f2f7adbf9411b0793f6e7a8dccd7a02b","modified":1698820876707},{"_id":"source/_posts/matlab.md","hash":"e65e0838173b7207ee229a733741986da7be474d","modified":1698821626395},{"_id":"source/_posts/学物联网-NodeMCU-一.md","hash":"23af81359fc192dbd2c8825466ea54ce3115af90","modified":1698810308937},{"_id":"source/_posts/学物联网-NodeMCU-三.md","hash":"6c06f92969383d6a456771c07d5e9a405198d345","modified":1698811847594},{"_id":"source/_posts/学物联网-NodeMCU-二.md","hash":"1c0e16f8dc1198210bf6de23994e80b893ab63a3","modified":1698809921702},{"_id":"source/_posts/学物联网-NodeMCU-五.md","hash":"530b420c71722bf2159e9834f4250f630d8f193b","modified":1698811818018},{"_id":"source/_posts/学物联网-NodeMCU-四.md","hash":"4d17262a129c959ff2d9d44e9a27ac9015a354d4","modified":1698811079882},{"_id":"source/_posts/磨刀不误砍柴工.md","hash":"cf3b7af57be3f5627152a9c6bf0348256f9cbbf9","modified":1698634009000},{"_id":"source/_posts/粗学IIC.md","hash":"b92dab51b83e75362fa68866398d044ad33c6b3a","modified":1698821593940},{"_id":"source/js/cheat.js","hash":"42bbc4a75edc835cecd0571012c5f425376ec8f5","modified":1667288937000},{"_id":"source/images/alipay.jpg","hash":"1cc0adb430fcc41036e1d1772fa0d04d8fbca017","modified":1664638441074},{"_id":"source/images/dragon_and_knight.jpg","hash":"55c77d217350ce6fa09c1c7362674227c543a70e","modified":1664638440978},{"_id":"source/images/dragon_and_knight_full.jpg","hash":"c7e5fd50a7c37e20e1a2cc4687c37b43cad2deab","modified":1698821878146},{"_id":"source/link/index.md","hash":"314044e041fea5fc89345e7165d16e702ceb9673","modified":1664638464448},{"_id":"source/css/transpancy.css","hash":"bb2f53e6b5cacc998c2702268fcf7a315dbbcee1","modified":1698826406719},{"_id":"source/tags/index.md","hash":"465d689f0fe880ad744ebf2fb32aa26d4fa3bb63","modified":1664638456512},{"_id":"source/images/pictures_in_documents/git.png","hash":"d444dd970d0c211454a155891395b6f1263da370","modified":1698763485171},{"_id":"source/nginx-1.22.0/conf/fastcgi.conf","hash":"5b545f270a785bf6f03ab396e94ed2f73c179fc5","modified":1664638464328},{"_id":"source/nginx-1.22.0/conf/fastcgi_params","hash":"44c362ede0a31c898498cbfd606e46b9f1f30bd5","modified":1664638464296},{"_id":"source/nginx-1.22.0/conf/koi-utf","hash":"5afe5f88c011cc41aef4e82a6e2bdcbf8d573ec5","modified":1664638464096},{"_id":"source/nginx-1.22.0/conf/koi-win","hash":"3fe28cd5b11c84d3df706e74012a581a989db4fc","modified":1664638464112},{"_id":"source/nginx-1.22.0/conf/mime.types","hash":"fd2ce3ef17c7f703aab89d100387b258b3e9263e","modified":1664638463888},{"_id":"source/nginx-1.22.0/conf/nginx.conf","hash":"1776203af2f49bcd98ab661828570eb0fc373692","modified":1664638463600},{"_id":"source/nginx-1.22.0/conf/scgi_params","hash":"fa0c2e3e2f256b65de0710a2b727046bff41ea39","modified":1664638463600},{"_id":"source/nginx-1.22.0/conf/uwsgi_params","hash":"a43fb0f39bf214962fe58d59844446100a2d698c","modified":1664638463920},{"_id":"source/nginx-1.22.0/conf/win-utf","hash":"925a725cc43a5b881113c9fd671b4d368be42704","modified":1664638463440},{"_id":"source/nginx-1.22.0/contrib/README","hash":"dd031bbdd8f2885ffe5a57a3b9faa8640d040b07","modified":1664638458290},{"_id":"source/nginx-1.22.0/contrib/geo2nginx.pl","hash":"f5b8473781ef13c55f9e9d4df3c615cb1fd58d05","modified":1664638458506},{"_id":"source/nginx-1.22.0/docs/LICENSE","hash":"de0ea043351e203ff16503c81a431405422ff3a1","modified":1664638462976},{"_id":"source/nginx-1.22.0/docs/OpenSSL.LICENSE","hash":"607e96d7bc75d9f884a8e210d276cca4006e0753","modified":1664638462864},{"_id":"source/nginx-1.22.0/docs/PCRE.LICENCE","hash":"cc7132d685cfac1cac53709962b52590e160450f","modified":1664638462808},{"_id":"source/nginx-1.22.0/docs/README","hash":"62e50dec0130ae0d88719d0025913773564460b4","modified":1664638462712},{"_id":"source/nginx-1.22.0/docs/zlib.LICENSE","hash":"01a3b77a9cae85a26984664bd3d7067013b16605","modified":1664638462640},{"_id":"source/nginx-1.22.0/html/50x.html","hash":"835b9dec419c01420e78602527a9fba8c463521c","modified":1664638458105},{"_id":"source/nginx-1.22.0/html/index.html","hash":"c51a3f0e6de4eb802d5630941c3fd9e1d0efae4b","modified":1664638457961},{"_id":"source/nginx-1.22.0/logs/nginx.pid","hash":"775319686ad831c83a9c473a0f19a78da295e593","modified":1664638457665},{"_id":"source/images/pictures_in_documents/IIC/ACK.jpg","hash":"27cc3861f8e40c5435400917bcf9a641ff5069a2","modified":1664638444272},{"_id":"source/images/pictures_in_documents/IIC/rw_data.jpg","hash":"f2604289849b642a3e23fd8f92c8b76f97cf804a","modified":1664638444688},{"_id":"source/images/pictures_in_documents/IIC/stable.jpg","hash":"e5022dff383a84f2f2292a85af7d2c86653a7fe5","modified":1664638443987},{"_id":"source/images/pictures_in_documents/IIC/w_data.jpg","hash":"4d01c813c145d65703e687c1c27c0cbcf3f711de","modified":1664638443723},{"_id":"source/images/pictures_in_documents/IIC/start_stop.jpg","hash":"2fefb94200b21e1ccee9e6faa292b36720838210","modified":1664638443755},{"_id":"source/images/pictures_in_documents/IIC/r_data.jpg","hash":"a629d32e3e219f8fb7cc86c22ce7d59b631bbe94","modified":1664638444271},{"_id":"source/images/pictures_in_documents/学物联网-NodeMCU-一/esp8266_devkit_horizontal-002.png","hash":"25adb340d65de21a7b19bd3d50bb58738e2f3dc1","modified":1664638443539},{"_id":"source/images/pictures_in_documents/学物联网-NodeMCU-一/esp8266_devkit_horizontal-flash-pins.png","hash":"ec5c1dec8331c5b47f5a8f3cbbff83da7b138ddf","modified":1664638442955},{"_id":"source/images/pictures_in_documents/学物联网-NodeMCU-一/nodemcu-pin-GPIO_001.png","hash":"5f9c4ffd46872358c6759039e7cc335db34d49a6","modified":1664638443395},{"_id":"source/images/pictures_in_documents/学物联网-NodeMCU-一/nodemcu-pin-number.jpg","hash":"79f6177ff5857b6a37d262942dba3f7cb1108eef","modified":1664638443203},{"_id":"source/nginx-1.22.0/contrib/unicode2nginx/koi-utf","hash":"f70df32d3dddbcb4654e76b9b7d2f98fa7e1821f","modified":1664638462560},{"_id":"source/nginx-1.22.0/contrib/unicode2nginx/unicode-to-nginx.pl","hash":"ef268a90eb276c39978296ea16f7129ca7d2528b","modified":1664638462400},{"_id":"source/nginx-1.22.0/contrib/unicode2nginx/win-utf","hash":"b51ae32efab92acbcff096a8b41f404120d2cd17","modified":1664638462504},{"_id":"source/nginx-1.22.0/contrib/vim/ftdetect/nginx.vim","hash":"af7d89670f0cd13b3657d6c15ec170434e645e1a","modified":1664638462145},{"_id":"source/nginx-1.22.0/contrib/vim/ftplugin/nginx.vim","hash":"e3a1d6f38495d2ef69bcdc1bbb44564e75f7c34a","modified":1664638461928},{"_id":"source/nginx-1.22.0/contrib/vim/indent/nginx.vim","hash":"ad50377b0f08adda4be4b8ca12300ecab4bbb26e","modified":1664638461960},{"_id":"source/images/wechat.jpg","hash":"1fc9200919e25fe3ae1e1875d80c282aef10380e","modified":1664638439370},{"_id":"source/images/pictures_in_documents/IIC/iic时序.jpg","hash":"bc4ff3377c9f6551bfb0c894aeee24590f8019fd","modified":1664638444760},{"_id":"source/images/pictures_in_documents/IIC/IIC总线物理拓扑.jpg","hash":"b63adcbb7ba8587f0ac7a95491cb8fe88431ab16","modified":1664638444995},{"_id":"source/images/pictures_in_documents/IIC/delay_time.jpg","hash":"3bed962f17feb148d6b3006f19cac9b3445e6393","modified":1664638445102},{"_id":"source/images/pictures_in_documents/IIC/shixutu.jpg","hash":"6005048d5b7fef320a7610802619d596297d25fd","modified":1664638444059},{"_id":"source/images/pictures_in_documents/学物联网-NodeMCU-二/TCP_IP协议簇.jpg","hash":"e24587dc5cb20ab5dc3fdf705c7fb9ad7f40fb59","modified":1664638441379},{"_id":"source/images/pictures_in_documents/vi编辑器基本命令/vi.jpg","hash":"741420a72abbd1144e1704501bcbf13bd5a8782e","modified":1664638445438},{"_id":"source/nginx-1.22.0/contrib/vim/syntax/nginx.vim","hash":"7b3acba5293ea533558e868775da1fa081449720","modified":1664638462288},{"_id":"source/images/pictures_in_documents/学物联网-NodeMCU-五/esp8266fs-download.jpg","hash":"c6e81f3947a40b851b0fb9770c79e9d503fc846c","modified":1664638441768},{"_id":"source/nginx-1.22.0/docs/CHANGES","hash":"26fa23bb069cb7e4938b1aee05d161d9469abcf1","modified":1664638463264},{"_id":"source/images/pictures_in_documents/学物联网-NodeMCU-一/nodemcu_pinLocation.jpg","hash":"41d8e12f995de3d3f9e9e0e25a3431923dda867e","modified":1664638443259},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1664638465508},{"_id":"themes/butterfly/README.md","hash":"851d8e3e0ba8d9da305eb2f2ec63221296c04080","modified":1664638465508},{"_id":"themes/butterfly/README_CN.md","hash":"c03bd24e375f0f9bbc4238d0ee9bae7f4db2f032","modified":1664638465067},{"_id":"themes/butterfly/_config.yml","hash":"62ed5e4d72fb60fc68f3dd80a77b3eea152ed098","modified":1698828004181},{"_id":"themes/butterfly/package.json","hash":"fcf19a2e42a7684dc4cab3e9b28b5f893296dc3b","modified":1664638465026},{"_id":"themes/butterfly/plugins.yml","hash":"57ed4bc4e74dd8fcbdb330a35a0bd1a0fafebab1","modified":1664638464800},{"_id":"themes/butterfly/languages/default.yml","hash":"335731ef259a3cec2499a2d5b050025ff4bdc608","modified":1664638484452},{"_id":"themes/butterfly/languages/en.yml","hash":"a96ab1bbe74e99ca2e4d67da9d83f442eb9b73af","modified":1664638484304},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"4adf079fb0170e3a8de6ddbb0392d6d1120030c4","modified":1664638484295},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"dcb10d62249bb149af8ad78db3ee6e342c6d6be7","modified":1664638484198},{"_id":"themes/butterfly/_git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1664638484948},{"_id":"themes/butterfly/_git/config","hash":"91c62ea141283fa516461bd0e3bbb54ca7695ecb","modified":1664638484796},{"_id":"themes/butterfly/_git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1664638484636},{"_id":"themes/butterfly/_git/index","hash":"49e4fc2e20a3ce68b4a5a50663ad5ea4193f034a","modified":1664638484692},{"_id":"themes/butterfly/_git/packed-refs","hash":"43d504220fc767eb375eec5f25b92e2b23347763","modified":1664638484564},{"_id":"themes/butterfly/layout/archive.pug","hash":"115fa5ee8864e5c97549eff91a17c66101d724ab","modified":1664638475994},{"_id":"themes/butterfly/layout/page.pug","hash":"bf2d6c6d2d156777b55292e51be02b0b3acf0af8","modified":1664638475876},{"_id":"themes/butterfly/layout/index.pug","hash":"648dcbdb3d145a710de81c909e000e8664d2ac9c","modified":1664638475984},{"_id":"themes/butterfly/layout/category.pug","hash":"bf979aec88d78b644fc5d31518f8679ad7625792","modified":1664638476185},{"_id":"themes/butterfly/layout/post.pug","hash":"fdbb508b5e6dec30fb8753c5a7fdd494410c4fc0","modified":1664638475734},{"_id":"themes/butterfly/layout/tag.pug","hash":"4bb5efc6dabdf1626685bf6771aaa1467155ae86","modified":1664638475779},{"_id":"themes/butterfly/_github/ISSUE_TEMPLATE/bug_report.yml","hash":"e1043b8f149371d5a4ab0f1306eabc2988bed071","modified":1664638475677},{"_id":"themes/butterfly/_github/ISSUE_TEMPLATE/config.yml","hash":"d9ff4bad9c9664e12729c7a531169a05698a3fd1","modified":1664638475519},{"_id":"themes/butterfly/_github/ISSUE_TEMPLATE/feature_request.yml","hash":"6e0f9470b18bd37d4891282ac73d61676b040e8c","modified":1664638475547},{"_id":"themes/butterfly/_github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1664638475492},{"_id":"themes/butterfly/_github/workflows/stale.yml","hash":"4040c76547e270aaf184e9b219a44ca41bbb1b9f","modified":1664638475391},{"_id":"themes/butterfly/_git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1664638486990},{"_id":"themes/butterfly/_git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1664638486780},{"_id":"themes/butterfly/_git/hooks/fsmonitor-watchman.sample","hash":"0ec0ec9ac11111433d17ea79e0ae8cec650dcfa4","modified":1664638486708},{"_id":"themes/butterfly/_git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1664638486660},{"_id":"themes/butterfly/_git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1664638486636},{"_id":"themes/butterfly/_git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1664638486492},{"_id":"themes/butterfly/_git/hooks/pre-commit.sample","hash":"a79d057388ee2c2fe6561d7697f1f5efcff96f23","modified":1664638486540},{"_id":"themes/butterfly/_git/hooks/pre-push.sample","hash":"a599b773b930ca83dbc3a5c7c13059ac4a6eaedc","modified":1664638485854},{"_id":"themes/butterfly/_git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1664638486324},{"_id":"themes/butterfly/_git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1664638486404},{"_id":"themes/butterfly/_git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1664638486236},{"_id":"themes/butterfly/_git/hooks/push-to-checkout.sample","hash":"508240328c8b55f8157c93c43bf5e291e5d2fbcb","modified":1664638486124},{"_id":"themes/butterfly/_git/hooks/update.sample","hash":"730e6bd5225478bab6147b7a62a6e2ae21d40507","modified":1664638485906},{"_id":"themes/butterfly/_git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1664638485638},{"_id":"themes/butterfly/_git/logs/HEAD","hash":"437f826f9b68a3761944014fc0d0cbfc5fd7b7ac","modified":1664638485222},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"aace9ddff469de4226e47a52ede1c81e66d66d5c","modified":1664638476233},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"ddea99847fd41323f183cd0c9dae3174c586f5b3","modified":1664638476631},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"8715948b93e7508b84d913be1969b28c6b067b9b","modified":1664638476907},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"1d0f1b84be352862046e780800d696e80ef1cdd1","modified":1664638476543},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"3d95525a6d809be2f2a1cd6b33d3b7ecc0457d62","modified":1664638476527},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"bb1847f45e713cc88b1c0a97035ec01f0209c995","modified":1664638476383},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"205562ec188bfba5686c51af77486550d0927df5","modified":1664638476431},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"4f41fc46410e1e3018ff87e1d1a5c28be7258119","modified":1664638476327},{"_id":"themes/butterfly/source/css/index.styl","hash":"c7924868adcb046b46498626a9223c7a7b3f2e30","modified":1664638468283},{"_id":"themes/butterfly/source/css/var.styl","hash":"584ef7b18d5e677eb2e62f9b139097d3b714a993","modified":1664638468147},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1664638466769},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1664638465772},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1664638467331},{"_id":"themes/butterfly/source/js/main.js","hash":"ad33ea0d321eb69f2713580128ef00094a8fb0f7","modified":1664638467034},{"_id":"themes/butterfly/source/js/utils.js","hash":"fdb9e5b38f076953a2431b8f682388b030694b55","modified":1664638467243},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"4db1170be7a9360e2c5399d281b979da730df2a3","modified":1664638467499},{"_id":"themes/butterfly/scripts/events/404.js","hash":"f1d1c378356b776e9b2a8411e6dca88dc8c3245c","modified":1664638474429},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"8e6f0677c190d44c64222054e2e7c065fc6c4802","modified":1664638474727},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"176332aa4d01728d0bd084e9b02c60167dc307dd","modified":1664638474190},{"_id":"themes/butterfly/scripts/events/init.js","hash":"b3e05e3440b078f57391c113d6b0c8ecff112720","modified":1664638474180},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"218add7e9b39b6fb6e69921abb9e44891a6cc3ce","modified":1664638474447},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"b92cc4648cfe5fb28c58943727823d1178b73a4a","modified":1664638474404},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"5fd6c9659262dc8f61d87866d0417fd534292c88","modified":1664638474159},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"6c3b7d0874fa499800a4fd49894c481b05ec750c","modified":1664638474052},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"4f712b4ea383b59a3122683db1d54c04a79ccc5d","modified":1664638475364},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"376e1884ea764404c38b1e73b16de0358ece519e","modified":1664638475162},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"db4f5971c27f49a4cb47d34729f4ddf9919d392b","modified":1664638475041},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"c445140fa16f19bf5fb617fa735504e7799d4d42","modified":1664638475026},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"c07efb04120914363b8de2c276ac5783b82db776","modified":1664638474815},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"83bfb16ab8d440be04e1b1f889f6affa7ad65a67","modified":1664638474735},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"44cca49ddc76921bb455465ef912cab46c993cef","modified":1664638473919},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"3ba7677969ff01fab06fc6713455ddc6861f0024","modified":1664638473370},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"6d4cd2393945a9316339351cab588265f5c18d73","modified":1664638473946},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"e01a3967e5884881bab858b11635457df412de80","modified":1664638473855},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"7641adb0d520c5ff29dd36fc1fb8617c52ecc9fb","modified":1664638473775},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"551f1b8edc973bd8afc5cce2eae546f002fa84c3","modified":1664638473721},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"fd683ccc090db3122d77c7ee73e8d35dc8735ee3","modified":1664638473618},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"08ea00791bd4738952234cb5d8360e119df6f875","modified":1664638473541},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"56a5d41487d74654b75305c5325167a116495900","modified":1664638473641},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"4c7056d3cd56f10bd209d2ba4d3cc2027aad1440","modified":1664638473338},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"07380718ed3af19a7e64b30e8c13726fe5983947","modified":1664638483796},{"_id":"themes/butterfly/_git/refs/heads/master","hash":"e74babd76e846dcb78d3f26ea62b9a1b3b607579","modified":1664638484956},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"c1e45d4d0bd905ddcd2282de4fe89be92e67847d","modified":1664638484006},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"8a3f9e674b44e6a92d4df22baca65d9d30007dc3","modified":1664638483628},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1664638483836},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"bd5dd5452e28a4fe94c3241a758ec6f4fdb7a149","modified":1664638483964},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"72efaa09ff60843567458bd54152e06f0cb2757e","modified":1664638483972},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"fc3e67e5ae4774d9e89964ba96beed28f34ee8f0","modified":1664638483676},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"6dc2c9b85df9ab4f5b554305339fd80a90a6cf43","modified":1664638483644},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1664638483484},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"ca8bcd90ad9467819330bfe7c02b76322754bccf","modified":1664638483428},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"631ec7000fd4d6cfa2de118ee02ad8a42ffb34f5","modified":1664638483340},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"4d9faa9291eb69b5862e4821101a1fd494cc00b5","modified":1698829197093},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"a9e56b1c41bf327859b0a7bcb8e72b458bd851b2","modified":1664638483468},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"50b4b9c7f6a4771910be4198639cfcfc6d7b8925","modified":1664638483236},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"2e1ab0c2ca59a1ff5a5ba9b6ef60f3e34af5430c","modified":1664638483092},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"971038debf539333b1687b4a1d87cf4fc965a846","modified":1664638482911},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"8b8e04d3d9462b3790ba17e5a865dab5a4740a73","modified":1664638482927},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"dd8e6813976be64e80eba6562b54e74527ab306d","modified":1664638483084},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1664638482743},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"e9459f122af7b733398578f9f0f8ab3c5e12a217","modified":1664638482687},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"8f43fdeaf8cff4a35bab74b48c963786ca015620","modified":1664638482695},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"e2eba0fcb8332cb333b2aff9c76664e40e2e1974","modified":1664638482623},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"cc1f7ae8a7ce5445277215821092e712ec8cc296","modified":1664638482545},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"594626a18b7efbf771232855dfbce143fb244bc6","modified":1664638482537},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"e939344fd389aeb11864ee697d5fd9b036d8325f","modified":1664638477837},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"4e37535c63149708ecbedb262336014524ad8723","modified":1664638478106},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"f0898509da70388b5c532f19e762756d74080200","modified":1664638477797},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"4e026840c915327e45331e63e4b7ef287e871204","modified":1664638477998},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"08979afbfecb4476a5ae8e360947b92624d285b8","modified":1664638477957},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"d561d36229692e2c8a9ee45a7c24c0c2b3599170","modified":1664638477909},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1664638477693},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1664638477532},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1664638477580},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1664638477500},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1664638477396},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"08641633d38903351a7424baf9893d9038ba057d","modified":1664638477052},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"c02b1779bd0ebca6749f195be096b6ca574bfa29","modified":1664638477292},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"59d979702fa21d960443824198614d63aaf69662","modified":1664638477156},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"471b20e71a19db1f5115727082e5188200c49383","modified":1664638477244},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"12185713f9ca08984fc74e3b69d8cd6828d23da8","modified":1664638476811},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1664638477044},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"9755cac8424dc578e9ec07dbcaa429fddbedd392","modified":1664638477284},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"5e0e9e9b2cd3c256d52423e2278e790aa387a53a","modified":1664638476771},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"f562648de515abc873609bfe9b9f799c8cf42b72","modified":1664638473322},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"b9d7d23dc8810542b8c8ffcbfbd3694318debcc6","modified":1664638473037},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"a2aa5caf338ff5323b6ff0601ebcc09e710d8398","modified":1664638472542},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"af6e3357b8f6df18d0775b8352551c0f8ce38e55","modified":1664638472454},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"3c178608406c31d768af355ef1d7326da37cc75f","modified":1664638472494},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"792a04d36de32f230ca3256ad87a90fe8392f333","modified":1664638471907},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"0abe05309a186682772a94e5e759b63f8028e61a","modified":1664638472350},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"612d2f8a53141b353078f2a3405d8d44a79d9558","modified":1664638471971},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"e931ef81754a7b9d999fa23d134c620e68e75491","modified":1664638472249},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"6dcf19c0933c8828a439f801b0f4b256447dec07","modified":1664638471971},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"9f880a6fa91784a4d3e9ffb0d4607e8a74d4d929","modified":1664638472105},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"844858ae87c7278996ce484c6b456db354c48764","modified":1664638472225},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"bd099f7d3adef4b7edd24c0a25a07415b156e587","modified":1664638472185},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"b5ba2c3339ad406ce611d12d3f8cc84f864fbc03","modified":1664638471755},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"1c1c585ba99cb4004956b5e98fc044260b456f99","modified":1664638471675},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"7e9b65dcae7ac54e0183bc841fea0f4bd4d78e5c","modified":1664638471587},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"e02b52bdd337c0ed3c9d3a507d1011403c38881d","modified":1664638471523},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"5dabc3a5330cc28f0666d1cd8db0d67f553fd854","modified":1664638471398},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"1fed25162d7204480e9bcf476b3246e1717107ca","modified":1664638471262},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"a7223a8fcc4fa7b81e552c9a2554be7df9de312e","modified":1664638471174},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"d72218cb5a6bfe048ae1c92009bd815a08a53d3a","modified":1664638471062},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"68bc8cbea25dbb3cdc170f09f9b43ce130547717","modified":1664638470909},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"a714776e3d585369f2285b6bb4e1564539c58d8b","modified":1664638470773},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"6d2a841c7656fb28b1e15afe1d7dda56c424b7d7","modified":1664638470933},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"ecc2b2e28c179eb9406fc2c6f00e141078249cdd","modified":1664638470469},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"9e35f91847773b915c74a78b8aa66c7bdb950ad0","modified":1664638470413},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"d1398399eb7f1cc004fbcefa18f56188cc8fec8c","modified":1664638470069},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"cced94e70b4b90130cfa215582be2adbf883efba","modified":1664638470221},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"45792c13c7c439d412b7dc597d74d24f3b598406","modified":1664638470205},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"62da1de0d5b8453fcecbfacddb16985265638ba5","modified":1664638470021},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"84c42716e833d2d1dd47195ea996803ffa0e58ec","modified":1664638469887},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1664638469735},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"b7cf7753479fcf2fe07287ffdb0e568adbba4c18","modified":1664638469599},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"5a873d01fabebcf7ddf7a6b1c2e2e5e2714097f4","modified":1664638469775},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"2f83bd145b870d80d4b18b0ac603235229a5694e","modified":1664638469415},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"331c89ecfb79fab68466944a43e9e3d0ff49c646","modified":1664638469279},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"ec81ea316c82b83d6aee31e52f248d329559d5d3","modified":1664638468891},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"07ea7134db7a66c87658116f089fb1a2a6906563","modified":1664638468715},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1664638468435},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"d0d60008ef4ff74298ff062878766f194a2e4a70","modified":1664638467563},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"f72e002d56903a49c36174e77e42f88b8af8bd44","modified":1664638469343},{"_id":"themes/butterfly/_git/logs/refs/heads/master","hash":"437f826f9b68a3761944014fc0d0cbfc5fd7b7ac","modified":1664638485598},{"_id":"themes/butterfly/_git/refs/remotes/origin/HEAD","hash":"2c142208129b78a4616cbb6798f96f4fb3580296","modified":1664638485009},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"f3f6eaecbcf9352342e259f4a5a3ad7160f31fc9","modified":1664638481602},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"b741b5e942481d779a8a1fe94c45154a62a6b748","modified":1664638481482},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"794ce3911f17d354b7196deb8c36d191afac63fb","modified":1664638481133},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"e5af55cdb87d1ffd3d8702bc77097159acf95b54","modified":1664638481325},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"a5ddcf84ce8855c7801289270009e29c3a103150","modified":1664638481482},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"e657b87b721b6ef9149686630a205f4ebb7f2716","modified":1664638481189},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"cd7ab4a776be93eea96a6f6fd0a547977fbe1ea3","modified":1664638481109},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"55f7c144e4ef7a7f317bcdab8044fd8f89bdd5d9","modified":1664638480828},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"8c16214a610ff8087628f32d005a1b0aab3bb910","modified":1664638481005},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"c83f37e9618fbc03ecab25db54f14dbbf9e7ce10","modified":1664638480716},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"319463fc8ff993b798f2293b659b522ad7770cf0","modified":1664638480836},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"3b551ab7618b36795480015b5cf565288df5b957","modified":1664638480564},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"3df2f59c9552a1f2e6f0d50c4ae97e72c5392b59","modified":1664638480572},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"5b44b4e5f2445260811de81edd3eeeb97d8bb583","modified":1664638480164},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1664638479879},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"589f8503f264d4fda971c8daf2028f45c4f2867b","modified":1664638480428},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"f04263a3bd7efb7f1b250cfee112e82f49805492","modified":1664638480292},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"ccb5c3f2a821b87986998595743387d7c997c16e","modified":1664638480164},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"d48d59ebf8c0142fb3c4592a0d35874f85e6fd4c","modified":1664638480011},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"cba55cbbd0962bf84b8956195e686b0e158ed247","modified":1664638479879},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"e45152e4ebc3fb2462916be93f98d18f0574f2d3","modified":1664638479727},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"645087801624a73cbee63269cfd399e9da39c663","modified":1664638481778},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"f4d21dcbc3b00eed9b1f604e132c4c6811a0a059","modified":1664638482273},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"dfbec0a99e38ebeac46931121b3a70b9a1e34b79","modified":1664638482073},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1664638481842},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1664638482273},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"38b85d216d9377ddbaa2e5867e2f03805227237c","modified":1664638482273},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"cd4fc9c5a61608a5dedf645c1295430a1623040f","modified":1664638482000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"6e5ccc9ea4346c71ad4cbf1e9f1cb83bb45e6f27","modified":1664638481818},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"2afa4c21dd19890f47fb568cfb0d90efb676a253","modified":1664638479603},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"f0d3eddd2bed68e5517274b3530bfe0fa5057d8e","modified":1664638479603},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"056756e43908519039b8bbd7a90f8c49d561eb52","modified":1664638479539},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"297d34d83e7bff8ec3b8bc19bb0f4d901c35fe5a","modified":1664638479331},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"77ac27a24b8347668c4df9d5c44c9461c69eaec9","modified":1664638479331},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"cd1ce86441dc508e4c3dbf8b829046455ba8a6b4","modified":1664638478759},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"b2ede1f6b41026ebd233ac076a405889a6eec76b","modified":1664638478903},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"91a72e94743befa21a7b1c557fbb3751efb87ab0","modified":1664638479007},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"33368c0b80e4c4e78f3c7ee9bec0fed70ad838ca","modified":1664638478943},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f8b65460c399973090c1fb7ab81e3708c252e7cc","modified":1664638479095},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"bc207dcb771fc2c2c329f29d01708ff6b18443da","modified":1664638479331},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"63ef0b2a75cf26a94c5bcd885f3a1c144451b852","modified":1664638478575},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"8b4034e53ca5bf85097f681a6e76a53ce685c205","modified":1664638478474},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"1f02a26730e5f36cc2dfec7ff4d5c93a099ed5ba","modified":1664638478402},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4898a09d8e67fb358ffd74b3a1f0014f555dd856","modified":1664638478538},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"b45fc15c3ae7db3a0fbce0d6da74a72a95ca8a2b","modified":1664638478266},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"af5d3d87b736598dafcf5871863596592cacdfe1","modified":1664638478242},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"ff3727c3ec698ec61a28c55cbc8c8508f0efb0a0","modified":1664638478122},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"3b5ef84744a1a8fec5a63554079008040d96f924","modified":1664638478202},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"6e77f1ca0cfb0db6b028f5c0238780e66d344f3d","modified":1664638472990},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"fc702a4614d0562a381907b083f71ba63d301d86","modified":1664638472990},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1664638472694},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"01ff9e77eb1bd454bec65a6ff5972c8e219bc708","modified":1664638472702},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"0b8aea62d1550113e1fcc237fae1b03743190208","modified":1664638472630},{"_id":"themes/butterfly/_git/logs/refs/remotes/origin/HEAD","hash":"267a935a8d6d09f63c884eb98804956f099c8499","modified":1664638485398},{"_id":"source/nginx-1.22.0/docs/CHANGES.ru","hash":"d93361fa927799ca3870f438e0b03105f288fe2a","modified":1664638463344},{"_id":"themes/butterfly/_git/objects/pack/pack-55525529640f9b1049a5dbc2a90c24694b20f468.idx","hash":"4529375dbd88baf972e872c96101a24b99481e20","modified":1664638485438},{"_id":"source/images/background/yizhigiraffe.jpg","hash":"97d5128597f77905aaa505ad97b83516932436e4","modified":1664638455093},{"_id":"source/images/praire.jpg","hash":"6495e69c83942a8e71da167ab34c00e811d35308","modified":1664638455693},{"_id":"source/images/mountain.jpg","hash":"3340e2a09c48f10ac42a489b91546889b7e7c4cc","modified":1664638439258},{"_id":"source/images/background/yeguangyun.jpg","hash":"3cf3d9ed1ca8dda41e2c882754d7bc7af3f51ecf","modified":1664638446398},{"_id":"source/images/background/beautymoon.jpg","hash":"0ef8641e871c666bccf1867dc1a2e7dc6193d81e","modified":1664638455901},{"_id":"themes/butterfly/_git/objects/pack/pack-55525529640f9b1049a5dbc2a90c24694b20f468.pack","hash":"a8058d7dffaf0a9e1b8eaa725c0d17321f82e96c","modified":1664638486484},{"_id":"source/nginx-1.22.0/nginx.exe","hash":"0af480c9131c14600573afee13e2a0a0e1c0922a","modified":1664638458370},{"_id":"source/images/background/web_background.jpg","hash":"336516cddfd259a1d678e7cb255a1fd0360e5fef","modified":1664638446606},{"_id":"public/js/cheat.js","hash":"fdfccd4ce49b2d14b6bf8e9d1fe54ff14db7de42","modified":1698829256628},{"_id":"public/search.xml","hash":"8487a80899579afe7043d471ceed2c5fe50f7bcd","modified":1698829256628},{"_id":"public/css/transpancy.css","hash":"684be19157cbf5095b4a9064091064615313682f","modified":1698829256628},{"_id":"public/404.html","hash":"8ed4a6a5ef42d318a9cb38befdef0c9a9cd96ba2","modified":1698829256628},{"_id":"public/link/index.html","hash":"dc3a35b3a7f9568c4d1b2235c31acb35a792c41b","modified":1698829256628},{"_id":"public/categories/index.html","hash":"10c5c299c715bc684a86f87254bf4154e13c0c51","modified":1698829256628},{"_id":"public/tags/index.html","hash":"ab5cece943096c38b64ab202da7083ae6943f0d5","modified":1698829256628},{"_id":"public/nginx-1.22.0/html/50x.html","hash":"74cfffda0d2beda57683e4c5f65873a14bf27bd3","modified":1698829256628},{"_id":"public/nginx-1.22.0/html/index.html","hash":"91ab7b4c86b9f66dc250855dbf040aa69d9da7db","modified":1698829256628},{"_id":"public/post/f73586b.html","hash":"34a7daa53e5f26ffb64430dc7bdac44107103a24","modified":1698829256628},{"_id":"public/post/f73596b.html","hash":"a82ddaf9cf6db91ca761a1d6da4243665d56b840","modified":1698829256628},{"_id":"public/post/ff99adbe.html","hash":"85de0d5792ab426f9aa24b22103b9d5413fa6179","modified":1698829256628},{"_id":"public/post/11f9a402.html","hash":"cafc42ae5750227286e4fe87748c5a67869076c7","modified":1698829256628},{"_id":"public/post/e2f4da2.html","hash":"c2ccf1d281b8d940e8cd90bd37f07592a14af36e","modified":1698829256628},{"_id":"public/post/84438cc6.html","hash":"e3c94432e58dc9ec0f7dba8c6e4e64ee50342019","modified":1698829256628},{"_id":"public/post/336e95a3.html","hash":"e5b822dfdbfc16dc32e64a1b56879fff071a4015","modified":1698829256628},{"_id":"public/post/4e66da29.html","hash":"6bf1c2d7ed9c19d93ba9e9f0595d46632a233bea","modified":1698829256628},{"_id":"public/post/a01e6d85.html","hash":"c9f95814e04ec51f6eee3ab6ec42501dd3848f7e","modified":1698829256628},{"_id":"public/post/59501.html","hash":"ade12be674c6e91e085f67fe1d6bd97686649f76","modified":1698829256628},{"_id":"public/post/34091.html","hash":"a54a21b838b4f74e25e0f2df735148ec6484ce20","modified":1698829256628},{"_id":"public/post/95eb7d.html","hash":"f7ef3de49f24289b951a1fa8aed73467f7d968bd","modified":1698829256628},{"_id":"public/post/16107.html","hash":"d04ca61dbcb949e9f673304ab54af519c6486f29","modified":1698829256628},{"_id":"public/archives/index.html","hash":"3e2c9c976894eae98e12ab31dc79f75e9c608c08","modified":1698829256628},{"_id":"public/archives/page/2/index.html","hash":"b8645f71bb01b1088d3d437785c2898c0a02a1d0","modified":1698829256628},{"_id":"public/archives/2022/index.html","hash":"bd70260ddb35114e9394ff89fad3e650f0307417","modified":1698829256628},{"_id":"public/archives/2022/page/2/index.html","hash":"73a54c1f66ba6c3435867dfa8acdeb9b2315e850","modified":1698829256628},{"_id":"public/archives/2022/08/index.html","hash":"a2f3233c3e18598119a15734f4b8363350e6ea3f","modified":1698829256628},{"_id":"public/archives/2022/09/index.html","hash":"893947f16a74b4956c1b8ae008cc5db3b5544236","modified":1698829256628},{"_id":"public/nginx-1.22.0/logs/error.log","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1698829256628},{"_id":"public/nginx-1.22.0/logs/access.log","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1698829256628},{"_id":"public/archives/2022/10/index.html","hash":"0cced6cf88cd2451db793a4be50513731c948ff0","modified":1698829256628},{"_id":"public/archives/2023/index.html","hash":"0807cecb411afa4e46d0b5cddb4261c58089569f","modified":1698829256628},{"_id":"public/archives/2023/03/index.html","hash":"527b5a3bd7d0e1e659647940613bf8c4c764ac4f","modified":1698829256628},{"_id":"public/index.html","hash":"5c078791f14bbcb74fddbd6e19d17ba1832e7fea","modified":1698829256628},{"_id":"public/archives/2023/10/index.html","hash":"88c39e3943e6f07f94598e33ca06c55bf12501e8","modified":1698829256628},{"_id":"public/page/2/index.html","hash":"3c824943fde2cc335c51aad34d8ddc84e13d3aa1","modified":1698829256628},{"_id":"public/tags/Learning-record/index.html","hash":"6c57626284b8b180e1dcabaf3745f94a8ad1d1ee","modified":1698829256628},{"_id":"public/tags/Git/index.html","hash":"0e6c4b130d80f7d407440ce561efaa8d07cc55a5","modified":1698829256628},{"_id":"public/tags/博客搭建/index.html","hash":"882eb1466d59ca11660e1c25e1fd407738331f0b","modified":1698829256628},{"_id":"public/tags/博客美化/index.html","hash":"3d784bcd86fc6341fe4a18c63318afa47ed30217","modified":1698829256628},{"_id":"public/tags/matlab/index.html","hash":"d4968668f89c2889f59856c27e72385aa938c55d","modified":1698829256628},{"_id":"public/tags/esp8266/index.html","hash":"173ae9a9be781566c7455b846de6f42ace2ca752","modified":1698829256628},{"_id":"public/tags/物联网/index.html","hash":"40044dc782fb7aaefa60f3f67263203ed78bb4fa","modified":1698829256628},{"_id":"public/tags/iic/index.html","hash":"0d8cb615d7c4b00b25484b3c94d1ee593143cbeb","modified":1698829256628},{"_id":"public/tags/时序/index.html","hash":"42f84de69839d7fc6d6d69b551c6ed6e5677e014","modified":1698829256628},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1698829256628},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1698829256628},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1698829256628},{"_id":"public/images/alipay.jpg","hash":"1cc0adb430fcc41036e1d1772fa0d04d8fbca017","modified":1698829256628},{"_id":"public/images/dragon_and_knight.jpg","hash":"55c77d217350ce6fa09c1c7362674227c543a70e","modified":1698829256628},{"_id":"public/images/dragon_and_knight_full.jpg","hash":"c7e5fd50a7c37e20e1a2cc4687c37b43cad2deab","modified":1698829256628},{"_id":"public/images/pictures_in_documents/git.png","hash":"d444dd970d0c211454a155891395b6f1263da370","modified":1698829256628},{"_id":"public/nginx-1.22.0/conf/fastcgi.conf","hash":"5b545f270a785bf6f03ab396e94ed2f73c179fc5","modified":1698829256628},{"_id":"public/nginx-1.22.0/conf/fastcgi_params","hash":"44c362ede0a31c898498cbfd606e46b9f1f30bd5","modified":1698829256628},{"_id":"public/nginx-1.22.0/conf/koi-utf","hash":"5afe5f88c011cc41aef4e82a6e2bdcbf8d573ec5","modified":1698829256628},{"_id":"public/nginx-1.22.0/conf/koi-win","hash":"3fe28cd5b11c84d3df706e74012a581a989db4fc","modified":1698829256628},{"_id":"public/nginx-1.22.0/conf/mime.types","hash":"fd2ce3ef17c7f703aab89d100387b258b3e9263e","modified":1698829256628},{"_id":"public/nginx-1.22.0/conf/nginx.conf","hash":"1776203af2f49bcd98ab661828570eb0fc373692","modified":1698829256628},{"_id":"public/nginx-1.22.0/conf/scgi_params","hash":"fa0c2e3e2f256b65de0710a2b727046bff41ea39","modified":1698829256628},{"_id":"public/nginx-1.22.0/conf/uwsgi_params","hash":"a43fb0f39bf214962fe58d59844446100a2d698c","modified":1698829256628},{"_id":"public/nginx-1.22.0/conf/win-utf","hash":"925a725cc43a5b881113c9fd671b4d368be42704","modified":1698829256628},{"_id":"public/nginx-1.22.0/contrib/geo2nginx.pl","hash":"f5b8473781ef13c55f9e9d4df3c615cb1fd58d05","modified":1698829256628},{"_id":"public/nginx-1.22.0/contrib/README","hash":"dd031bbdd8f2885ffe5a57a3b9faa8640d040b07","modified":1698829256628},{"_id":"public/nginx-1.22.0/docs/LICENSE","hash":"de0ea043351e203ff16503c81a431405422ff3a1","modified":1698829256628},{"_id":"public/nginx-1.22.0/docs/OpenSSL.LICENSE","hash":"607e96d7bc75d9f884a8e210d276cca4006e0753","modified":1698829256628},{"_id":"public/nginx-1.22.0/docs/PCRE.LICENCE","hash":"cc7132d685cfac1cac53709962b52590e160450f","modified":1698829256628},{"_id":"public/nginx-1.22.0/docs/README","hash":"62e50dec0130ae0d88719d0025913773564460b4","modified":1698829256628},{"_id":"public/nginx-1.22.0/docs/zlib.LICENSE","hash":"01a3b77a9cae85a26984664bd3d7067013b16605","modified":1698829256628},{"_id":"public/nginx-1.22.0/logs/nginx.pid","hash":"775319686ad831c83a9c473a0f19a78da295e593","modified":1698829256628},{"_id":"public/images/pictures_in_documents/IIC/ACK.jpg","hash":"27cc3861f8e40c5435400917bcf9a641ff5069a2","modified":1698829256628},{"_id":"public/images/pictures_in_documents/IIC/rw_data.jpg","hash":"f2604289849b642a3e23fd8f92c8b76f97cf804a","modified":1698829256628},{"_id":"public/images/pictures_in_documents/IIC/stable.jpg","hash":"e5022dff383a84f2f2292a85af7d2c86653a7fe5","modified":1698829256628},{"_id":"public/images/pictures_in_documents/IIC/start_stop.jpg","hash":"2fefb94200b21e1ccee9e6faa292b36720838210","modified":1698829256628},{"_id":"public/images/pictures_in_documents/IIC/r_data.jpg","hash":"a629d32e3e219f8fb7cc86c22ce7d59b631bbe94","modified":1698829256628},{"_id":"public/images/pictures_in_documents/IIC/w_data.jpg","hash":"4d01c813c145d65703e687c1c27c0cbcf3f711de","modified":1698829256628},{"_id":"public/images/pictures_in_documents/学物联网-NodeMCU-一/esp8266_devkit_horizontal-002.png","hash":"25adb340d65de21a7b19bd3d50bb58738e2f3dc1","modified":1698829256628},{"_id":"public/images/pictures_in_documents/学物联网-NodeMCU-一/esp8266_devkit_horizontal-flash-pins.png","hash":"ec5c1dec8331c5b47f5a8f3cbbff83da7b138ddf","modified":1698829256628},{"_id":"public/images/pictures_in_documents/学物联网-NodeMCU-一/nodemcu-pin-GPIO_001.png","hash":"5f9c4ffd46872358c6759039e7cc335db34d49a6","modified":1698829256628},{"_id":"public/images/pictures_in_documents/学物联网-NodeMCU-一/nodemcu-pin-number.jpg","hash":"79f6177ff5857b6a37d262942dba3f7cb1108eef","modified":1698829256628},{"_id":"public/nginx-1.22.0/contrib/unicode2nginx/koi-utf","hash":"f70df32d3dddbcb4654e76b9b7d2f98fa7e1821f","modified":1698829256628},{"_id":"public/nginx-1.22.0/contrib/unicode2nginx/unicode-to-nginx.pl","hash":"ef268a90eb276c39978296ea16f7129ca7d2528b","modified":1698829256628},{"_id":"public/nginx-1.22.0/contrib/unicode2nginx/win-utf","hash":"b51ae32efab92acbcff096a8b41f404120d2cd17","modified":1698829256628},{"_id":"public/nginx-1.22.0/contrib/vim/ftdetect/nginx.vim","hash":"af7d89670f0cd13b3657d6c15ec170434e645e1a","modified":1698829256628},{"_id":"public/nginx-1.22.0/contrib/vim/ftplugin/nginx.vim","hash":"e3a1d6f38495d2ef69bcdc1bbb44564e75f7c34a","modified":1698829256628},{"_id":"public/nginx-1.22.0/contrib/vim/indent/nginx.vim","hash":"ad50377b0f08adda4be4b8ca12300ecab4bbb26e","modified":1698829256628},{"_id":"public/css/hbe.style.css","hash":"b0a0077cb588c0941823905fcc383aa7509ade73","modified":1698829256628},{"_id":"public/lib/hbe.js","hash":"136dba00826bdd086153bf0acb5473aea7183ad1","modified":1698829256628},{"_id":"public/images/wechat.jpg","hash":"1fc9200919e25fe3ae1e1875d80c282aef10380e","modified":1698829256628},{"_id":"public/images/pictures_in_documents/IIC/iic时序.jpg","hash":"bc4ff3377c9f6551bfb0c894aeee24590f8019fd","modified":1698829256628},{"_id":"public/images/pictures_in_documents/IIC/delay_time.jpg","hash":"3bed962f17feb148d6b3006f19cac9b3445e6393","modified":1698829256628},{"_id":"public/images/pictures_in_documents/IIC/IIC总线物理拓扑.jpg","hash":"b63adcbb7ba8587f0ac7a95491cb8fe88431ab16","modified":1698829256628},{"_id":"public/images/pictures_in_documents/IIC/shixutu.jpg","hash":"6005048d5b7fef320a7610802619d596297d25fd","modified":1698829256628},{"_id":"public/images/pictures_in_documents/学物联网-NodeMCU-二/TCP_IP协议簇.jpg","hash":"e24587dc5cb20ab5dc3fdf705c7fb9ad7f40fb59","modified":1698829256628},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1698829256628},{"_id":"public/js/utils.js","hash":"0b95daada72abb5d64a1e3236049a60120e47cca","modified":1698829256628},{"_id":"public/js/search/algolia.js","hash":"9feb248552667c53ce1b19bc7a295215f8c77008","modified":1698829256628},{"_id":"public/js/search/local-search.js","hash":"3071a4208fdf89ad7e0031536dd6ffa7bc951e4d","modified":1698829256628},{"_id":"public/css/index.css","hash":"917e36626c0b8a23725fa743c52d2276709ab918","modified":1698829256628},{"_id":"public/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1698829256628},{"_id":"public/js/main.js","hash":"986ec20936be795ab8eff2da2206f00c3ea0c168","modified":1698829256628},{"_id":"public/images/pictures_in_documents/vi编辑器基本命令/vi.jpg","hash":"741420a72abbd1144e1704501bcbf13bd5a8782e","modified":1698829256628},{"_id":"public/nginx-1.22.0/contrib/vim/syntax/nginx.vim","hash":"7b3acba5293ea533558e868775da1fa081449720","modified":1698829256628},{"_id":"public/images/pictures_in_documents/学物联网-NodeMCU-五/esp8266fs-download.jpg","hash":"c6e81f3947a40b851b0fb9770c79e9d503fc846c","modified":1698829256628},{"_id":"public/nginx-1.22.0/docs/CHANGES","hash":"26fa23bb069cb7e4938b1aee05d161d9469abcf1","modified":1698829256628},{"_id":"public/images/pictures_in_documents/学物联网-NodeMCU-一/nodemcu_pinLocation.jpg","hash":"41d8e12f995de3d3f9e9e0e25a3431923dda867e","modified":1698829256628},{"_id":"public/nginx-1.22.0/docs/CHANGES.ru","hash":"d93361fa927799ca3870f438e0b03105f288fe2a","modified":1698829256628},{"_id":"public/images/background/yizhigiraffe.jpg","hash":"97d5128597f77905aaa505ad97b83516932436e4","modified":1698829256628},{"_id":"public/images/praire.jpg","hash":"6495e69c83942a8e71da167ab34c00e811d35308","modified":1698829256628},{"_id":"public/images/mountain.jpg","hash":"3340e2a09c48f10ac42a489b91546889b7e7c4cc","modified":1698829256628},{"_id":"public/images/background/yeguangyun.jpg","hash":"3cf3d9ed1ca8dda41e2c882754d7bc7af3f51ecf","modified":1698829256628},{"_id":"public/images/background/beautymoon.jpg","hash":"0ef8641e871c666bccf1867dc1a2e7dc6193d81e","modified":1698829256628},{"_id":"public/nginx-1.22.0/nginx.exe","hash":"0af480c9131c14600573afee13e2a0a0e1c0922a","modified":1698829256628},{"_id":"public/images/background/web_background.jpg","hash":"336516cddfd259a1d678e7cb255a1fd0360e5fef","modified":1698829256628}],"Category":[],"Data":[{"_id":"link","data":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"安装文, 档快速开始","link":"https://butterfly.js.org/posts/21cfbf15/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"Butterfly主题 帮助文档"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}],"Page":[{"_content":"//动态标题\nvar OriginTitile = document.title;\nvar titleTime;\ndocument.addEventListener('visibilitychange', function () {\n    if (document.hidden) {\n        //离开当前页面时标签显示内容\n        document.title = '网页崩溃啦w(ﾟДﾟ)w ！';\n        clearTimeout(titleTime);\n    }\n    else {\n        //返回当前页面时标签显示内容\n        document.title = '♪(^∇^*)我又好啦！' + OriginTitile;\n        //两秒后变回正常标题\n        titleTime = setTimeout(function () {\n            document.title = OriginTitile;\n        }, 2000);\n    }\n});","source":"js/cheat.js","raw":"//动态标题\nvar OriginTitile = document.title;\nvar titleTime;\ndocument.addEventListener('visibilitychange', function () {\n    if (document.hidden) {\n        //离开当前页面时标签显示内容\n        document.title = '网页崩溃啦w(ﾟДﾟ)w ！';\n        clearTimeout(titleTime);\n    }\n    else {\n        //返回当前页面时标签显示内容\n        document.title = '♪(^∇^*)我又好啦！' + OriginTitile;\n        //两秒后变回正常标题\n        titleTime = setTimeout(function () {\n            document.title = OriginTitile;\n        }, 2000);\n    }\n});","date":"2023-11-01T08:29:52.049Z","updated":"2022-11-01T07:48:57.000Z","path":"js/cheat.js","layout":"false","title":"","comments":1,"_id":"clofj2tbq0000oot36twh9f8u","content":"//动态标题\nvar OriginTitile = document.title;\nvar titleTime;\ndocument.addEventListener('visibilitychange', function () {\n    if (document.hidden) {\n        //离开当前页面时标签显示内容\n        document.title = '网页崩溃啦w(ﾟДﾟ)w ！';\n        clearTimeout(titleTime);\n    }\n    else {\n        //返回当前页面时标签显示内容\n        document.title = '♪(^∇^*)我又好啦！' + OriginTitile;\n        //两秒后变回正常标题\n        titleTime = setTimeout(function () {\n            document.title = OriginTitile;\n        }, 2000);\n    }\n});","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"安装文, 档快速开始","link":"https://butterfly.js.org/posts/21cfbf15/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"Butterfly主题 帮助文档"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"http://qiniu.hanvon.top/blog_backgounnd/praire.jpg","excerpt":"","more":"//动态标题\nvar OriginTitile = document.title;\nvar titleTime;\ndocument.addEventListener('visibilitychange', function () {\n    if (document.hidden) {\n        //离开当前页面时标签显示内容\n        document.title = '网页崩溃啦w(ﾟДﾟ)w ！';\n        clearTimeout(titleTime);\n    }\n    else {\n        //返回当前页面时标签显示内容\n        document.title = '♪(^∇^*)我又好啦！' + OriginTitile;\n        //两秒后变回正常标题\n        titleTime = setTimeout(function () {\n            document.title = OriginTitile;\n        }, 2000);\n    }\n});"},{"title":"和朋友们","date":"2022-08-27T13:18:12.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: 和朋友们\ndate: 2022-08-27 21:18:12\ntype: link\n---\n","updated":"2022-10-01T15:34:24.448Z","path":"link/index.html","comments":1,"layout":"page","_id":"clofj2tbu0002oot3a3fmhplg","content":"","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"安装文, 档快速开始","link":"https://butterfly.js.org/posts/21cfbf15/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"Butterfly主题 帮助文档"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"http://qiniu.hanvon.top/blog_backgounnd/praire.jpg","excerpt":"","more":""},{"title":"我们都会有美好的未来","date":"2022-08-27T13:16:13.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 我们都会有美好的未来\ndate: 2022-08-27 21:16:13\ntype: categories\n---\n","updated":"2022-10-01T15:34:24.552Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clofj2tbw0005oot3adpz6r7w","content":"","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"安装文, 档快速开始","link":"https://butterfly.js.org/posts/21cfbf15/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"Butterfly主题 帮助文档"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"http://qiniu.hanvon.top/blog_backgounnd/praire.jpg","excerpt":"","more":""},{"title":"Civil's 标签页","date":"2022-08-27T13:12:19.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: Civil's 标签页\ndate: 2022-08-27 21:12:19\ntype: tags\n---\n","updated":"2022-10-01T15:34:16.512Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clofj2tbx0007oot39tkbfkj9","content":"","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"安装文, 档快速开始","link":"https://butterfly.js.org/posts/21cfbf15/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"Butterfly主题 帮助文档"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"http://qiniu.hanvon.top/blog_backgounnd/praire.jpg","excerpt":"","more":""},{"_content":"<!DOCTYPE html>\n<html>\n<head>\n<title>Error</title>\n<style>\nhtml { color-scheme: light dark; }\nbody { width: 35em; margin: 0 auto;\nfont-family: Tahoma, Verdana, Arial, sans-serif; }\n</style>\n</head>\n<body>\n<h1>An error occurred.</h1>\n<p>Sorry, the page you are looking for is currently unavailable.<br/>\nPlease try again later.</p>\n<p>If you are the system administrator of this resource then you should check\nthe error log for details.</p>\n<p><em>Faithfully yours, nginx.</em></p>\n</body>\n</html>\n","source":"nginx-1.22.0/html/50x.html","raw":"<!DOCTYPE html>\n<html>\n<head>\n<title>Error</title>\n<style>\nhtml { color-scheme: light dark; }\nbody { width: 35em; margin: 0 auto;\nfont-family: Tahoma, Verdana, Arial, sans-serif; }\n</style>\n</head>\n<body>\n<h1>An error occurred.</h1>\n<p>Sorry, the page you are looking for is currently unavailable.<br/>\nPlease try again later.</p>\n<p>If you are the system administrator of this resource then you should check\nthe error log for details.</p>\n<p><em>Faithfully yours, nginx.</em></p>\n</body>\n</html>\n","date":"2023-11-01T08:29:52.053Z","updated":"2022-10-01T15:34:18.105Z","path":"nginx-1.22.0/html/50x.html","title":"","comments":1,"layout":"page","_id":"clofj2tbx0009oot30pgz8fvl","content":"<!DOCTYPE html>\n<html>\n<head>\n<title>Error</title>\n<style>\nhtml { color-scheme: light dark; }\nbody { width: 35em; margin: 0 auto;\nfont-family: Tahoma, Verdana, Arial, sans-serif; }\n</style>\n</head>\n<body>\n<h1>An error occurred.</h1>\n<p>Sorry, the page you are looking for is currently unavailable.<br/>\nPlease try again later.</p>\n<p>If you are the system administrator of this resource then you should check\nthe error log for details.</p>\n<p><em>Faithfully yours, nginx.</em></p>\n</body>\n</html>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"安装文, 档快速开始","link":"https://butterfly.js.org/posts/21cfbf15/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"Butterfly主题 帮助文档"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"http://qiniu.hanvon.top/blog_backgounnd/praire.jpg","excerpt":"","more":"<!DOCTYPE html>\n<html>\n<head>\n<title>Error</title>\n<style>\nhtml { color-scheme: light dark; }\nbody { width: 35em; margin: 0 auto;\nfont-family: Tahoma, Verdana, Arial, sans-serif; }\n</style>\n</head>\n<body>\n<h1>An error occurred.</h1>\n<p>Sorry, the page you are looking for is currently unavailable.<br/>\nPlease try again later.</p>\n<p>If you are the system administrator of this resource then you should check\nthe error log for details.</p>\n<p><em>Faithfully yours, nginx.</em></p>\n</body>\n</html>\n"},{"_content":"<!DOCTYPE html>\n<html>\n<head>\n<title>Welcome to nginx!</title>\n<style>\nhtml { color-scheme: light dark; }\nbody { width: 35em; margin: 0 auto;\nfont-family: Tahoma, Verdana, Arial, sans-serif; }\n</style>\n</head>\n<body>\n<h1>Welcome to nginx!</h1>\n<p>If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.</p>\n\n<p>For online documentation and support please refer to\n<a href=\"http://nginx.org/\">nginx.org</a>.<br/>\nCommercial support is available at\n<a href=\"http://nginx.com/\">nginx.com</a>.</p>\n\n<p><em>Thank you for using nginx.</em></p>\n</body>\n</html>\n","source":"nginx-1.22.0/html/index.html","raw":"<!DOCTYPE html>\n<html>\n<head>\n<title>Welcome to nginx!</title>\n<style>\nhtml { color-scheme: light dark; }\nbody { width: 35em; margin: 0 auto;\nfont-family: Tahoma, Verdana, Arial, sans-serif; }\n</style>\n</head>\n<body>\n<h1>Welcome to nginx!</h1>\n<p>If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.</p>\n\n<p>For online documentation and support please refer to\n<a href=\"http://nginx.org/\">nginx.org</a>.<br/>\nCommercial support is available at\n<a href=\"http://nginx.com/\">nginx.com</a>.</p>\n\n<p><em>Thank you for using nginx.</em></p>\n</body>\n</html>\n","date":"2023-11-01T08:29:52.053Z","updated":"2022-10-01T15:34:17.961Z","path":"nginx-1.22.0/html/index.html","title":"","comments":1,"layout":"page","_id":"clofj2tby000doot3gmwadnpw","content":"<!DOCTYPE html>\n<html>\n<head>\n<title>Welcome to nginx!</title>\n<style>\nhtml { color-scheme: light dark; }\nbody { width: 35em; margin: 0 auto;\nfont-family: Tahoma, Verdana, Arial, sans-serif; }\n</style>\n</head>\n<body>\n<h1>Welcome to nginx!</h1>\n<p>If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.</p>\n\n<p>For online documentation and support please refer to\n<a href=\"http://nginx.org/\">nginx.org</a>.<br/>\nCommercial support is available at\n<a href=\"http://nginx.com/\">nginx.com</a>.</p>\n\n<p><em>Thank you for using nginx.</em></p>\n</body>\n</html>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"安装文, 档快速开始","link":"https://butterfly.js.org/posts/21cfbf15/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"Butterfly主题 帮助文档"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"http://qiniu.hanvon.top/blog_backgounnd/praire.jpg","excerpt":"","more":"<!DOCTYPE html>\n<html>\n<head>\n<title>Welcome to nginx!</title>\n<style>\nhtml { color-scheme: light dark; }\nbody { width: 35em; margin: 0 auto;\nfont-family: Tahoma, Verdana, Arial, sans-serif; }\n</style>\n</head>\n<body>\n<h1>Welcome to nginx!</h1>\n<p>If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.</p>\n\n<p>For online documentation and support please refer to\n<a href=\"http://nginx.org/\">nginx.org</a>.<br/>\nCommercial support is available at\n<a href=\"http://nginx.com/\">nginx.com</a>.</p>\n\n<p><em>Thank you for using nginx.</em></p>\n</body>\n</html>\n"},{"_content":"\n/* 文章页背景 */\n.layout_post>#post {\n    /* 以下代表透明度为0.6 可以自行修改*/\n    background: rgba(255,255,255,.6);\n}\n \n/* 所有页面背景 */\n#aside_content .card-widget, #recent-posts>.recent-post-item, .layout_page>div:first-child:not(.recent-posts), .layout_post>#page, .layout_post>#post, .read-mode .layout_post>#post{\n    /* 以下代表透明度为0.7 主页面文章的小框框 */\n    background: rgba(255,255,255, .7);\n}\n/*侧边卡片的透明度 */\n:root {\n  --card-bg: rgba(255, 255, 255, .7);\n}\n/* 页脚透明 */\n#footer {\n    /* 以下代表透明度为0.5 */\n    background: rgba(255,255,255, .2);\n}","source":"css/transpancy.css","raw":"\n/* 文章页背景 */\n.layout_post>#post {\n    /* 以下代表透明度为0.6 可以自行修改*/\n    background: rgba(255,255,255,.6);\n}\n \n/* 所有页面背景 */\n#aside_content .card-widget, #recent-posts>.recent-post-item, .layout_page>div:first-child:not(.recent-posts), .layout_post>#page, .layout_post>#post, .read-mode .layout_post>#post{\n    /* 以下代表透明度为0.7 主页面文章的小框框 */\n    background: rgba(255,255,255, .7);\n}\n/*侧边卡片的透明度 */\n:root {\n  --card-bg: rgba(255, 255, 255, .7);\n}\n/* 页脚透明 */\n#footer {\n    /* 以下代表透明度为0.5 */\n    background: rgba(255,255,255, .2);\n}","date":"2023-11-01T08:29:52.049Z","updated":"2023-11-01T08:13:26.719Z","path":"css/transpancy.css","layout":"false","title":"","comments":1,"_id":"clofj2tbz000foot39slpf4tt","content":"\n/* 文章页背景 */\n.layout_post>#post {\n    /* 以下代表透明度为0.6 可以自行修改*/\n    background: rgba(255,255,255,.6);\n}\n \n/* 所有页面背景 */\n#aside_content .card-widget, #recent-posts>.recent-post-item, .layout_page>div:first-child:not(.recent-posts), .layout_post>#page, .layout_post>#post, .read-mode .layout_post>#post{\n    /* 以下代表透明度为0.7 主页面文章的小框框 */\n    background: rgba(255,255,255, .7);\n}\n/*侧边卡片的透明度 */\n:root {\n  --card-bg: rgba(255, 255, 255, .7);\n}\n/* 页脚透明 */\n#footer {\n    /* 以下代表透明度为0.5 */\n    background: rgba(255,255,255, .2);\n}","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"安装文, 档快速开始","link":"https://butterfly.js.org/posts/21cfbf15/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"Butterfly主题 帮助文档"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"http://qiniu.hanvon.top/blog_backgounnd/praire.jpg","excerpt":"","more":"\n/* 文章页背景 */\n.layout_post>#post {\n    /* 以下代表透明度为0.6 可以自行修改*/\n    background: rgba(255,255,255,.6);\n}\n \n/* 所有页面背景 */\n#aside_content .card-widget, #recent-posts>.recent-post-item, .layout_page>div:first-child:not(.recent-posts), .layout_post>#page, .layout_post>#post, .read-mode .layout_post>#post{\n    /* 以下代表透明度为0.7 主页面文章的小框框 */\n    background: rgba(255,255,255, .7);\n}\n/*侧边卡片的透明度 */\n:root {\n  --card-bg: rgba(255, 255, 255, .7);\n}\n/* 页脚透明 */\n#footer {\n    /* 以下代表透明度为0.5 */\n    background: rgba(255,255,255, .2);\n}"}],"Post":[{"title":"Android studio 七天Java零基础入门 记录","abbrlink":34091,"date":"2022-08-27T09:07:23.000Z","_content":"\n## 基本入门\n","source":"_posts/Android-studio 七天入门 记录.md","raw":"---\ntitle: Android studio 七天Java零基础入门 记录\ntags: Learning record\nabbrlink: 34091\ndate: 2022-08-27 17:07:23\n#sticky: 1\n\n---\n\n## 基本入门\n","slug":"Android-studio 七天入门 记录","published":1,"updated":"2022-10-01T15:34:16.352Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clofj2tbs0001oot3aa3t25ig","content":"<h2 id=\"基本入门\"><a href=\"#基本入门\" class=\"headerlink\" title=\"基本入门\"></a>基本入门</h2>","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"安装文, 档快速开始","link":"https://butterfly.js.org/posts/21cfbf15/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"Butterfly主题 帮助文档"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"http://qiniu.hanvon.top/blog_backgounnd/praire.jpg","excerpt":"","more":"<h2 id=\"基本入门\"><a href=\"#基本入门\" class=\"headerlink\" title=\"基本入门\"></a>基本入门</h2>"},{"title":"Git实战","abbrlink":"ff99adbe","date":"2022-10-03T13:42:35.000Z","keywords":null,"description":null,"password":null,"abstract":null,"message":null,"cover":"http://qiniu.hanvon.top/blog_cover/git_cover.png","copyright":false,"_content":"\n<img src=\"http://qiniu.hanvon.top/blog_article/Learning/Git/git_logo.png\" align=\"right\" />\n\n# **Git实战小笔记**\n\n什么是Git? 答：Git是一个 分布式的版本控制 软件。\n\n为什么要做版本控制？答：要保留之前所有的版本,以便回滚和修改。\n\n为啥要学Git?答：不学Git，无法参与满足大公司代码开发功能（版本管理、提交代码）。\n\n> 本文不讲解任何不同代码控制软件的不同，也不讲解可视化版本控制的使用。 为什么？答：大家都用这玩意，你别折腾上古工具(SVN)这些东西。\n\n# 讲故事学Git\n\n## 第一阶段: 单枪匹马开始干\n\n想要让git对一个目录进行版本控制需要以下步骤:\n\n- 进入要管理的文件央\n- 执行初始化命令\n\n```bash\ngit init\n```\n\n- 管理目录下的文件状态\n\n```bash\ngit status\n注:新增的文件和修改过后的文件都是红色\n```\n\n\n管理指定文件(红变绿)\n\n```bash\ngit add [filename.filetype] //添加到缓存区\ngit add .\n```\n\n git status color:\n\n red 🔴:not add\n\n green 🟢:had added\n\n- 个人信息配置:用户名、邮箱 【一次即可】\n\n```bash\ngit config --global user.email \"[your email address]\"\ngit config --global user.name \"[your nickname]\" \n```\n\n- 生成版本\n\n```bash\ngit commit -m '描述信息'\n```\n\n- 查看版本记录\n\n```bash\ngit log\n```\n\n##　第二阶段: 拓展新功能\n\n```bash\ngit add\ngit commit -m '短视频'\n```\n\n## 第三阶段: “约饭事件”\n\n- 回滚(reset)至之前版本\n\n```bash\ngit log\ngit reset --hard [commit id] //回滚版本\n```\n\n- 回滚之之后版本\n\n```bash\ngit reflog\ngit reset --hard [commit id] //回滚参考日志版本（无任何当前工作缓存）\n```\n\n### 小总结\n\n```bash\ngit init\ngit add\ngit commit\ngit log\ngit reflog\ngit reset --hard 版本号\n```\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Learning/Git/sum.png\" style=\"max-width:70%; height:auto\" />\n\n## 第四阶段:商城&紧急修复bug\n\n#### 2.5.1分支\n\n分支可以给使用者提供多个环境的可以,意味着你可以把你的工作从开发主线上分离开来,以免影响开 发主线。\n\n#### 2.5.2 紧急修复bug方案\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Learning/Git/emergencyrepair.png\" style=\"max-width:70%; height:auto\" />\n\n2.5.3 命令总结\n\n- 查看分支 (展示分支)\n\n```bash\ngit branch \n```\n\n- 创建分支\n\n```bash\ngit branch [branch name]\n```\n\n- 切换分支\n\n```bash\ngit checkout [branch name]\ngit checkout -b [branch name] //切换并且创建分支\n```\n\n- 分支改名\n\n```bash\ngit branch -m [old branch name] [new branch name] //分支改名\n```\n\n- 分支合并(可能产生冲突)\n\n```bash\ngit merge [branch name] //合并到哪，切换哪的分支。\n🔴注意:先切换分支再合并\n```\n\n- 删除分支\n\n```bash\ngit branch -d [branch name] //删除分支\n```\n\n#### 2.5.4 工作流\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Learning/Git/branch.png\" style=\"zoom:50%;\" />\n\n## 第五阶段:进军三里屯\n\n有钱之后就要造呀,一个人在三里屯买了一层楼做办公室。\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Learning/Git/hulian.png\" style=\"max-width:60%; height:auto\" />\n\n#### 2.6.1 第一天上班前在家上传代码\n\n首先,需要注册github账号,并创建远程仓库,然后再执行如下命令,将代码上传到github。\n\n```bash\n1. 给远程仓库起别名\n\tgit remote add origin 远程仓库地址\n2. 向远程推送代码\n\tgit push -u origin 分支\n```\n\n#### 2.6.2 初次在公司新电脑下载代码\n\n```bash\n1. 克隆远程仓库代码\n\tgit clone 远程仓库地址  (内部已实现git remote add origin 远程仓库地址)\n2. 切换分支\n\tgit checkout 分支\n```\n\n在公司下载完代码后,继续开发\n\n```bash\n1. 切换到dev分支进行开发\n\tgit checkout dev\n2. 把master分支合并到dev [仅一次] \n\tgit merge master\n3. 修改代码\n4. 提交代码\n\tgit add .\n\tgit commit -m 'xx'\n\tgit push origin dev\n```\n\n#### 2.6.3 下班回到家继续写代码\n\n```bash\n1. 切换到dev分支进行开发\n\tgit checkout dev\n2. 拉代码\n\tgit pull origin dev\n3. 继续开发\n\n4. 提交代码\n\tgit add .\n\tgit commit -m 'xx'\n\tgit push origin dev\n```\n\n#### 2.6.4 到公司继续开发\n\n```bash\n1. 切换到dev分支进行开发\n\tgit checkout dev\n2. 拉最新代码(不必再clone,只需要通过pull获取最新代码即可)\n\tgit pull origin dev\n3. 继续开发\n\n4. 提交代码\n\tgit add .\n\tgit commit -m 'xx'\n\tgit push origin dev\n```\n\n开发完毕,要上线了！\n\n```bash\n1. 将dev分支合并到master,进行上线\n\tgit checkout master\n\tgit merge dev\n\tgit push origin master\n2. 把dev分支也推送到远程\n\tgit checkout dev\n\tgit merge master\n\tgit push origin dev\n```\n\n#### 2.6.5 在公司约妹子忘记提交代码\n\n```bash\n1. 拉代码\n\tgit pull origin dev\n2. 继续开发\n\n3. 提交代码\n\tgit add .\n\tgit commit -m 'xx'\n\n注:忘记push了\n```\n\n#### 2.6.6 回家继续写代码\n\n```bash\n1. 拉代码,发现在公司写的代码忘记提交 ... \n\tgit pull origin dev\n\n2. 继续开发其他功能\n\n3. 把dev分支也推送到远程\n\tgit add .\n\tgit commit -m 'xx'\n\tgit push origin dev\n```\n\n#### 2.6.7 到公司继续写代码\n\n```bash\n1. 拉代码,把晚上在家写的代码拉到本地(有合并、可能产生冲突)\n\tgit pull origin dev\n\n2. 如果有冲突,手动解决冲突\n\n3. 继续开发其他功能\n\n4. 把dev分支也推送到远程\n\tgit add .\n\tgit commit -m 'xx'\n\tgit push origin dev\n```\n\n#### 2.6.8 其他\n\n```bash\ngit pull origin dev\n等价于\ngit fetch origin dev\ngit merge origin/dev\n```\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Learning/Git/elsegitsum.png\" style=\"max-width:80%; height:auto\" />\n\n#### 2.6.9 rebase的作用?\n\nrebase可以保持提交记录简洁,不分叉。\n\n#### 2.6.10 快速解决冲突\n\n​\t①安装beyond compare\n​\t②在git中配置\n\n```bash\ngit config --local merge.tool bc3\ngit config --local mergetool.path '/usr/local/bin/bcomp'\ngit config --local mergetool.keepBackup false\n```\n\n​\t③应用beyond compare 解决冲突\n\n```bash\ngit mergetool\n```\n\n### 2.7 小总结\n\n- 添加远程连接(别名)\n\n```bash\ngit remote add origin 地址\n```\n\n- 推送代码\n\n```bash\ngit push origin dev\n```\n\n- 下载代码\n\n```bash\ngit clone 地址\n```\n\n- 拉取代码\n\n```bash\ngit pull origin dev\n等价于\ngit fetch origin dev\ngit merge origin/dev\n```\n\n- 保持代码提交整洁(变基)\n\n```bash\ngit rebase 分支\n```\n\n- 记录图形展示\n\n```bash\ngit log --graph --pretty=format:\"%h %s\"\n```\n\n## 第六阶段:多人协同开发工作流\n\n#### 2.8.1 创建项目&邀请成员\n\n协同开发时,需要所有成员都可以对同一个项目进行操作,需要邀请成员并赋予权限,否则无法开发。 github支持两种创建项目的方式(供多人协同开发)。\n\n\n​\t1.合作者,将用户添加到仓库合作者中之后,该用户就可以向当前仓库提交代码。\n​\t2.组织,将成员邀请进入组织,组织下可以创建多个仓库,组织成员可以向组织下仓库提交代码。\n\n\n```bash\n扩展: Tag标签管理\n为了能清晰的管理版本,在公司不会直接使用 commit来做版本,会基于Tag来实现: v1.0 、v1.2 、v2.0 版本。\n```\n\n```bash\ngit tag -a v1.0 -m '版本介绍'\t 创建本地创建Tag信息\ngit tag -d v1.0\t\t\t\t\t删除Tag\ngit push origin  --tags\t\t\t将本地tag信息推送到远程仓库\ngit pull origin  --tags\t\t\t更新本地tag版本信息\n\ngit checkout v.10\t\t\t\t切换tag\ngit clone -b v0.1 地址\t\t   指定tag下载代码\n```\n\n#### 2.8.2 小弟开发\n\n- 小弟注册Github 或 Gitlab账号\n- 邀请小弟进入组织(默认对组织中的项目具有读权限)\n- 邀请小弟成为某项目的合作者\n- 小弟在自己电脑上下载代码并开发\n\n```bash\ngit clone https://github.com/oldboy-org/dbhot.git\ncd dbhot\ngit checkout dev\ngit checkout -b dzz\n写代码 ...\n\ngit add .\ngit commit -m '斗地主功能开发完成'\ngit push origin ddz\n```\n\n#### 2.8.3 code review\n\n​\t1.配置,代码review之后才能合并到dev分支。\n​\t2.小弟提交 code review申请\n​\t3.组长做 code review\n\n#### 2.8.4 提测上线(预发布)\n\n由专门团队或团队leader执行以下步骤:\n\n​    1.基于dev分值创建release分值\n\n```bash\ngit checkout dev\ngit checkout -b release\n```\n\n​\t2.测试等\n​\t3.合并到master\n\n```\n使用pull request\n或\n本地将release合并到master分支\n```\n\n​\t4.在master分支打tag\n\n```bash\ngit tag -a v2 -m '第二版  斗地主功能'\ngit push origin --tags\n```\n\n​\t5.运维人员就可以去下载代码做上线了\n\n```bash\ngit clone -b v2 地址\n```\n\n## 第七阶段:给开源软件贡献代码\n\n​\t1.fork源代码 将别人源代码拷贝到我自己的远程仓库。\n​\t2.在自己仓库进行修改代码\n​\t3.给源代码的作者提交 修复bug的申请 (pull request)\n\n### 其他\n\n#### 3.1 配置\n\n- 项目配置文件:项目/.git/conig\n\n```bash\ngit config -- user.name '冯一航'\ngit config -- local user.email 'fengyihang@xx.com'\n```\n\n- 全局配置文件: ~/.gitconig\n\n```bash\ngit config --global user.name 'fengyihang'\ngit config --global user.name 'fengyihang@xx.com'\n```\n\n- 系统配置文件: /etc/.gitconig\n\n```bash\ngit config --system user.name 'fengyihang'\ngit config --system user.name 'fengyihang@xx.com'\n\n#注意:需要有root权限\n```\n\n应用场景:\n\n```bash\ngit\tconfig\t--local user.name '冯一航'\ngit\tconfig\t--local user.email 'fengyihang@xx.com'\ngit\tconfig\t--local merge.tool bc3\ngit\tconfig\t--local mergetool.path '/usr/local/bin/bcomp'\ngit\tconfig\t--local mergetool.keepBackup false\n```\n\ngit remote add origin 地址  ,默认添加在本地配置文件中(--local)\n\n#### 3.2 免密码登录\n\n- URL中体现\n\n```\n原来的地址:  https://github.com/Fengyihang/dbhot.git\n修改的地址:  https://用户名:密码@github.com/Fengyihang/dbhot.git  \ngit remote add origin https://用户名:密码@github.com/Fengyihang/dbhot.git git push origin master\n```\n\n- SSH实现\n\n```\n1. 生成公钥和私钥(默认放在  ~/.ssh目录下,  id_rsa.pub公钥、  id_rsa私钥) ssh-keygen\n2. 拷贝公钥的内容,并设置到github中。\n3. 在git本地中配置ssh地址\ngit remote add origin git@github.com:Fengyihang/dbhot.git\n\n4. 以后使用\ngit push origin master\n```\n\n- git自动管理凭证\n\n#### 3.3 git忽略文件\n\n让Git不再管理当前目录下的某些文件。\n\n```\n*.h\n!a.h\nfiles/\n*.py[c|a|d]\n```\n\n更多参考: https://github.com/github/gitignore\n\n#### 3.4 github任务管理相关\n\n- issues ,文档以及任务管理。\n- wiki ,项目文档。\n\n结语\n好好学习天天向上, 希望git实战课程对你能够有所帮助,更多资源关注:\n\nNotion：https://www.notion.so/Git-e623a6fa739a46eebd6c6646955c41c8\n\nPDF：https://www.notion.so/Git-e623a6fa739a46eebd6c6646955c41c8#d173f23264714f6f9db110660db0fade\n","source":"_posts/Git实战.md","raw":"---\ntitle: Git实战\nabbrlink: ff99adbe\ndate: 2022-10-3 21:42:35\ntags:\n  - Git\nkeywords:\ndescription:\npassword:\nabstract:\nmessage:\ncover: http://qiniu.hanvon.top/blog_cover/git_cover.png\ncopyright: false\n---\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Learning/Git/git_logo.png\" align=\"right\" />\n\n# **Git实战小笔记**\n\n什么是Git? 答：Git是一个 分布式的版本控制 软件。\n\n为什么要做版本控制？答：要保留之前所有的版本,以便回滚和修改。\n\n为啥要学Git?答：不学Git，无法参与满足大公司代码开发功能（版本管理、提交代码）。\n\n> 本文不讲解任何不同代码控制软件的不同，也不讲解可视化版本控制的使用。 为什么？答：大家都用这玩意，你别折腾上古工具(SVN)这些东西。\n\n# 讲故事学Git\n\n## 第一阶段: 单枪匹马开始干\n\n想要让git对一个目录进行版本控制需要以下步骤:\n\n- 进入要管理的文件央\n- 执行初始化命令\n\n```bash\ngit init\n```\n\n- 管理目录下的文件状态\n\n```bash\ngit status\n注:新增的文件和修改过后的文件都是红色\n```\n\n\n管理指定文件(红变绿)\n\n```bash\ngit add [filename.filetype] //添加到缓存区\ngit add .\n```\n\n git status color:\n\n red 🔴:not add\n\n green 🟢:had added\n\n- 个人信息配置:用户名、邮箱 【一次即可】\n\n```bash\ngit config --global user.email \"[your email address]\"\ngit config --global user.name \"[your nickname]\" \n```\n\n- 生成版本\n\n```bash\ngit commit -m '描述信息'\n```\n\n- 查看版本记录\n\n```bash\ngit log\n```\n\n##　第二阶段: 拓展新功能\n\n```bash\ngit add\ngit commit -m '短视频'\n```\n\n## 第三阶段: “约饭事件”\n\n- 回滚(reset)至之前版本\n\n```bash\ngit log\ngit reset --hard [commit id] //回滚版本\n```\n\n- 回滚之之后版本\n\n```bash\ngit reflog\ngit reset --hard [commit id] //回滚参考日志版本（无任何当前工作缓存）\n```\n\n### 小总结\n\n```bash\ngit init\ngit add\ngit commit\ngit log\ngit reflog\ngit reset --hard 版本号\n```\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Learning/Git/sum.png\" style=\"max-width:70%; height:auto\" />\n\n## 第四阶段:商城&紧急修复bug\n\n#### 2.5.1分支\n\n分支可以给使用者提供多个环境的可以,意味着你可以把你的工作从开发主线上分离开来,以免影响开 发主线。\n\n#### 2.5.2 紧急修复bug方案\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Learning/Git/emergencyrepair.png\" style=\"max-width:70%; height:auto\" />\n\n2.5.3 命令总结\n\n- 查看分支 (展示分支)\n\n```bash\ngit branch \n```\n\n- 创建分支\n\n```bash\ngit branch [branch name]\n```\n\n- 切换分支\n\n```bash\ngit checkout [branch name]\ngit checkout -b [branch name] //切换并且创建分支\n```\n\n- 分支改名\n\n```bash\ngit branch -m [old branch name] [new branch name] //分支改名\n```\n\n- 分支合并(可能产生冲突)\n\n```bash\ngit merge [branch name] //合并到哪，切换哪的分支。\n🔴注意:先切换分支再合并\n```\n\n- 删除分支\n\n```bash\ngit branch -d [branch name] //删除分支\n```\n\n#### 2.5.4 工作流\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Learning/Git/branch.png\" style=\"zoom:50%;\" />\n\n## 第五阶段:进军三里屯\n\n有钱之后就要造呀,一个人在三里屯买了一层楼做办公室。\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Learning/Git/hulian.png\" style=\"max-width:60%; height:auto\" />\n\n#### 2.6.1 第一天上班前在家上传代码\n\n首先,需要注册github账号,并创建远程仓库,然后再执行如下命令,将代码上传到github。\n\n```bash\n1. 给远程仓库起别名\n\tgit remote add origin 远程仓库地址\n2. 向远程推送代码\n\tgit push -u origin 分支\n```\n\n#### 2.6.2 初次在公司新电脑下载代码\n\n```bash\n1. 克隆远程仓库代码\n\tgit clone 远程仓库地址  (内部已实现git remote add origin 远程仓库地址)\n2. 切换分支\n\tgit checkout 分支\n```\n\n在公司下载完代码后,继续开发\n\n```bash\n1. 切换到dev分支进行开发\n\tgit checkout dev\n2. 把master分支合并到dev [仅一次] \n\tgit merge master\n3. 修改代码\n4. 提交代码\n\tgit add .\n\tgit commit -m 'xx'\n\tgit push origin dev\n```\n\n#### 2.6.3 下班回到家继续写代码\n\n```bash\n1. 切换到dev分支进行开发\n\tgit checkout dev\n2. 拉代码\n\tgit pull origin dev\n3. 继续开发\n\n4. 提交代码\n\tgit add .\n\tgit commit -m 'xx'\n\tgit push origin dev\n```\n\n#### 2.6.4 到公司继续开发\n\n```bash\n1. 切换到dev分支进行开发\n\tgit checkout dev\n2. 拉最新代码(不必再clone,只需要通过pull获取最新代码即可)\n\tgit pull origin dev\n3. 继续开发\n\n4. 提交代码\n\tgit add .\n\tgit commit -m 'xx'\n\tgit push origin dev\n```\n\n开发完毕,要上线了！\n\n```bash\n1. 将dev分支合并到master,进行上线\n\tgit checkout master\n\tgit merge dev\n\tgit push origin master\n2. 把dev分支也推送到远程\n\tgit checkout dev\n\tgit merge master\n\tgit push origin dev\n```\n\n#### 2.6.5 在公司约妹子忘记提交代码\n\n```bash\n1. 拉代码\n\tgit pull origin dev\n2. 继续开发\n\n3. 提交代码\n\tgit add .\n\tgit commit -m 'xx'\n\n注:忘记push了\n```\n\n#### 2.6.6 回家继续写代码\n\n```bash\n1. 拉代码,发现在公司写的代码忘记提交 ... \n\tgit pull origin dev\n\n2. 继续开发其他功能\n\n3. 把dev分支也推送到远程\n\tgit add .\n\tgit commit -m 'xx'\n\tgit push origin dev\n```\n\n#### 2.6.7 到公司继续写代码\n\n```bash\n1. 拉代码,把晚上在家写的代码拉到本地(有合并、可能产生冲突)\n\tgit pull origin dev\n\n2. 如果有冲突,手动解决冲突\n\n3. 继续开发其他功能\n\n4. 把dev分支也推送到远程\n\tgit add .\n\tgit commit -m 'xx'\n\tgit push origin dev\n```\n\n#### 2.6.8 其他\n\n```bash\ngit pull origin dev\n等价于\ngit fetch origin dev\ngit merge origin/dev\n```\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Learning/Git/elsegitsum.png\" style=\"max-width:80%; height:auto\" />\n\n#### 2.6.9 rebase的作用?\n\nrebase可以保持提交记录简洁,不分叉。\n\n#### 2.6.10 快速解决冲突\n\n​\t①安装beyond compare\n​\t②在git中配置\n\n```bash\ngit config --local merge.tool bc3\ngit config --local mergetool.path '/usr/local/bin/bcomp'\ngit config --local mergetool.keepBackup false\n```\n\n​\t③应用beyond compare 解决冲突\n\n```bash\ngit mergetool\n```\n\n### 2.7 小总结\n\n- 添加远程连接(别名)\n\n```bash\ngit remote add origin 地址\n```\n\n- 推送代码\n\n```bash\ngit push origin dev\n```\n\n- 下载代码\n\n```bash\ngit clone 地址\n```\n\n- 拉取代码\n\n```bash\ngit pull origin dev\n等价于\ngit fetch origin dev\ngit merge origin/dev\n```\n\n- 保持代码提交整洁(变基)\n\n```bash\ngit rebase 分支\n```\n\n- 记录图形展示\n\n```bash\ngit log --graph --pretty=format:\"%h %s\"\n```\n\n## 第六阶段:多人协同开发工作流\n\n#### 2.8.1 创建项目&邀请成员\n\n协同开发时,需要所有成员都可以对同一个项目进行操作,需要邀请成员并赋予权限,否则无法开发。 github支持两种创建项目的方式(供多人协同开发)。\n\n\n​\t1.合作者,将用户添加到仓库合作者中之后,该用户就可以向当前仓库提交代码。\n​\t2.组织,将成员邀请进入组织,组织下可以创建多个仓库,组织成员可以向组织下仓库提交代码。\n\n\n```bash\n扩展: Tag标签管理\n为了能清晰的管理版本,在公司不会直接使用 commit来做版本,会基于Tag来实现: v1.0 、v1.2 、v2.0 版本。\n```\n\n```bash\ngit tag -a v1.0 -m '版本介绍'\t 创建本地创建Tag信息\ngit tag -d v1.0\t\t\t\t\t删除Tag\ngit push origin  --tags\t\t\t将本地tag信息推送到远程仓库\ngit pull origin  --tags\t\t\t更新本地tag版本信息\n\ngit checkout v.10\t\t\t\t切换tag\ngit clone -b v0.1 地址\t\t   指定tag下载代码\n```\n\n#### 2.8.2 小弟开发\n\n- 小弟注册Github 或 Gitlab账号\n- 邀请小弟进入组织(默认对组织中的项目具有读权限)\n- 邀请小弟成为某项目的合作者\n- 小弟在自己电脑上下载代码并开发\n\n```bash\ngit clone https://github.com/oldboy-org/dbhot.git\ncd dbhot\ngit checkout dev\ngit checkout -b dzz\n写代码 ...\n\ngit add .\ngit commit -m '斗地主功能开发完成'\ngit push origin ddz\n```\n\n#### 2.8.3 code review\n\n​\t1.配置,代码review之后才能合并到dev分支。\n​\t2.小弟提交 code review申请\n​\t3.组长做 code review\n\n#### 2.8.4 提测上线(预发布)\n\n由专门团队或团队leader执行以下步骤:\n\n​    1.基于dev分值创建release分值\n\n```bash\ngit checkout dev\ngit checkout -b release\n```\n\n​\t2.测试等\n​\t3.合并到master\n\n```\n使用pull request\n或\n本地将release合并到master分支\n```\n\n​\t4.在master分支打tag\n\n```bash\ngit tag -a v2 -m '第二版  斗地主功能'\ngit push origin --tags\n```\n\n​\t5.运维人员就可以去下载代码做上线了\n\n```bash\ngit clone -b v2 地址\n```\n\n## 第七阶段:给开源软件贡献代码\n\n​\t1.fork源代码 将别人源代码拷贝到我自己的远程仓库。\n​\t2.在自己仓库进行修改代码\n​\t3.给源代码的作者提交 修复bug的申请 (pull request)\n\n### 其他\n\n#### 3.1 配置\n\n- 项目配置文件:项目/.git/conig\n\n```bash\ngit config -- user.name '冯一航'\ngit config -- local user.email 'fengyihang@xx.com'\n```\n\n- 全局配置文件: ~/.gitconig\n\n```bash\ngit config --global user.name 'fengyihang'\ngit config --global user.name 'fengyihang@xx.com'\n```\n\n- 系统配置文件: /etc/.gitconig\n\n```bash\ngit config --system user.name 'fengyihang'\ngit config --system user.name 'fengyihang@xx.com'\n\n#注意:需要有root权限\n```\n\n应用场景:\n\n```bash\ngit\tconfig\t--local user.name '冯一航'\ngit\tconfig\t--local user.email 'fengyihang@xx.com'\ngit\tconfig\t--local merge.tool bc3\ngit\tconfig\t--local mergetool.path '/usr/local/bin/bcomp'\ngit\tconfig\t--local mergetool.keepBackup false\n```\n\ngit remote add origin 地址  ,默认添加在本地配置文件中(--local)\n\n#### 3.2 免密码登录\n\n- URL中体现\n\n```\n原来的地址:  https://github.com/Fengyihang/dbhot.git\n修改的地址:  https://用户名:密码@github.com/Fengyihang/dbhot.git  \ngit remote add origin https://用户名:密码@github.com/Fengyihang/dbhot.git git push origin master\n```\n\n- SSH实现\n\n```\n1. 生成公钥和私钥(默认放在  ~/.ssh目录下,  id_rsa.pub公钥、  id_rsa私钥) ssh-keygen\n2. 拷贝公钥的内容,并设置到github中。\n3. 在git本地中配置ssh地址\ngit remote add origin git@github.com:Fengyihang/dbhot.git\n\n4. 以后使用\ngit push origin master\n```\n\n- git自动管理凭证\n\n#### 3.3 git忽略文件\n\n让Git不再管理当前目录下的某些文件。\n\n```\n*.h\n!a.h\nfiles/\n*.py[c|a|d]\n```\n\n更多参考: https://github.com/github/gitignore\n\n#### 3.4 github任务管理相关\n\n- issues ,文档以及任务管理。\n- wiki ,项目文档。\n\n结语\n好好学习天天向上, 希望git实战课程对你能够有所帮助,更多资源关注:\n\nNotion：https://www.notion.so/Git-e623a6fa739a46eebd6c6646955c41c8\n\nPDF：https://www.notion.so/Git-e623a6fa739a46eebd6c6646955c41c8#d173f23264714f6f9db110660db0fade\n","slug":"Git实战","published":1,"updated":"2023-11-01T06:41:25.654Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clofj2tbu0003oot35cfe9vpy","content":"<img src=\"http://qiniu.hanvon.top/blog_article/Learning/Git/git_logo.png\" align=\"right\" />\n\n<h1 id=\"Git实战小笔记\"><a href=\"#Git实战小笔记\" class=\"headerlink\" title=\"Git实战小笔记\"></a><strong>Git实战小笔记</strong></h1><p>什么是Git? 答：Git是一个 分布式的版本控制 软件。</p>\n<p>为什么要做版本控制？答：要保留之前所有的版本,以便回滚和修改。</p>\n<p>为啥要学Git?答：不学Git，无法参与满足大公司代码开发功能（版本管理、提交代码）。</p>\n<blockquote>\n<p>本文不讲解任何不同代码控制软件的不同，也不讲解可视化版本控制的使用。 为什么？答：大家都用这玩意，你别折腾上古工具(SVN)这些东西。</p>\n</blockquote>\n<h1 id=\"讲故事学Git\"><a href=\"#讲故事学Git\" class=\"headerlink\" title=\"讲故事学Git\"></a>讲故事学Git</h1><h2 id=\"第一阶段-单枪匹马开始干\"><a href=\"#第一阶段-单枪匹马开始干\" class=\"headerlink\" title=\"第一阶段: 单枪匹马开始干\"></a>第一阶段: 单枪匹马开始干</h2><p>想要让git对一个目录进行版本控制需要以下步骤:</p>\n<ul>\n<li>进入要管理的文件央</li>\n<li>执行初始化命令</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>管理目录下的文件状态</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br><span class=\"line\">注:新增的文件和修改过后的文件都是红色</span><br></pre></td></tr></table></figure>\n\n\n<p>管理指定文件(红变绿)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add [filename.filetype] //添加到缓存区</span><br><span class=\"line\">git add .</span><br></pre></td></tr></table></figure>\n\n<p> git status color:</p>\n<p> red 🔴:not add</p>\n<p> green 🟢:had added</p>\n<ul>\n<li>个人信息配置:用户名、邮箱 【一次即可】</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.email <span class=\"string\">&quot;[your email address]&quot;</span></span><br><span class=\"line\">git config --global user.name <span class=\"string\">&quot;[your nickname]&quot;</span> </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>生成版本</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">&#x27;描述信息&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看版本记录</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第二阶段-拓展新功能\"><a href=\"#第二阶段-拓展新功能\" class=\"headerlink\" title=\"第二阶段: 拓展新功能\"></a>第二阶段: 拓展新功能</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add</span><br><span class=\"line\">git commit -m <span class=\"string\">&#x27;短视频&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第三阶段-“约饭事件”\"><a href=\"#第三阶段-“约饭事件”\" class=\"headerlink\" title=\"第三阶段: “约饭事件”\"></a>第三阶段: “约饭事件”</h2><ul>\n<li>回滚(reset)至之前版本</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span></span><br><span class=\"line\">git reset --hard [commit <span class=\"built_in\">id</span>] //回滚版本</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>回滚之之后版本</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog</span><br><span class=\"line\">git reset --hard [commit <span class=\"built_in\">id</span>] //回滚参考日志版本（无任何当前工作缓存）</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小总结\"><a href=\"#小总结\" class=\"headerlink\" title=\"小总结\"></a>小总结</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git add</span><br><span class=\"line\">git commit</span><br><span class=\"line\">git <span class=\"built_in\">log</span></span><br><span class=\"line\">git reflog</span><br><span class=\"line\">git reset --hard 版本号</span><br></pre></td></tr></table></figure>\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Learning/Git/sum.png\" style=\"max-width:70%; height:auto\" />\n\n<h2 id=\"第四阶段-商城-amp-紧急修复bug\"><a href=\"#第四阶段-商城-amp-紧急修复bug\" class=\"headerlink\" title=\"第四阶段:商城&amp;紧急修复bug\"></a>第四阶段:商城&amp;紧急修复bug</h2><h4 id=\"2-5-1分支\"><a href=\"#2-5-1分支\" class=\"headerlink\" title=\"2.5.1分支\"></a>2.5.1分支</h4><p>分支可以给使用者提供多个环境的可以,意味着你可以把你的工作从开发主线上分离开来,以免影响开 发主线。</p>\n<h4 id=\"2-5-2-紧急修复bug方案\"><a href=\"#2-5-2-紧急修复bug方案\" class=\"headerlink\" title=\"2.5.2 紧急修复bug方案\"></a>2.5.2 紧急修复bug方案</h4><img src=\"http://qiniu.hanvon.top/blog_article/Learning/Git/emergencyrepair.png\" style=\"max-width:70%; height:auto\" />\n\n<p>2.5.3 命令总结</p>\n<ul>\n<li>查看分支 (展示分支)</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建分支</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch [branch name]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>切换分支</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout [branch name]</span><br><span class=\"line\">git checkout -b [branch name] //切换并且创建分支</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>分支改名</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -m [old branch name] [new branch name] //分支改名</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>分支合并(可能产生冲突)</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge [branch name] //合并到哪，切换哪的分支。</span><br><span class=\"line\">🔴注意:先切换分支再合并</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除分支</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d [branch name] //删除分支</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-5-4-工作流\"><a href=\"#2-5-4-工作流\" class=\"headerlink\" title=\"2.5.4 工作流\"></a>2.5.4 工作流</h4><img src=\"http://qiniu.hanvon.top/blog_article/Learning/Git/branch.png\" style=\"zoom:50%;\" />\n\n<h2 id=\"第五阶段-进军三里屯\"><a href=\"#第五阶段-进军三里屯\" class=\"headerlink\" title=\"第五阶段:进军三里屯\"></a>第五阶段:进军三里屯</h2><p>有钱之后就要造呀,一个人在三里屯买了一层楼做办公室。</p>\n<img src=\"http://qiniu.hanvon.top/blog_article/Learning/Git/hulian.png\" style=\"max-width:60%; height:auto\" />\n\n<h4 id=\"2-6-1-第一天上班前在家上传代码\"><a href=\"#2-6-1-第一天上班前在家上传代码\" class=\"headerlink\" title=\"2.6.1 第一天上班前在家上传代码\"></a>2.6.1 第一天上班前在家上传代码</h4><p>首先,需要注册github账号,并创建远程仓库,然后再执行如下命令,将代码上传到github。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 给远程仓库起别名</span><br><span class=\"line\">\tgit remote add origin 远程仓库地址</span><br><span class=\"line\">2. 向远程推送代码</span><br><span class=\"line\">\tgit push -u origin 分支</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-6-2-初次在公司新电脑下载代码\"><a href=\"#2-6-2-初次在公司新电脑下载代码\" class=\"headerlink\" title=\"2.6.2 初次在公司新电脑下载代码\"></a>2.6.2 初次在公司新电脑下载代码</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 克隆远程仓库代码</span><br><span class=\"line\">\tgit <span class=\"built_in\">clone</span> 远程仓库地址  (内部已实现git remote add origin 远程仓库地址)</span><br><span class=\"line\">2. 切换分支</span><br><span class=\"line\">\tgit checkout 分支</span><br></pre></td></tr></table></figure>\n\n<p>在公司下载完代码后,继续开发</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 切换到dev分支进行开发</span><br><span class=\"line\">\tgit checkout dev</span><br><span class=\"line\">2. 把master分支合并到dev [仅一次] </span><br><span class=\"line\">\tgit merge master</span><br><span class=\"line\">3. 修改代码</span><br><span class=\"line\">4. 提交代码</span><br><span class=\"line\">\tgit add .</span><br><span class=\"line\">\tgit commit -m <span class=\"string\">&#x27;xx&#x27;</span></span><br><span class=\"line\">\tgit push origin dev</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-6-3-下班回到家继续写代码\"><a href=\"#2-6-3-下班回到家继续写代码\" class=\"headerlink\" title=\"2.6.3 下班回到家继续写代码\"></a>2.6.3 下班回到家继续写代码</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 切换到dev分支进行开发</span><br><span class=\"line\">\tgit checkout dev</span><br><span class=\"line\">2. 拉代码</span><br><span class=\"line\">\tgit pull origin dev</span><br><span class=\"line\">3. 继续开发</span><br><span class=\"line\"></span><br><span class=\"line\">4. 提交代码</span><br><span class=\"line\">\tgit add .</span><br><span class=\"line\">\tgit commit -m <span class=\"string\">&#x27;xx&#x27;</span></span><br><span class=\"line\">\tgit push origin dev</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-6-4-到公司继续开发\"><a href=\"#2-6-4-到公司继续开发\" class=\"headerlink\" title=\"2.6.4 到公司继续开发\"></a>2.6.4 到公司继续开发</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 切换到dev分支进行开发</span><br><span class=\"line\">\tgit checkout dev</span><br><span class=\"line\">2. 拉最新代码(不必再<span class=\"built_in\">clone</span>,只需要通过pull获取最新代码即可)</span><br><span class=\"line\">\tgit pull origin dev</span><br><span class=\"line\">3. 继续开发</span><br><span class=\"line\"></span><br><span class=\"line\">4. 提交代码</span><br><span class=\"line\">\tgit add .</span><br><span class=\"line\">\tgit commit -m <span class=\"string\">&#x27;xx&#x27;</span></span><br><span class=\"line\">\tgit push origin dev</span><br></pre></td></tr></table></figure>\n\n<p>开发完毕,要上线了！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 将dev分支合并到master,进行上线</span><br><span class=\"line\">\tgit checkout master</span><br><span class=\"line\">\tgit merge dev</span><br><span class=\"line\">\tgit push origin master</span><br><span class=\"line\">2. 把dev分支也推送到远程</span><br><span class=\"line\">\tgit checkout dev</span><br><span class=\"line\">\tgit merge master</span><br><span class=\"line\">\tgit push origin dev</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-6-5-在公司约妹子忘记提交代码\"><a href=\"#2-6-5-在公司约妹子忘记提交代码\" class=\"headerlink\" title=\"2.6.5 在公司约妹子忘记提交代码\"></a>2.6.5 在公司约妹子忘记提交代码</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 拉代码</span><br><span class=\"line\">\tgit pull origin dev</span><br><span class=\"line\">2. 继续开发</span><br><span class=\"line\"></span><br><span class=\"line\">3. 提交代码</span><br><span class=\"line\">\tgit add .</span><br><span class=\"line\">\tgit commit -m <span class=\"string\">&#x27;xx&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">注:忘记push了</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-6-6-回家继续写代码\"><a href=\"#2-6-6-回家继续写代码\" class=\"headerlink\" title=\"2.6.6 回家继续写代码\"></a>2.6.6 回家继续写代码</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 拉代码,发现在公司写的代码忘记提交 ... </span><br><span class=\"line\">\tgit pull origin dev</span><br><span class=\"line\"></span><br><span class=\"line\">2. 继续开发其他功能</span><br><span class=\"line\"></span><br><span class=\"line\">3. 把dev分支也推送到远程</span><br><span class=\"line\">\tgit add .</span><br><span class=\"line\">\tgit commit -m <span class=\"string\">&#x27;xx&#x27;</span></span><br><span class=\"line\">\tgit push origin dev</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-6-7-到公司继续写代码\"><a href=\"#2-6-7-到公司继续写代码\" class=\"headerlink\" title=\"2.6.7 到公司继续写代码\"></a>2.6.7 到公司继续写代码</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 拉代码,把晚上在家写的代码拉到本地(有合并、可能产生冲突)</span><br><span class=\"line\">\tgit pull origin dev</span><br><span class=\"line\"></span><br><span class=\"line\">2. 如果有冲突,手动解决冲突</span><br><span class=\"line\"></span><br><span class=\"line\">3. 继续开发其他功能</span><br><span class=\"line\"></span><br><span class=\"line\">4. 把dev分支也推送到远程</span><br><span class=\"line\">\tgit add .</span><br><span class=\"line\">\tgit commit -m <span class=\"string\">&#x27;xx&#x27;</span></span><br><span class=\"line\">\tgit push origin dev</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-6-8-其他\"><a href=\"#2-6-8-其他\" class=\"headerlink\" title=\"2.6.8 其他\"></a>2.6.8 其他</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin dev</span><br><span class=\"line\">等价于</span><br><span class=\"line\">git fetch origin dev</span><br><span class=\"line\">git merge origin/dev</span><br></pre></td></tr></table></figure>\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Learning/Git/elsegitsum.png\" style=\"max-width:80%; height:auto\" />\n\n<h4 id=\"2-6-9-rebase的作用\"><a href=\"#2-6-9-rebase的作用\" class=\"headerlink\" title=\"2.6.9 rebase的作用?\"></a>2.6.9 rebase的作用?</h4><p>rebase可以保持提交记录简洁,不分叉。</p>\n<h4 id=\"2-6-10-快速解决冲突\"><a href=\"#2-6-10-快速解决冲突\" class=\"headerlink\" title=\"2.6.10 快速解决冲突\"></a>2.6.10 快速解决冲突</h4><p>​\t①安装beyond compare<br>​\t②在git中配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --<span class=\"built_in\">local</span> merge.tool bc3</span><br><span class=\"line\">git config --<span class=\"built_in\">local</span> mergetool.path <span class=\"string\">&#x27;/usr/local/bin/bcomp&#x27;</span></span><br><span class=\"line\">git config --<span class=\"built_in\">local</span> mergetool.keepBackup <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<p>​\t③应用beyond compare 解决冲突</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git mergetool</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-7-小总结\"><a href=\"#2-7-小总结\" class=\"headerlink\" title=\"2.7 小总结\"></a>2.7 小总结</h3><ul>\n<li>添加远程连接(别名)</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin 地址</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>推送代码</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin dev</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>下载代码</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> 地址</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>拉取代码</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin dev</span><br><span class=\"line\">等价于</span><br><span class=\"line\">git fetch origin dev</span><br><span class=\"line\">git merge origin/dev</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>保持代码提交整洁(变基)</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase 分支</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>记录图形展示</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> --graph --pretty=format:<span class=\"string\">&quot;%h %s&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第六阶段-多人协同开发工作流\"><a href=\"#第六阶段-多人协同开发工作流\" class=\"headerlink\" title=\"第六阶段:多人协同开发工作流\"></a>第六阶段:多人协同开发工作流</h2><h4 id=\"2-8-1-创建项目-amp-邀请成员\"><a href=\"#2-8-1-创建项目-amp-邀请成员\" class=\"headerlink\" title=\"2.8.1 创建项目&amp;邀请成员\"></a>2.8.1 创建项目&amp;邀请成员</h4><p>协同开发时,需要所有成员都可以对同一个项目进行操作,需要邀请成员并赋予权限,否则无法开发。 github支持两种创建项目的方式(供多人协同开发)。</p>\n<p>​\t1.合作者,将用户添加到仓库合作者中之后,该用户就可以向当前仓库提交代码。<br>​\t2.组织,将成员邀请进入组织,组织下可以创建多个仓库,组织成员可以向组织下仓库提交代码。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">扩展: Tag标签管理</span><br><span class=\"line\">为了能清晰的管理版本,在公司不会直接使用 commit来做版本,会基于Tag来实现: v1.0 、v1.2 、v2.0 版本。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -a v1.0 -m <span class=\"string\">&#x27;版本介绍&#x27;</span>\t 创建本地创建Tag信息</span><br><span class=\"line\">git tag -d v1.0\t\t\t\t\t删除Tag</span><br><span class=\"line\">git push origin  --tags\t\t\t将本地tag信息推送到远程仓库</span><br><span class=\"line\">git pull origin  --tags\t\t\t更新本地tag版本信息</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout v.10\t\t\t\t切换tag</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> -b v0.1 地址\t\t   指定tag下载代码</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-8-2-小弟开发\"><a href=\"#2-8-2-小弟开发\" class=\"headerlink\" title=\"2.8.2 小弟开发\"></a>2.8.2 小弟开发</h4><ul>\n<li>小弟注册Github 或 Gitlab账号</li>\n<li>邀请小弟进入组织(默认对组织中的项目具有读权限)</li>\n<li>邀请小弟成为某项目的合作者</li>\n<li>小弟在自己电脑上下载代码并开发</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/oldboy-org/dbhot.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> dbhot</span><br><span class=\"line\">git checkout dev</span><br><span class=\"line\">git checkout -b dzz</span><br><span class=\"line\">写代码 ...</span><br><span class=\"line\"></span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">&#x27;斗地主功能开发完成&#x27;</span></span><br><span class=\"line\">git push origin ddz</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-8-3-code-review\"><a href=\"#2-8-3-code-review\" class=\"headerlink\" title=\"2.8.3 code review\"></a>2.8.3 code review</h4><p>​\t1.配置,代码review之后才能合并到dev分支。<br>​\t2.小弟提交 code review申请<br>​\t3.组长做 code review</p>\n<h4 id=\"2-8-4-提测上线-预发布\"><a href=\"#2-8-4-提测上线-预发布\" class=\"headerlink\" title=\"2.8.4 提测上线(预发布)\"></a>2.8.4 提测上线(预发布)</h4><p>由专门团队或团队leader执行以下步骤:</p>\n<p>​    1.基于dev分值创建release分值</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout dev</span><br><span class=\"line\">git checkout -b release</span><br></pre></td></tr></table></figure>\n\n<p>​\t2.测试等<br>​\t3.合并到master</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用pull request</span><br><span class=\"line\">或</span><br><span class=\"line\">本地将release合并到master分支</span><br></pre></td></tr></table></figure>\n\n<p>​\t4.在master分支打tag</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -a v2 -m <span class=\"string\">&#x27;第二版  斗地主功能&#x27;</span></span><br><span class=\"line\">git push origin --tags</span><br></pre></td></tr></table></figure>\n\n<p>​\t5.运维人员就可以去下载代码做上线了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> -b v2 地址</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第七阶段-给开源软件贡献代码\"><a href=\"#第七阶段-给开源软件贡献代码\" class=\"headerlink\" title=\"第七阶段:给开源软件贡献代码\"></a>第七阶段:给开源软件贡献代码</h2><p>​\t1.fork源代码 将别人源代码拷贝到我自己的远程仓库。<br>​\t2.在自己仓库进行修改代码<br>​\t3.给源代码的作者提交 修复bug的申请 (pull request)</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><h4 id=\"3-1-配置\"><a href=\"#3-1-配置\" class=\"headerlink\" title=\"3.1 配置\"></a>3.1 配置</h4><ul>\n<li>项目配置文件:项目&#x2F;.git&#x2F;conig</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config -- user.name <span class=\"string\">&#x27;冯一航&#x27;</span></span><br><span class=\"line\">git config -- <span class=\"built_in\">local</span> user.email <span class=\"string\">&#x27;fengyihang@xx.com&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>全局配置文件: ~&#x2F;.gitconig</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">&#x27;fengyihang&#x27;</span></span><br><span class=\"line\">git config --global user.name <span class=\"string\">&#x27;fengyihang@xx.com&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>系统配置文件: &#x2F;etc&#x2F;.gitconig</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --system user.name <span class=\"string\">&#x27;fengyihang&#x27;</span></span><br><span class=\"line\">git config --system user.name <span class=\"string\">&#x27;fengyihang@xx.com&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#注意:需要有root权限</span></span><br></pre></td></tr></table></figure>\n\n<p>应用场景:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git\tconfig\t--<span class=\"built_in\">local</span> user.name <span class=\"string\">&#x27;冯一航&#x27;</span></span><br><span class=\"line\">git\tconfig\t--<span class=\"built_in\">local</span> user.email <span class=\"string\">&#x27;fengyihang@xx.com&#x27;</span></span><br><span class=\"line\">git\tconfig\t--<span class=\"built_in\">local</span> merge.tool bc3</span><br><span class=\"line\">git\tconfig\t--<span class=\"built_in\">local</span> mergetool.path <span class=\"string\">&#x27;/usr/local/bin/bcomp&#x27;</span></span><br><span class=\"line\">git\tconfig\t--<span class=\"built_in\">local</span> mergetool.keepBackup <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<p>git remote add origin 地址  ,默认添加在本地配置文件中(–local)</p>\n<h4 id=\"3-2-免密码登录\"><a href=\"#3-2-免密码登录\" class=\"headerlink\" title=\"3.2 免密码登录\"></a>3.2 免密码登录</h4><ul>\n<li>URL中体现</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原来的地址:  https://github.com/Fengyihang/dbhot.git</span><br><span class=\"line\">修改的地址:  https://用户名:密码@github.com/Fengyihang/dbhot.git  </span><br><span class=\"line\">git remote add origin https://用户名:密码@github.com/Fengyihang/dbhot.git git push origin master</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>SSH实现</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 生成公钥和私钥(默认放在  ~/.ssh目录下,  id_rsa.pub公钥、  id_rsa私钥) ssh-keygen</span><br><span class=\"line\">2. 拷贝公钥的内容,并设置到github中。</span><br><span class=\"line\">3. 在git本地中配置ssh地址</span><br><span class=\"line\">git remote add origin git@github.com:Fengyihang/dbhot.git</span><br><span class=\"line\"></span><br><span class=\"line\">4. 以后使用</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>git自动管理凭证</li>\n</ul>\n<h4 id=\"3-3-git忽略文件\"><a href=\"#3-3-git忽略文件\" class=\"headerlink\" title=\"3.3 git忽略文件\"></a>3.3 git忽略文件</h4><p>让Git不再管理当前目录下的某些文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*.h</span><br><span class=\"line\">!a.h</span><br><span class=\"line\">files/</span><br><span class=\"line\">*.py[c|a|d]</span><br></pre></td></tr></table></figure>\n\n<p>更多参考: <a href=\"https://github.com/github/gitignore\">https://github.com/github/gitignore</a></p>\n<h4 id=\"3-4-github任务管理相关\"><a href=\"#3-4-github任务管理相关\" class=\"headerlink\" title=\"3.4 github任务管理相关\"></a>3.4 github任务管理相关</h4><ul>\n<li>issues ,文档以及任务管理。</li>\n<li>wiki ,项目文档。</li>\n</ul>\n<p>结语<br>好好学习天天向上, 希望git实战课程对你能够有所帮助,更多资源关注:</p>\n<p>Notion：<a href=\"https://www.notion.so/Git-e623a6fa739a46eebd6c6646955c41c8\">https://www.notion.so/Git-e623a6fa739a46eebd6c6646955c41c8</a></p>\n<p>PDF：<a href=\"https://www.notion.so/Git-e623a6fa739a46eebd6c6646955c41c8#d173f23264714f6f9db110660db0fade\">https://www.notion.so/Git-e623a6fa739a46eebd6c6646955c41c8#d173f23264714f6f9db110660db0fade</a></p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"安装文, 档快速开始","link":"https://butterfly.js.org/posts/21cfbf15/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"Butterfly主题 帮助文档"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<img src=\"http://qiniu.hanvon.top/blog_article/Learning/Git/git_logo.png\" align=\"right\" />\n\n<h1 id=\"Git实战小笔记\"><a href=\"#Git实战小笔记\" class=\"headerlink\" title=\"Git实战小笔记\"></a><strong>Git实战小笔记</strong></h1><p>什么是Git? 答：Git是一个 分布式的版本控制 软件。</p>\n<p>为什么要做版本控制？答：要保留之前所有的版本,以便回滚和修改。</p>\n<p>为啥要学Git?答：不学Git，无法参与满足大公司代码开发功能（版本管理、提交代码）。</p>\n<blockquote>\n<p>本文不讲解任何不同代码控制软件的不同，也不讲解可视化版本控制的使用。 为什么？答：大家都用这玩意，你别折腾上古工具(SVN)这些东西。</p>\n</blockquote>\n<h1 id=\"讲故事学Git\"><a href=\"#讲故事学Git\" class=\"headerlink\" title=\"讲故事学Git\"></a>讲故事学Git</h1><h2 id=\"第一阶段-单枪匹马开始干\"><a href=\"#第一阶段-单枪匹马开始干\" class=\"headerlink\" title=\"第一阶段: 单枪匹马开始干\"></a>第一阶段: 单枪匹马开始干</h2><p>想要让git对一个目录进行版本控制需要以下步骤:</p>\n<ul>\n<li>进入要管理的文件央</li>\n<li>执行初始化命令</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>管理目录下的文件状态</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br><span class=\"line\">注:新增的文件和修改过后的文件都是红色</span><br></pre></td></tr></table></figure>\n\n\n<p>管理指定文件(红变绿)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add [filename.filetype] //添加到缓存区</span><br><span class=\"line\">git add .</span><br></pre></td></tr></table></figure>\n\n<p> git status color:</p>\n<p> red 🔴:not add</p>\n<p> green 🟢:had added</p>\n<ul>\n<li>个人信息配置:用户名、邮箱 【一次即可】</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.email <span class=\"string\">&quot;[your email address]&quot;</span></span><br><span class=\"line\">git config --global user.name <span class=\"string\">&quot;[your nickname]&quot;</span> </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>生成版本</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">&#x27;描述信息&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看版本记录</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第二阶段-拓展新功能\"><a href=\"#第二阶段-拓展新功能\" class=\"headerlink\" title=\"第二阶段: 拓展新功能\"></a>第二阶段: 拓展新功能</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add</span><br><span class=\"line\">git commit -m <span class=\"string\">&#x27;短视频&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第三阶段-“约饭事件”\"><a href=\"#第三阶段-“约饭事件”\" class=\"headerlink\" title=\"第三阶段: “约饭事件”\"></a>第三阶段: “约饭事件”</h2><ul>\n<li>回滚(reset)至之前版本</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span></span><br><span class=\"line\">git reset --hard [commit <span class=\"built_in\">id</span>] //回滚版本</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>回滚之之后版本</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog</span><br><span class=\"line\">git reset --hard [commit <span class=\"built_in\">id</span>] //回滚参考日志版本（无任何当前工作缓存）</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小总结\"><a href=\"#小总结\" class=\"headerlink\" title=\"小总结\"></a>小总结</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git add</span><br><span class=\"line\">git commit</span><br><span class=\"line\">git <span class=\"built_in\">log</span></span><br><span class=\"line\">git reflog</span><br><span class=\"line\">git reset --hard 版本号</span><br></pre></td></tr></table></figure>\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Learning/Git/sum.png\" style=\"max-width:70%; height:auto\" />\n\n<h2 id=\"第四阶段-商城-amp-紧急修复bug\"><a href=\"#第四阶段-商城-amp-紧急修复bug\" class=\"headerlink\" title=\"第四阶段:商城&amp;紧急修复bug\"></a>第四阶段:商城&amp;紧急修复bug</h2><h4 id=\"2-5-1分支\"><a href=\"#2-5-1分支\" class=\"headerlink\" title=\"2.5.1分支\"></a>2.5.1分支</h4><p>分支可以给使用者提供多个环境的可以,意味着你可以把你的工作从开发主线上分离开来,以免影响开 发主线。</p>\n<h4 id=\"2-5-2-紧急修复bug方案\"><a href=\"#2-5-2-紧急修复bug方案\" class=\"headerlink\" title=\"2.5.2 紧急修复bug方案\"></a>2.5.2 紧急修复bug方案</h4><img src=\"http://qiniu.hanvon.top/blog_article/Learning/Git/emergencyrepair.png\" style=\"max-width:70%; height:auto\" />\n\n<p>2.5.3 命令总结</p>\n<ul>\n<li>查看分支 (展示分支)</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建分支</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch [branch name]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>切换分支</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout [branch name]</span><br><span class=\"line\">git checkout -b [branch name] //切换并且创建分支</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>分支改名</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -m [old branch name] [new branch name] //分支改名</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>分支合并(可能产生冲突)</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge [branch name] //合并到哪，切换哪的分支。</span><br><span class=\"line\">🔴注意:先切换分支再合并</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除分支</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d [branch name] //删除分支</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-5-4-工作流\"><a href=\"#2-5-4-工作流\" class=\"headerlink\" title=\"2.5.4 工作流\"></a>2.5.4 工作流</h4><img src=\"http://qiniu.hanvon.top/blog_article/Learning/Git/branch.png\" style=\"zoom:50%;\" />\n\n<h2 id=\"第五阶段-进军三里屯\"><a href=\"#第五阶段-进军三里屯\" class=\"headerlink\" title=\"第五阶段:进军三里屯\"></a>第五阶段:进军三里屯</h2><p>有钱之后就要造呀,一个人在三里屯买了一层楼做办公室。</p>\n<img src=\"http://qiniu.hanvon.top/blog_article/Learning/Git/hulian.png\" style=\"max-width:60%; height:auto\" />\n\n<h4 id=\"2-6-1-第一天上班前在家上传代码\"><a href=\"#2-6-1-第一天上班前在家上传代码\" class=\"headerlink\" title=\"2.6.1 第一天上班前在家上传代码\"></a>2.6.1 第一天上班前在家上传代码</h4><p>首先,需要注册github账号,并创建远程仓库,然后再执行如下命令,将代码上传到github。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 给远程仓库起别名</span><br><span class=\"line\">\tgit remote add origin 远程仓库地址</span><br><span class=\"line\">2. 向远程推送代码</span><br><span class=\"line\">\tgit push -u origin 分支</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-6-2-初次在公司新电脑下载代码\"><a href=\"#2-6-2-初次在公司新电脑下载代码\" class=\"headerlink\" title=\"2.6.2 初次在公司新电脑下载代码\"></a>2.6.2 初次在公司新电脑下载代码</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 克隆远程仓库代码</span><br><span class=\"line\">\tgit <span class=\"built_in\">clone</span> 远程仓库地址  (内部已实现git remote add origin 远程仓库地址)</span><br><span class=\"line\">2. 切换分支</span><br><span class=\"line\">\tgit checkout 分支</span><br></pre></td></tr></table></figure>\n\n<p>在公司下载完代码后,继续开发</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 切换到dev分支进行开发</span><br><span class=\"line\">\tgit checkout dev</span><br><span class=\"line\">2. 把master分支合并到dev [仅一次] </span><br><span class=\"line\">\tgit merge master</span><br><span class=\"line\">3. 修改代码</span><br><span class=\"line\">4. 提交代码</span><br><span class=\"line\">\tgit add .</span><br><span class=\"line\">\tgit commit -m <span class=\"string\">&#x27;xx&#x27;</span></span><br><span class=\"line\">\tgit push origin dev</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-6-3-下班回到家继续写代码\"><a href=\"#2-6-3-下班回到家继续写代码\" class=\"headerlink\" title=\"2.6.3 下班回到家继续写代码\"></a>2.6.3 下班回到家继续写代码</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 切换到dev分支进行开发</span><br><span class=\"line\">\tgit checkout dev</span><br><span class=\"line\">2. 拉代码</span><br><span class=\"line\">\tgit pull origin dev</span><br><span class=\"line\">3. 继续开发</span><br><span class=\"line\"></span><br><span class=\"line\">4. 提交代码</span><br><span class=\"line\">\tgit add .</span><br><span class=\"line\">\tgit commit -m <span class=\"string\">&#x27;xx&#x27;</span></span><br><span class=\"line\">\tgit push origin dev</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-6-4-到公司继续开发\"><a href=\"#2-6-4-到公司继续开发\" class=\"headerlink\" title=\"2.6.4 到公司继续开发\"></a>2.6.4 到公司继续开发</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 切换到dev分支进行开发</span><br><span class=\"line\">\tgit checkout dev</span><br><span class=\"line\">2. 拉最新代码(不必再<span class=\"built_in\">clone</span>,只需要通过pull获取最新代码即可)</span><br><span class=\"line\">\tgit pull origin dev</span><br><span class=\"line\">3. 继续开发</span><br><span class=\"line\"></span><br><span class=\"line\">4. 提交代码</span><br><span class=\"line\">\tgit add .</span><br><span class=\"line\">\tgit commit -m <span class=\"string\">&#x27;xx&#x27;</span></span><br><span class=\"line\">\tgit push origin dev</span><br></pre></td></tr></table></figure>\n\n<p>开发完毕,要上线了！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 将dev分支合并到master,进行上线</span><br><span class=\"line\">\tgit checkout master</span><br><span class=\"line\">\tgit merge dev</span><br><span class=\"line\">\tgit push origin master</span><br><span class=\"line\">2. 把dev分支也推送到远程</span><br><span class=\"line\">\tgit checkout dev</span><br><span class=\"line\">\tgit merge master</span><br><span class=\"line\">\tgit push origin dev</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-6-5-在公司约妹子忘记提交代码\"><a href=\"#2-6-5-在公司约妹子忘记提交代码\" class=\"headerlink\" title=\"2.6.5 在公司约妹子忘记提交代码\"></a>2.6.5 在公司约妹子忘记提交代码</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 拉代码</span><br><span class=\"line\">\tgit pull origin dev</span><br><span class=\"line\">2. 继续开发</span><br><span class=\"line\"></span><br><span class=\"line\">3. 提交代码</span><br><span class=\"line\">\tgit add .</span><br><span class=\"line\">\tgit commit -m <span class=\"string\">&#x27;xx&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">注:忘记push了</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-6-6-回家继续写代码\"><a href=\"#2-6-6-回家继续写代码\" class=\"headerlink\" title=\"2.6.6 回家继续写代码\"></a>2.6.6 回家继续写代码</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 拉代码,发现在公司写的代码忘记提交 ... </span><br><span class=\"line\">\tgit pull origin dev</span><br><span class=\"line\"></span><br><span class=\"line\">2. 继续开发其他功能</span><br><span class=\"line\"></span><br><span class=\"line\">3. 把dev分支也推送到远程</span><br><span class=\"line\">\tgit add .</span><br><span class=\"line\">\tgit commit -m <span class=\"string\">&#x27;xx&#x27;</span></span><br><span class=\"line\">\tgit push origin dev</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-6-7-到公司继续写代码\"><a href=\"#2-6-7-到公司继续写代码\" class=\"headerlink\" title=\"2.6.7 到公司继续写代码\"></a>2.6.7 到公司继续写代码</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 拉代码,把晚上在家写的代码拉到本地(有合并、可能产生冲突)</span><br><span class=\"line\">\tgit pull origin dev</span><br><span class=\"line\"></span><br><span class=\"line\">2. 如果有冲突,手动解决冲突</span><br><span class=\"line\"></span><br><span class=\"line\">3. 继续开发其他功能</span><br><span class=\"line\"></span><br><span class=\"line\">4. 把dev分支也推送到远程</span><br><span class=\"line\">\tgit add .</span><br><span class=\"line\">\tgit commit -m <span class=\"string\">&#x27;xx&#x27;</span></span><br><span class=\"line\">\tgit push origin dev</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-6-8-其他\"><a href=\"#2-6-8-其他\" class=\"headerlink\" title=\"2.6.8 其他\"></a>2.6.8 其他</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin dev</span><br><span class=\"line\">等价于</span><br><span class=\"line\">git fetch origin dev</span><br><span class=\"line\">git merge origin/dev</span><br></pre></td></tr></table></figure>\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Learning/Git/elsegitsum.png\" style=\"max-width:80%; height:auto\" />\n\n<h4 id=\"2-6-9-rebase的作用\"><a href=\"#2-6-9-rebase的作用\" class=\"headerlink\" title=\"2.6.9 rebase的作用?\"></a>2.6.9 rebase的作用?</h4><p>rebase可以保持提交记录简洁,不分叉。</p>\n<h4 id=\"2-6-10-快速解决冲突\"><a href=\"#2-6-10-快速解决冲突\" class=\"headerlink\" title=\"2.6.10 快速解决冲突\"></a>2.6.10 快速解决冲突</h4><p>​\t①安装beyond compare<br>​\t②在git中配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --<span class=\"built_in\">local</span> merge.tool bc3</span><br><span class=\"line\">git config --<span class=\"built_in\">local</span> mergetool.path <span class=\"string\">&#x27;/usr/local/bin/bcomp&#x27;</span></span><br><span class=\"line\">git config --<span class=\"built_in\">local</span> mergetool.keepBackup <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<p>​\t③应用beyond compare 解决冲突</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git mergetool</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-7-小总结\"><a href=\"#2-7-小总结\" class=\"headerlink\" title=\"2.7 小总结\"></a>2.7 小总结</h3><ul>\n<li>添加远程连接(别名)</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin 地址</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>推送代码</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin dev</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>下载代码</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> 地址</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>拉取代码</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin dev</span><br><span class=\"line\">等价于</span><br><span class=\"line\">git fetch origin dev</span><br><span class=\"line\">git merge origin/dev</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>保持代码提交整洁(变基)</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase 分支</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>记录图形展示</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> --graph --pretty=format:<span class=\"string\">&quot;%h %s&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第六阶段-多人协同开发工作流\"><a href=\"#第六阶段-多人协同开发工作流\" class=\"headerlink\" title=\"第六阶段:多人协同开发工作流\"></a>第六阶段:多人协同开发工作流</h2><h4 id=\"2-8-1-创建项目-amp-邀请成员\"><a href=\"#2-8-1-创建项目-amp-邀请成员\" class=\"headerlink\" title=\"2.8.1 创建项目&amp;邀请成员\"></a>2.8.1 创建项目&amp;邀请成员</h4><p>协同开发时,需要所有成员都可以对同一个项目进行操作,需要邀请成员并赋予权限,否则无法开发。 github支持两种创建项目的方式(供多人协同开发)。</p>\n<p>​\t1.合作者,将用户添加到仓库合作者中之后,该用户就可以向当前仓库提交代码。<br>​\t2.组织,将成员邀请进入组织,组织下可以创建多个仓库,组织成员可以向组织下仓库提交代码。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">扩展: Tag标签管理</span><br><span class=\"line\">为了能清晰的管理版本,在公司不会直接使用 commit来做版本,会基于Tag来实现: v1.0 、v1.2 、v2.0 版本。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -a v1.0 -m <span class=\"string\">&#x27;版本介绍&#x27;</span>\t 创建本地创建Tag信息</span><br><span class=\"line\">git tag -d v1.0\t\t\t\t\t删除Tag</span><br><span class=\"line\">git push origin  --tags\t\t\t将本地tag信息推送到远程仓库</span><br><span class=\"line\">git pull origin  --tags\t\t\t更新本地tag版本信息</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout v.10\t\t\t\t切换tag</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> -b v0.1 地址\t\t   指定tag下载代码</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-8-2-小弟开发\"><a href=\"#2-8-2-小弟开发\" class=\"headerlink\" title=\"2.8.2 小弟开发\"></a>2.8.2 小弟开发</h4><ul>\n<li>小弟注册Github 或 Gitlab账号</li>\n<li>邀请小弟进入组织(默认对组织中的项目具有读权限)</li>\n<li>邀请小弟成为某项目的合作者</li>\n<li>小弟在自己电脑上下载代码并开发</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/oldboy-org/dbhot.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> dbhot</span><br><span class=\"line\">git checkout dev</span><br><span class=\"line\">git checkout -b dzz</span><br><span class=\"line\">写代码 ...</span><br><span class=\"line\"></span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">&#x27;斗地主功能开发完成&#x27;</span></span><br><span class=\"line\">git push origin ddz</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-8-3-code-review\"><a href=\"#2-8-3-code-review\" class=\"headerlink\" title=\"2.8.3 code review\"></a>2.8.3 code review</h4><p>​\t1.配置,代码review之后才能合并到dev分支。<br>​\t2.小弟提交 code review申请<br>​\t3.组长做 code review</p>\n<h4 id=\"2-8-4-提测上线-预发布\"><a href=\"#2-8-4-提测上线-预发布\" class=\"headerlink\" title=\"2.8.4 提测上线(预发布)\"></a>2.8.4 提测上线(预发布)</h4><p>由专门团队或团队leader执行以下步骤:</p>\n<p>​    1.基于dev分值创建release分值</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout dev</span><br><span class=\"line\">git checkout -b release</span><br></pre></td></tr></table></figure>\n\n<p>​\t2.测试等<br>​\t3.合并到master</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用pull request</span><br><span class=\"line\">或</span><br><span class=\"line\">本地将release合并到master分支</span><br></pre></td></tr></table></figure>\n\n<p>​\t4.在master分支打tag</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -a v2 -m <span class=\"string\">&#x27;第二版  斗地主功能&#x27;</span></span><br><span class=\"line\">git push origin --tags</span><br></pre></td></tr></table></figure>\n\n<p>​\t5.运维人员就可以去下载代码做上线了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> -b v2 地址</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第七阶段-给开源软件贡献代码\"><a href=\"#第七阶段-给开源软件贡献代码\" class=\"headerlink\" title=\"第七阶段:给开源软件贡献代码\"></a>第七阶段:给开源软件贡献代码</h2><p>​\t1.fork源代码 将别人源代码拷贝到我自己的远程仓库。<br>​\t2.在自己仓库进行修改代码<br>​\t3.给源代码的作者提交 修复bug的申请 (pull request)</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><h4 id=\"3-1-配置\"><a href=\"#3-1-配置\" class=\"headerlink\" title=\"3.1 配置\"></a>3.1 配置</h4><ul>\n<li>项目配置文件:项目&#x2F;.git&#x2F;conig</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config -- user.name <span class=\"string\">&#x27;冯一航&#x27;</span></span><br><span class=\"line\">git config -- <span class=\"built_in\">local</span> user.email <span class=\"string\">&#x27;fengyihang@xx.com&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>全局配置文件: ~&#x2F;.gitconig</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">&#x27;fengyihang&#x27;</span></span><br><span class=\"line\">git config --global user.name <span class=\"string\">&#x27;fengyihang@xx.com&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>系统配置文件: &#x2F;etc&#x2F;.gitconig</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --system user.name <span class=\"string\">&#x27;fengyihang&#x27;</span></span><br><span class=\"line\">git config --system user.name <span class=\"string\">&#x27;fengyihang@xx.com&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#注意:需要有root权限</span></span><br></pre></td></tr></table></figure>\n\n<p>应用场景:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git\tconfig\t--<span class=\"built_in\">local</span> user.name <span class=\"string\">&#x27;冯一航&#x27;</span></span><br><span class=\"line\">git\tconfig\t--<span class=\"built_in\">local</span> user.email <span class=\"string\">&#x27;fengyihang@xx.com&#x27;</span></span><br><span class=\"line\">git\tconfig\t--<span class=\"built_in\">local</span> merge.tool bc3</span><br><span class=\"line\">git\tconfig\t--<span class=\"built_in\">local</span> mergetool.path <span class=\"string\">&#x27;/usr/local/bin/bcomp&#x27;</span></span><br><span class=\"line\">git\tconfig\t--<span class=\"built_in\">local</span> mergetool.keepBackup <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<p>git remote add origin 地址  ,默认添加在本地配置文件中(–local)</p>\n<h4 id=\"3-2-免密码登录\"><a href=\"#3-2-免密码登录\" class=\"headerlink\" title=\"3.2 免密码登录\"></a>3.2 免密码登录</h4><ul>\n<li>URL中体现</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原来的地址:  https://github.com/Fengyihang/dbhot.git</span><br><span class=\"line\">修改的地址:  https://用户名:密码@github.com/Fengyihang/dbhot.git  </span><br><span class=\"line\">git remote add origin https://用户名:密码@github.com/Fengyihang/dbhot.git git push origin master</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>SSH实现</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 生成公钥和私钥(默认放在  ~/.ssh目录下,  id_rsa.pub公钥、  id_rsa私钥) ssh-keygen</span><br><span class=\"line\">2. 拷贝公钥的内容,并设置到github中。</span><br><span class=\"line\">3. 在git本地中配置ssh地址</span><br><span class=\"line\">git remote add origin git@github.com:Fengyihang/dbhot.git</span><br><span class=\"line\"></span><br><span class=\"line\">4. 以后使用</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>git自动管理凭证</li>\n</ul>\n<h4 id=\"3-3-git忽略文件\"><a href=\"#3-3-git忽略文件\" class=\"headerlink\" title=\"3.3 git忽略文件\"></a>3.3 git忽略文件</h4><p>让Git不再管理当前目录下的某些文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*.h</span><br><span class=\"line\">!a.h</span><br><span class=\"line\">files/</span><br><span class=\"line\">*.py[c|a|d]</span><br></pre></td></tr></table></figure>\n\n<p>更多参考: <a href=\"https://github.com/github/gitignore\">https://github.com/github/gitignore</a></p>\n<h4 id=\"3-4-github任务管理相关\"><a href=\"#3-4-github任务管理相关\" class=\"headerlink\" title=\"3.4 github任务管理相关\"></a>3.4 github任务管理相关</h4><ul>\n<li>issues ,文档以及任务管理。</li>\n<li>wiki ,项目文档。</li>\n</ul>\n<p>结语<br>好好学习天天向上, 希望git实战课程对你能够有所帮助,更多资源关注:</p>\n<p>Notion：<a href=\"https://www.notion.so/Git-e623a6fa739a46eebd6c6646955c41c8\">https://www.notion.so/Git-e623a6fa739a46eebd6c6646955c41c8</a></p>\n<p>PDF：<a href=\"https://www.notion.so/Git-e623a6fa739a46eebd6c6646955c41c8#d173f23264714f6f9db110660db0fade\">https://www.notion.so/Git-e623a6fa739a46eebd6c6646955c41c8#d173f23264714f6f9db110660db0fade</a></p>\n"},{"title":"Hello World","abbrlink":16107,"date":"2022-08-26T08:07:23.000Z","cover":"http://qiniu.hanvon.top/blog_cover/helloworld_cover.png","copyright_author":"wild-civil","copyright_author_href":"https://github.com/wild-civil","copyright_url":"https://wild-civil.github.io","copyright_info":"此文章版权归wild-civil所有，如有转载，请注明来自原作者","_content":"# Hexo+github搭建个人博客\n\n## 一、搭建\n\n### 1、视频教程：\n\n### 2、简易文本教程：\n\n- #### 安装并配置Node.js\n\n- #### 安装并配置Git\n\n- #### 生成SSH Keys \n\n  a. 空白处右击，打开Git Bash，输入`ssh-keygen -t rsa -C \"你的邮箱地址\"` (将邮箱改为自己的) 敲四次回车；\n\n  b. 在`C:\\Users\\admin\\.ssh`(admin更改为你自己的用户名)，找到”`id_rsa.pub`”文件，打开，复制秘钥\n\n  c. 打开”Github” -> “seetings” -> “SSH and Gpg Keys” -> 点击”New SSH key”, -> Title随便，将密匙复制到key -> Add SSH key\n\n  d. 在Git Bash中输入`ssh -T git@github.com` (无需更改) 测试ssh是否绑定成功, 输入 yes 回车\n\n- #### 本地访问博客\n\n  1、创建一个名为 Blog 的文件，在里面启用 Git Bash Here\n\n  2、输入hexo init初始化hexo\n\n  3、输入hexo s生成本地的hexo页面\n\n  4、将网址输入浏览器即可访问博客，Ctrl + c停用\n\n- #### 上到Github \n\n修改-config.yml文件，在文件最后添加：(注意冒号后需添加一个半角的空格)\n\n```\ndeploy:\n  type: git\n  repository: 你的github地址\n  branch: main\n```\n\n启用 Git Bash Here，输入`npm install hexo-deployer-git --save`安装hexo-deployer-git 自动部署发布工具\n\n输入`hexo g`生成页面\n\n输入`hexo d`本地文件部署到Github上面\n\n在浏览器中输入https://wild-civil.github.io/访问GitHub博客 (请将wild-civil改为自己的github用户名)\n\n文本教程：https://dhndzwxj.vercel.app/3276806131.html\n\nhexo标签教程：http://haiyong.site/post/cda958f2.html (很棒的教程)\n\n自定义 js、css等的添加：http://www.gocit.cn/posts/5.html\n\nhttps://www.wxnacy.com/2017/12/12/hexo-cust-js/\n\n## 二、Quick Start\n\n#### Create a new post\n\n```\n$ hexo new \"My New Post\"\n```\n\n也可输入`hexo n`\n\nMore info: Writing\n\n### Run server\n\n```\n$ hexo server\n```\n\n也可输入`hexo s`\n\nMore info: Server\n\n### Generate static files\n\n```\n$ hexo generate\n```\n\n也可输入`hexo g`\n\nMore info: Generating\n\n### Deploy to remote sites\n\n```\n$ hexo deploy\n```\n\n也可输入`hexo d`\n\nMore info: Deployment\n\nhexo更换背景图片 背景图片参考网址：\n\nhttps://wallhaven.cc/ https://wall.alphacoders.com/ https://bz.zzzmh.cn/index\n\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\nabbrlink: 16107\ndate: 2022-08-26 16:07:23\ntags:\n  - 博客搭建\ncover: http://qiniu.hanvon.top/blog_cover/helloworld_cover.png\ncopyright_author: wild-civil\ncopyright_author_href: https://github.com/wild-civil\ncopyright_url: https://wild-civil.github.io\ncopyright_info: 此文章版权归wild-civil所有，如有转载，请注明来自原作者\n---\n# Hexo+github搭建个人博客\n\n## 一、搭建\n\n### 1、视频教程：\n\n### 2、简易文本教程：\n\n- #### 安装并配置Node.js\n\n- #### 安装并配置Git\n\n- #### 生成SSH Keys \n\n  a. 空白处右击，打开Git Bash，输入`ssh-keygen -t rsa -C \"你的邮箱地址\"` (将邮箱改为自己的) 敲四次回车；\n\n  b. 在`C:\\Users\\admin\\.ssh`(admin更改为你自己的用户名)，找到”`id_rsa.pub`”文件，打开，复制秘钥\n\n  c. 打开”Github” -> “seetings” -> “SSH and Gpg Keys” -> 点击”New SSH key”, -> Title随便，将密匙复制到key -> Add SSH key\n\n  d. 在Git Bash中输入`ssh -T git@github.com` (无需更改) 测试ssh是否绑定成功, 输入 yes 回车\n\n- #### 本地访问博客\n\n  1、创建一个名为 Blog 的文件，在里面启用 Git Bash Here\n\n  2、输入hexo init初始化hexo\n\n  3、输入hexo s生成本地的hexo页面\n\n  4、将网址输入浏览器即可访问博客，Ctrl + c停用\n\n- #### 上到Github \n\n修改-config.yml文件，在文件最后添加：(注意冒号后需添加一个半角的空格)\n\n```\ndeploy:\n  type: git\n  repository: 你的github地址\n  branch: main\n```\n\n启用 Git Bash Here，输入`npm install hexo-deployer-git --save`安装hexo-deployer-git 自动部署发布工具\n\n输入`hexo g`生成页面\n\n输入`hexo d`本地文件部署到Github上面\n\n在浏览器中输入https://wild-civil.github.io/访问GitHub博客 (请将wild-civil改为自己的github用户名)\n\n文本教程：https://dhndzwxj.vercel.app/3276806131.html\n\nhexo标签教程：http://haiyong.site/post/cda958f2.html (很棒的教程)\n\n自定义 js、css等的添加：http://www.gocit.cn/posts/5.html\n\nhttps://www.wxnacy.com/2017/12/12/hexo-cust-js/\n\n## 二、Quick Start\n\n#### Create a new post\n\n```\n$ hexo new \"My New Post\"\n```\n\n也可输入`hexo n`\n\nMore info: Writing\n\n### Run server\n\n```\n$ hexo server\n```\n\n也可输入`hexo s`\n\nMore info: Server\n\n### Generate static files\n\n```\n$ hexo generate\n```\n\n也可输入`hexo g`\n\nMore info: Generating\n\n### Deploy to remote sites\n\n```\n$ hexo deploy\n```\n\n也可输入`hexo d`\n\nMore info: Deployment\n\nhexo更换背景图片 背景图片参考网址：\n\nhttps://wallhaven.cc/ https://wall.alphacoders.com/ https://bz.zzzmh.cn/index\n\n","slug":"hello-world","published":1,"updated":"2023-11-01T06:42:15.438Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clofj2tbw0006oot34w0mh07c","content":"<h1 id=\"Hexo-github搭建个人博客\"><a href=\"#Hexo-github搭建个人博客\" class=\"headerlink\" title=\"Hexo+github搭建个人博客\"></a>Hexo+github搭建个人博客</h1><h2 id=\"一、搭建\"><a href=\"#一、搭建\" class=\"headerlink\" title=\"一、搭建\"></a>一、搭建</h2><h3 id=\"1、视频教程：\"><a href=\"#1、视频教程：\" class=\"headerlink\" title=\"1、视频教程：\"></a>1、视频教程：</h3><h3 id=\"2、简易文本教程：\"><a href=\"#2、简易文本教程：\" class=\"headerlink\" title=\"2、简易文本教程：\"></a>2、简易文本教程：</h3><ul>\n<li><h4 id=\"安装并配置Node-js\"><a href=\"#安装并配置Node-js\" class=\"headerlink\" title=\"安装并配置Node.js\"></a>安装并配置Node.js</h4></li>\n<li><h4 id=\"安装并配置Git\"><a href=\"#安装并配置Git\" class=\"headerlink\" title=\"安装并配置Git\"></a>安装并配置Git</h4></li>\n<li><h4 id=\"生成SSH-Keys\"><a href=\"#生成SSH-Keys\" class=\"headerlink\" title=\"生成SSH Keys\"></a>生成SSH Keys</h4><p>a. 空白处右击，打开Git Bash，输入<code>ssh-keygen -t rsa -C &quot;你的邮箱地址&quot;</code> (将邮箱改为自己的) 敲四次回车；</p>\n<p>b. 在<code>C:\\Users\\admin\\.ssh</code>(admin更改为你自己的用户名)，找到”<code>id_rsa.pub</code>”文件，打开，复制秘钥</p>\n<p>c. 打开”Github” -&gt; “seetings” -&gt; “SSH and Gpg Keys” -&gt; 点击”New SSH key”, -&gt; Title随便，将密匙复制到key -&gt; Add SSH key</p>\n<p>d. 在Git Bash中输入<code>ssh -T git@github.com</code> (无需更改) 测试ssh是否绑定成功, 输入 yes 回车</p>\n</li>\n<li><h4 id=\"本地访问博客\"><a href=\"#本地访问博客\" class=\"headerlink\" title=\"本地访问博客\"></a>本地访问博客</h4><p>1、创建一个名为 Blog 的文件，在里面启用 Git Bash Here</p>\n<p>2、输入hexo init初始化hexo</p>\n<p>3、输入hexo s生成本地的hexo页面</p>\n<p>4、将网址输入浏览器即可访问博客，Ctrl + c停用</p>\n</li>\n<li><h4 id=\"上到Github\"><a href=\"#上到Github\" class=\"headerlink\" title=\"上到Github\"></a>上到Github</h4></li>\n</ul>\n<p>修改-config.yml文件，在文件最后添加：(注意冒号后需添加一个半角的空格)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: 你的github地址</span><br><span class=\"line\">  branch: main</span><br></pre></td></tr></table></figure>\n\n<p>启用 Git Bash Here，输入<code>npm install hexo-deployer-git --save</code>安装hexo-deployer-git 自动部署发布工具</p>\n<p>输入<code>hexo g</code>生成页面</p>\n<p>输入<code>hexo d</code>本地文件部署到Github上面</p>\n<p>在浏览器中输入<a href=\"https://wild-civil.github.io/%E8%AE%BF%E9%97%AEGitHub%E5%8D%9A%E5%AE%A2\">https://wild-civil.github.io/访问GitHub博客</a> (请将wild-civil改为自己的github用户名)</p>\n<p>文本教程：<a href=\"https://dhndzwxj.vercel.app/3276806131.html\">https://dhndzwxj.vercel.app/3276806131.html</a></p>\n<p>hexo标签教程：<a href=\"http://haiyong.site/post/cda958f2.html\">http://haiyong.site/post/cda958f2.html</a> (很棒的教程)</p>\n<p>自定义 js、css等的添加：<a href=\"http://www.gocit.cn/posts/5.html\">http://www.gocit.cn/posts/5.html</a></p>\n<p><a href=\"https://www.wxnacy.com/2017/12/12/hexo-cust-js/\">https://www.wxnacy.com/2017/12/12/hexo-cust-js/</a></p>\n<h2 id=\"二、Quick-Start\"><a href=\"#二、Quick-Start\" class=\"headerlink\" title=\"二、Quick Start\"></a>二、Quick Start</h2><h4 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new &quot;My New Post&quot;</span><br></pre></td></tr></table></figure>\n\n<p>也可输入<code>hexo n</code></p>\n<p>More info: Writing</p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>也可输入<code>hexo s</code></p>\n<p>More info: Server</p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>也可输入<code>hexo g</code></p>\n<p>More info: Generating</p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>也可输入<code>hexo d</code></p>\n<p>More info: Deployment</p>\n<p>hexo更换背景图片 背景图片参考网址：</p>\n<p><a href=\"https://wallhaven.cc/\">https://wallhaven.cc/</a> <a href=\"https://wall.alphacoders.com/\">https://wall.alphacoders.com/</a> <a href=\"https://bz.zzzmh.cn/index\">https://bz.zzzmh.cn/index</a></p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"安装文, 档快速开始","link":"https://butterfly.js.org/posts/21cfbf15/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"Butterfly主题 帮助文档"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"Hexo-github搭建个人博客\"><a href=\"#Hexo-github搭建个人博客\" class=\"headerlink\" title=\"Hexo+github搭建个人博客\"></a>Hexo+github搭建个人博客</h1><h2 id=\"一、搭建\"><a href=\"#一、搭建\" class=\"headerlink\" title=\"一、搭建\"></a>一、搭建</h2><h3 id=\"1、视频教程：\"><a href=\"#1、视频教程：\" class=\"headerlink\" title=\"1、视频教程：\"></a>1、视频教程：</h3><h3 id=\"2、简易文本教程：\"><a href=\"#2、简易文本教程：\" class=\"headerlink\" title=\"2、简易文本教程：\"></a>2、简易文本教程：</h3><ul>\n<li><h4 id=\"安装并配置Node-js\"><a href=\"#安装并配置Node-js\" class=\"headerlink\" title=\"安装并配置Node.js\"></a>安装并配置Node.js</h4></li>\n<li><h4 id=\"安装并配置Git\"><a href=\"#安装并配置Git\" class=\"headerlink\" title=\"安装并配置Git\"></a>安装并配置Git</h4></li>\n<li><h4 id=\"生成SSH-Keys\"><a href=\"#生成SSH-Keys\" class=\"headerlink\" title=\"生成SSH Keys\"></a>生成SSH Keys</h4><p>a. 空白处右击，打开Git Bash，输入<code>ssh-keygen -t rsa -C &quot;你的邮箱地址&quot;</code> (将邮箱改为自己的) 敲四次回车；</p>\n<p>b. 在<code>C:\\Users\\admin\\.ssh</code>(admin更改为你自己的用户名)，找到”<code>id_rsa.pub</code>”文件，打开，复制秘钥</p>\n<p>c. 打开”Github” -&gt; “seetings” -&gt; “SSH and Gpg Keys” -&gt; 点击”New SSH key”, -&gt; Title随便，将密匙复制到key -&gt; Add SSH key</p>\n<p>d. 在Git Bash中输入<code>ssh -T git@github.com</code> (无需更改) 测试ssh是否绑定成功, 输入 yes 回车</p>\n</li>\n<li><h4 id=\"本地访问博客\"><a href=\"#本地访问博客\" class=\"headerlink\" title=\"本地访问博客\"></a>本地访问博客</h4><p>1、创建一个名为 Blog 的文件，在里面启用 Git Bash Here</p>\n<p>2、输入hexo init初始化hexo</p>\n<p>3、输入hexo s生成本地的hexo页面</p>\n<p>4、将网址输入浏览器即可访问博客，Ctrl + c停用</p>\n</li>\n<li><h4 id=\"上到Github\"><a href=\"#上到Github\" class=\"headerlink\" title=\"上到Github\"></a>上到Github</h4></li>\n</ul>\n<p>修改-config.yml文件，在文件最后添加：(注意冒号后需添加一个半角的空格)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: 你的github地址</span><br><span class=\"line\">  branch: main</span><br></pre></td></tr></table></figure>\n\n<p>启用 Git Bash Here，输入<code>npm install hexo-deployer-git --save</code>安装hexo-deployer-git 自动部署发布工具</p>\n<p>输入<code>hexo g</code>生成页面</p>\n<p>输入<code>hexo d</code>本地文件部署到Github上面</p>\n<p>在浏览器中输入<a href=\"https://wild-civil.github.io/%E8%AE%BF%E9%97%AEGitHub%E5%8D%9A%E5%AE%A2\">https://wild-civil.github.io/访问GitHub博客</a> (请将wild-civil改为自己的github用户名)</p>\n<p>文本教程：<a href=\"https://dhndzwxj.vercel.app/3276806131.html\">https://dhndzwxj.vercel.app/3276806131.html</a></p>\n<p>hexo标签教程：<a href=\"http://haiyong.site/post/cda958f2.html\">http://haiyong.site/post/cda958f2.html</a> (很棒的教程)</p>\n<p>自定义 js、css等的添加：<a href=\"http://www.gocit.cn/posts/5.html\">http://www.gocit.cn/posts/5.html</a></p>\n<p><a href=\"https://www.wxnacy.com/2017/12/12/hexo-cust-js/\">https://www.wxnacy.com/2017/12/12/hexo-cust-js/</a></p>\n<h2 id=\"二、Quick-Start\"><a href=\"#二、Quick-Start\" class=\"headerlink\" title=\"二、Quick Start\"></a>二、Quick Start</h2><h4 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new &quot;My New Post&quot;</span><br></pre></td></tr></table></figure>\n\n<p>也可输入<code>hexo n</code></p>\n<p>More info: Writing</p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>也可输入<code>hexo s</code></p>\n<p>More info: Server</p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>也可输入<code>hexo g</code></p>\n<p>More info: Generating</p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>也可输入<code>hexo d</code></p>\n<p>More info: Deployment</p>\n<p>hexo更换背景图片 背景图片参考网址：</p>\n<p><a href=\"https://wallhaven.cc/\">https://wallhaven.cc/</a> <a href=\"https://wall.alphacoders.com/\">https://wall.alphacoders.com/</a> <a href=\"https://bz.zzzmh.cn/index\">https://bz.zzzmh.cn/index</a></p>\n"},{"title":"hexo + github搭建个人博客","abbrlink":"95eb7d","date":"2022-08-27T03:16:53.000Z","keywords":null,"description":"本篇教程完整讲述了如何利用Hexo+github搭建个人博客并且绑定自己的域名，生成自己的网站！","password":null,"abstract":null,"message":null,"_content":"\n# Hexo+github搭建个人博客，并绑定域名\n\n> 搭建&美化：http://haiyong.site/post/cda958f2.html \n\n注：本文章内容大部分来源(包括视频)来自：[www.wushishu.xyz ](www.wushishu.xyz)备用[wushishu.github.io](wushishu.github.io)\n\n# 第一部分视频学习\n\n<iframe src=\"https://player.bilibili.com/player.html?aid=638754315&amp;bvid=BV1NY4y1C7Ng&amp;cid=714430663&amp;page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"800\" height=\"500\" style=\"box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-pan-x: ; --tw-pan-y: ; --tw-pinch-zoom: ; --tw-scroll-snap-strictness: proximity; --tw-ordinal: ; --tw-slashed-zero: ; --tw-numeric-figure: ; --tw-numeric-spacing: ; --tw-numeric-fraction: ; --tw-ring-inset: ; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgb(59 130 246 / 0.5); --tw-ring-offset-shadow: 0 0 #0000; --tw-ring-shadow: 0 0 #0000; --tw-shadow: 0 0 #0000; --tw-shadow-colored: 0 0 #0000; --tw-blur: ; --tw-brightness: ; --tw-contrast: ; --tw-grayscale: ; --tw-hue-rotate: ; --tw-invert: ; --tw-saturate: ; --tw-sepia: ; --tw-drop-shadow: ; --tw-backdrop-blur: ; --tw-backdrop-brightness: ; --tw-backdrop-contrast: ; --tw-backdrop-grayscale: ; --tw-backdrop-hue-rotate: ; --tw-backdrop-invert: ; --tw-backdrop-opacity: ; --tw-backdrop-saturate: ; --tw-backdrop-sepia: ; margin: 0px 0px 20px; color: rgb(76, 73, 72); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, &quot;Helvetica Neue&quot;, Lato, Roboto, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;\"></iframe>\n\n也可以直接跟着视频走\n\n## 安装并配置Node.js\n\nNode.js下载:【它让JavaScript成为与PHP、Python、Perl、Ruby等服务端语言平起平坐的脚本语言。】\n\n教程：https://blog.csdn.net/weixin_52799373/article/details/123840137（过程详细，还覆盖win11，评论下面还有师叔的足迹）\n\n#### 注意一\n\n全局安装最常用的 express 模块 进行测试\n\n命令如下:\n\n```PLAINTEXT\nnpm install express -g\n```\n\n报错图片：\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311330969.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n解决方法：\n\n【亲测有效】\n\n需要删除 npmrc 文件。\n\n**强调：**不是nodejs安装目录npm模块下的那个npmrc文件\n\n而是在 C:\\Users\\（你的用户名）\\下的.npmrc文件\n\n***聪明的你，一定想到了直接用evering搜索，省的还要调用文件管理器在一点一点的找***\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311331077.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n#### 注意二\n\n**在文章第四歩测试上查看安装结果**\n\n可能会出现下面照片结果，更改了目录为什么还是C盘目录下，这时候只需要以管理员身份运行命令即可。\n\n在下面路径下找到cmd.exe并且管理员身份运行即可。\n\n推测：出像这种现象的原因就是执行权限不够，推荐大家在桌面建立一个快捷方式（管理员命令的）cmd\n\n```PLAINTEXT\nC:\\Windows\\System32\\cmd.exe\n```\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311331718.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n**创建管理员权限的cmd桌面快捷方式**\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311331004.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n## 安装并配置Git\n\ngit是一个并源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理\n\nWindows系统Git安装教程：https://www.cnblogs.com/xueweisuoyong/p/11914045.html\n\n### 生成SSH Keys\n\n生成ssh\n\n```PLAINTEXT\nssh-keygen -t rsa -C \"你的邮箱地址\"\n```\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311331566.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n**找到秘钥位置并复制**\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311331246.png\" alt=\"img\" style=\"zoom:500%;\" />\n\n**测试ssh是否绑定成功**\n\n```PLAINTEXT\nssh -T git@github.com\n```\n\n如果问你（yes or no）,直接 yes 就可以得到下面这段话\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311331532.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n## 本地访问博客\n\n1、创建一个名为 Blog 的文件，在里面启用 Git Bash Here\n\n[<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311331193.png\" alt=\"img\" style=\"zoom:50%;\" />](https://static001.geekbang.org/infoq/b0/b06a27bee58606277ea46f413b34ed14.png)\n\n2、初始化hexo\n\n```PLAINTEXT\nhexo init\n```\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311331023.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n3、生成本地的hexo页面\n\n```PLAINTEXT\nhexo s\n```\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332717.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n4、访问\n\n打开本地服务器\n\n```PLAINTEXT\nhttp://localhost:4000/\n```\n\n[<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332849.png\" alt=\"img\" style=\"zoom:50%;\" />](https://static001.geekbang.org/infoq/5f/5fde531819308103720a5c098f342092.png)\n\n> 长按 Ctrl + c 关闭服务器\n\n[<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332255.png\" alt=\"img\" style=\"zoom:50%;\" />](https://static001.geekbang.org/infoq/6f/6f77175cb6028832126b38d0b820be95.png)\n\n## 上传到Github\n\n修改_config.yml文件\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332108.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n**把图片上位置更换成**\n\n```PLAINTEXT\ndeploy:\n  type: git\n  repository: 你的github地址\n  branch: main\n```\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332828.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n安装hexo-deployer-git 自动部署发布工具\n\n```PLAINTEXT\nnpm install hexo-deployer-git --save\n```\n\n[<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332467.png\" alt=\"img\" style=\"zoom:50%;\" />](https://static001.geekbang.org/infoq/a9/a94aa787c8627d7bc2d95fc3aabe211d.png)\n\n### **生成页面**\n\n```PLAINTEXT\nhexo g\n```\n\n[<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332692.png\" alt=\"img\" style=\"zoom:50%;\" />](https://static001.geekbang.org/infoq/ec/ec4dc5e76906c62036e61f4d083ebaad.png)\n\n#### 注意一\n\n如果报错如下：（无报错，请忽略此条）\n\n报错信息是提示hexo的yml配置文件 冒号后面少了空格解决方案：\n\n到提示行将对应的空格补上即可\n\n[<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332399.png\" alt=\"img\" style=\"zoom:50%;\" />](https://static001.geekbang.org/infoq/f1/f139b76ed562b895ece7557ebb5bb791.png)\n\n本地文件上传到Github上面\n\n```PLAINTEXT\nhexo d\n```\n\n中间会出现一个登录界面，可以用令牌登录。（令牌及时保存，就看不到了）\n\n结束以后就上传 Github 就成功了！！！\n\n[<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332663.png\" alt=\"img\" style=\"zoom:50%;\" />](https://static001.geekbang.org/infoq/1b/1ba83adbf958f9ed0ad0129bd843f785.png)\n\n#### 注意二\n\n如果出现如图错误网络报错，再次尝试，多次尝试，直到更换WiFi~~~~\n\n[<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332772.png\" alt=\"img\" style=\"zoom:50%;\" />](https://static001.geekbang.org/infoq/5e/5e33beb4a80df251722f550b7ca0de88.png)\n\n## 访问GitHub博客\n\n[<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332428.png\" alt=\"img\" style=\"zoom:50%;\" />](https://static001.geekbang.org/infoq/0a/0a397f64a129a210ccbebdff832de7af.png)\n\n访问博客，开始的页面是初始化页面，没有做美化和增加内容。\n\n```PLAINTEXT\nhttps://wushishu.github.io/\n```\n\n[<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332934.png\" alt=\"img\" style=\"zoom: 50%;\" />](https://static001.geekbang.org/infoq/aa/aa2f760148fbcbf6c3ce0b43cbe3433c.png)\n\n# 第二部分 文档学习\n\n## 撰写博客\n\n***电脑要必须有Typora！电脑要必须有Typora！电脑要必须有Typora！***（重要的事情说三遍）\n\n文本教程：https://dhndzwxj.vercel.app/3276806131.html\n\nhexo标签教程：[http://haiyong.site/post/cda958f2.html](http://haiyong.site/post/cda958f2.html)（参考文档看需求加不加）\n\n我们打开自己的博客根目录，跟着我一个个了解里面的这些文件（夹）都是干什么的：\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332992.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n- `_config.yml`：俗称站点配置文件，很多与博客网站的格式、内容相关的设置都需要在里面改。\n- `node_modules`:存储Hexo插件的文件，可以实现各种扩展功能。一般不需要管。\n- `package.json`：别问我，我也不知道干嘛的。\n- `scaffolds`：模板文件夹，里面的`post.md`文件可以设置每一篇博客的模板。具体用起来就知道能干嘛了。\n- `source`：非常重要。所有的个人文件都在里面！\n- `themes`：主题文件夹，可以从[Hexo主题官网](https://hexo.io/themes/)或者网上大神的Github主页下载各种各样美观的主题，让自己的网站变得逼格高端的关键！\n\n接下来重点介绍`source`文件夹。新建的博客中，`source`文件夹下默认只有一个子文件夹——`_posts`。我们写的博客都放在这个子文件夹里面。我们还可以在`source`里面新建各种子文件夹满足自己的个性化需求，对初学者而言，我们先把精力放在主线任务上，然后再来搞这些细节。\n\n[<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332045.png\" alt=\"img\" style=\"zoom:50%;\" />](https://static001.geekbang.org/infoq/3f/3f7b8b410726691082019f2ab603976b.png)\n\n写好Hellworld内容后，在命令行一键三连：\n\n> ‘hexo cl’命令用于清除缓存文件（db.json）和已生成的静态文件（public）。\n>\n> 例如：在更换主题后，如果发现站点更改不生效，可以运行该命令。\n\n```PLAINTEXT\nhexo cl\n\nhexo g\n\nhexo s\n```\n\n然后随便打开一个浏览器，在网址栏输入`localhost:4000/`，就能发现自己的网站更新了！不过这只是在本地进行了更新，要想部署到网上（Github上），输入如下代码：\n\n```PLAINTEXT\nhexo d\n```\n\n然后在浏览器地址栏输入`https://yourname.github.io`，或者`yourname.github.io`就能在网上浏览自己的博客了！\n\n以上，我们的博客网站1.0版本就搭建完成了，如果没有更多的需求，做到这里基本上就可以了。如果有更多的要求，还需要进一步的精耕细作！\n\n## 精耕细作\n\n**海拥\\Butterfly 主题美化：**http://haiyong.site/post/22e1d5da.html\n\n**Butterfly参考文档（小白慎入，但是他也是你走向DIY必须迈出的一歩）**:https://butterfly.js.org/posts/dc584b87/#Post-Front-matter\n\n文章中要更改的文件（.yml .bug 等）可以要用viscode打开！！！\n\n**Butterfly 主题安装**\n\n```PLAINTEXT\ngit clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly\n```\n\n这里面如果报错，如下图所示（长路漫漫，bug满满）\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311333567.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n只需要在命令行中执行\n\n```PLAINTEXT\ngit config --global --unset http.proxy \ngit config --global --unset https.proxy\n```\n\n再次安装主题即可成功\n\n[<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311333116.png\" alt=\"img\" style=\"zoom:50%;\" />](https://static001.geekbang.org/infoq/a1/a1ee42ae917eb1c19261ec72b82efde4.png)\n\n**应用主题**\n\n```PLAINTEXT\ntheme: butterfly\n```\n\n[<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311333759.png\" alt=\"img\" style=\"zoom:50%;\" />](https://static001.geekbang.org/infoq/b0/b08a6de31ecdfcc74ccb0037f23094b3.png)\n\n**安装插件**\n\n如果你没有 pug 以及 stylus 的渲染器，请下载安装：\n\n```PLAINTEXT\nnpm install hexo-renderer-pug hexo-renderer-stylus --save\n```\n\n[<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311333574.png\" alt=\"img\" style=\"zoom:50%;\" />](https://static001.geekbang.org/infoq/cd/cded5198aec31fec9f8b53bb76676174.png)\n\n### Butterfly 主题\n\n生成文章唯一链接\n\nHexo的默认文章链接格式是年，月，日，标题这种格式来生成的。如果你的标题是中文的话，那你的URL链接就会包含中文，\n\n复制后的URL路径就是把中文变成了一大堆字符串编码，如果你在其他地方用这边文章的url链接，偶然你又修改了改文章的标题，那这个URL链接就会失效。为了给每一篇文章来上一个属于自己的链接，写下此教程，利用 hexo-abbrlink 插件，A Hexo plugin to generate static post link based on post titles ,来解决这个问题。 参考github官方： hexo-abbrlink 按照此教程配置完之后如下：\n\n1、安装插件，在博客根目录 [Blogroot] 下打开终端，运行以下指令：\n\n```PLAINTEXT\nnpm install hexo-abbrlink --save\n```\n\n[<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311333642.png\" alt=\"img\" style=\"zoom:50%;\" />](https://static001.geekbang.org/infoq/32/32ad907f045425afedb968d20dab4507.png)\n\n2、插件安装成功后，在根目录 Blogroot(你的博客目录)的配置文件 _config.yml 找到 permalink：\n\n[<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311334031.png\" alt=\"img\" style=\"zoom:50%;\" />](https://static001.geekbang.org/infoq/7e/7e4272e54cb25564b1e708e85c8539d2.png)\n\n## 发布博客\n\n这次了解我上面只有一个HelloWord的时候，为什么不让右键新建，**因为需要命令生成啊，铁汁！**\n\n```PLAINTEXT\nnpm i hexo-deployer-git\n\nhexo new post \"新建博客文章名\"\n\nhexo cl && hexo g  && hexo s\n```\n\n## hexo更换背景图片\n\n背景图片参考网址：\n\n- https://wallhaven.cc/\n- https://wall.alphacoders.com/\n- https://bz.zzzmh.cn/index\n\n*本方法解决的是多次同步到GitHub上背景图片未成功的情况*\n\n直接更改原文件\n\n图片所在目录：`hexo/themes/landscape/source/css/images/`\n\n图片名称：`banner.jpg`\n\n\n\n## ⭐主题美化\n\n芜湖，想做到和我主页一样的动态标题(网页崩溃欺骗)和透明页面吗\n\nLet's get started!\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/image-20231101154515640.png\" style=\"zoom:80%;\" />\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/image-20231101155107655.png\" alt=\"path\" style=\"zoom:80%;\" />\n\n一定要放在博客根目录下的source下，没有就新建一个\n\n然后在\\themes\\butterfly\\中的_config.yml文件下查找injection，将自己新建的文件路径添加进去\n\n```yaml\n# Inject\n# Insert the code to head (before '</head>' tag) and the bottom (before '</body>' tag)\n# 插入代码到头部 </head> 之前 和 底部 </body> 之前\ninject:\n  head:\n    - <link rel=\"stylesheet\" href=\"/css/transpancy.css\">\n    # - <link rel=\"stylesheet\" href=\"/xxx.css\">\n  bottom:\n    - <script src=\"/js/cheat.js\"></script>\n    # - <script src=\"xxxx\"></script>\n```\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/image-20231101154311035.png\" alt=\"image-20231101154311035\" style=\"zoom:80%;\" />\n\n### 动态标题\n\n`cheat.js`的代码\n\n```js\n//动态标题\nvar OriginTitile = document.title;\nvar titleTime;\ndocument.addEventListener('visibilitychange', function () {\n    if (document.hidden) {\n        //离开当前页面时标签显示内容\n        document.title = '网页崩溃啦w(ﾟДﾟ)w ！';\n        clearTimeout(titleTime);\n    }\n    else {\n        //返回当前页面时标签显示内容\n        document.title = '♪(^∇^*)我又好啦！' + OriginTitile;\n        //两秒后变回正常标题\n        titleTime = setTimeout(function () {\n            document.title = OriginTitile;\n        }, 2000);\n    }\n});\n```\n\n### 透明页面\n\n`transpancy.css`的代码：\n\n```css\n/* 文章页背景 */\n.layout_post>#post {\n    /* 以下代表透明度为0.7 可以自行修改*/\n    background: rgba(255,255,255,.7);\n}\n \n/* 所有页面背景 */\n#aside_content .card-widget, #recent-posts>.recent-post-item, .layout_page>div:first-child:not(.recent-posts), .layout_post>#page, .layout_post>#post, .read-mode .layout_post>#post{\n    /* 以下代表透明度为0.7 */\n    background: rgba(255,255,255,.7);\n}\n/*侧边卡片的透明度 */\n:root {\n  --card-bg: rgba(255, 255, 255, .7);\n}\n/* 页脚透明 */\n#footer {\n    /* 以下代表透明度为0.5 */\n    background: rgba(255,255,255, .5);\n}\n```\n\n`注意一件事：css要放在head；js要放在bottom。不能乱放！`\n\n参考：[透明化](https://conzxy.github.io/2022/08/19/hexo/transparent_bg/)    [透明化](https://blog.csdn.net/qq_44138925/article/details/128843200)    [渐变](https://blog.csdn.net/qq_43740362/article/details/113790851?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2-113790851-blog-128843200.235%5Ev38%5Epc_relevant_sort_base1&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2-113790851-blog-128843200.235%5Ev38%5Epc_relevant_sort_base1&utm_relevant_index=5)\n\n\n\n# 第三部分 绑定自己的域名\n\n博客地址：https://www.likecs.com/show-30474.html\n\n**绑定之后你就有有一个自己专属的博客了。**\n\n买一个域名，可以一块钱白嫖，但是续费贵的飞天！！！\n\n***注意请谨慎绑定，想我就会出现提交一次 (hexo d) ,需要重新绑定域名***\n\n\n\n# 图床：\n\n我试了两种：GitHub和七牛云\n\n我想说，如果你有自己的域名。可以选择七牛云，相比GitHub来说快很多\n\n\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311350299.png\" alt=\"image-20231031135024267\" style=\"zoom: 67%;\" />\n\n\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311352581.png\" alt=\"image-20231031135228551\" style=\"zoom: 67%;\" />\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311353997.png\" alt=\"image-20231031135328962\" style=\"zoom: 67%;\" />\n\n\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311354876.png\" alt=\"image-20231031135414847\" style=\"zoom:67%;\" />\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311401584.png\" alt=\"image-20231031140102545\" style=\"zoom:67%;\" />\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311404397.png\" alt=\"image-20231031140446365\" style=\"zoom:67%;\" />\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311409077.png\" alt=\"image-20231031140957036\" style=\"zoom:67%;\" />\n\n进行到这一步就成功喽\n\n下一步，去PicGo设置：\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311408731.png\" alt=\"image-20231031140821695\" style=\"zoom:67%;\" />\n\n\n\nhttps://www.cnblogs.com/skuld-yi/p/14533794.html\n\n\n\n---大部分转载至 武师叔\n\n关注公众号武师叔————————–回复博客————————-即可获得博客PDF文件\n","source":"_posts/hexo-github搭建个人博客.md","raw":"---\ntitle: hexo + github搭建个人博客\nabbrlink: 95eb7d\ndate: 2022-08-27 11:16:53\ntags:\n  - 博客搭建\n  - 博客美化\nkeywords:\ndescription: 本篇教程完整讲述了如何利用Hexo+github搭建个人博客并且绑定自己的域名，生成自己的网站！ \npassword:\nabstract:\nmessage:\n---\n\n# Hexo+github搭建个人博客，并绑定域名\n\n> 搭建&美化：http://haiyong.site/post/cda958f2.html \n\n注：本文章内容大部分来源(包括视频)来自：[www.wushishu.xyz ](www.wushishu.xyz)备用[wushishu.github.io](wushishu.github.io)\n\n# 第一部分视频学习\n\n<iframe src=\"https://player.bilibili.com/player.html?aid=638754315&amp;bvid=BV1NY4y1C7Ng&amp;cid=714430663&amp;page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"800\" height=\"500\" style=\"box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-pan-x: ; --tw-pan-y: ; --tw-pinch-zoom: ; --tw-scroll-snap-strictness: proximity; --tw-ordinal: ; --tw-slashed-zero: ; --tw-numeric-figure: ; --tw-numeric-spacing: ; --tw-numeric-fraction: ; --tw-ring-inset: ; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgb(59 130 246 / 0.5); --tw-ring-offset-shadow: 0 0 #0000; --tw-ring-shadow: 0 0 #0000; --tw-shadow: 0 0 #0000; --tw-shadow-colored: 0 0 #0000; --tw-blur: ; --tw-brightness: ; --tw-contrast: ; --tw-grayscale: ; --tw-hue-rotate: ; --tw-invert: ; --tw-saturate: ; --tw-sepia: ; --tw-drop-shadow: ; --tw-backdrop-blur: ; --tw-backdrop-brightness: ; --tw-backdrop-contrast: ; --tw-backdrop-grayscale: ; --tw-backdrop-hue-rotate: ; --tw-backdrop-invert: ; --tw-backdrop-opacity: ; --tw-backdrop-saturate: ; --tw-backdrop-sepia: ; margin: 0px 0px 20px; color: rgb(76, 73, 72); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, &quot;Helvetica Neue&quot;, Lato, Roboto, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;\"></iframe>\n\n也可以直接跟着视频走\n\n## 安装并配置Node.js\n\nNode.js下载:【它让JavaScript成为与PHP、Python、Perl、Ruby等服务端语言平起平坐的脚本语言。】\n\n教程：https://blog.csdn.net/weixin_52799373/article/details/123840137（过程详细，还覆盖win11，评论下面还有师叔的足迹）\n\n#### 注意一\n\n全局安装最常用的 express 模块 进行测试\n\n命令如下:\n\n```PLAINTEXT\nnpm install express -g\n```\n\n报错图片：\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311330969.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n解决方法：\n\n【亲测有效】\n\n需要删除 npmrc 文件。\n\n**强调：**不是nodejs安装目录npm模块下的那个npmrc文件\n\n而是在 C:\\Users\\（你的用户名）\\下的.npmrc文件\n\n***聪明的你，一定想到了直接用evering搜索，省的还要调用文件管理器在一点一点的找***\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311331077.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n#### 注意二\n\n**在文章第四歩测试上查看安装结果**\n\n可能会出现下面照片结果，更改了目录为什么还是C盘目录下，这时候只需要以管理员身份运行命令即可。\n\n在下面路径下找到cmd.exe并且管理员身份运行即可。\n\n推测：出像这种现象的原因就是执行权限不够，推荐大家在桌面建立一个快捷方式（管理员命令的）cmd\n\n```PLAINTEXT\nC:\\Windows\\System32\\cmd.exe\n```\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311331718.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n**创建管理员权限的cmd桌面快捷方式**\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311331004.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n## 安装并配置Git\n\ngit是一个并源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理\n\nWindows系统Git安装教程：https://www.cnblogs.com/xueweisuoyong/p/11914045.html\n\n### 生成SSH Keys\n\n生成ssh\n\n```PLAINTEXT\nssh-keygen -t rsa -C \"你的邮箱地址\"\n```\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311331566.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n**找到秘钥位置并复制**\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311331246.png\" alt=\"img\" style=\"zoom:500%;\" />\n\n**测试ssh是否绑定成功**\n\n```PLAINTEXT\nssh -T git@github.com\n```\n\n如果问你（yes or no）,直接 yes 就可以得到下面这段话\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311331532.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n## 本地访问博客\n\n1、创建一个名为 Blog 的文件，在里面启用 Git Bash Here\n\n[<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311331193.png\" alt=\"img\" style=\"zoom:50%;\" />](https://static001.geekbang.org/infoq/b0/b06a27bee58606277ea46f413b34ed14.png)\n\n2、初始化hexo\n\n```PLAINTEXT\nhexo init\n```\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311331023.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n3、生成本地的hexo页面\n\n```PLAINTEXT\nhexo s\n```\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332717.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n4、访问\n\n打开本地服务器\n\n```PLAINTEXT\nhttp://localhost:4000/\n```\n\n[<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332849.png\" alt=\"img\" style=\"zoom:50%;\" />](https://static001.geekbang.org/infoq/5f/5fde531819308103720a5c098f342092.png)\n\n> 长按 Ctrl + c 关闭服务器\n\n[<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332255.png\" alt=\"img\" style=\"zoom:50%;\" />](https://static001.geekbang.org/infoq/6f/6f77175cb6028832126b38d0b820be95.png)\n\n## 上传到Github\n\n修改_config.yml文件\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332108.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n**把图片上位置更换成**\n\n```PLAINTEXT\ndeploy:\n  type: git\n  repository: 你的github地址\n  branch: main\n```\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332828.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n安装hexo-deployer-git 自动部署发布工具\n\n```PLAINTEXT\nnpm install hexo-deployer-git --save\n```\n\n[<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332467.png\" alt=\"img\" style=\"zoom:50%;\" />](https://static001.geekbang.org/infoq/a9/a94aa787c8627d7bc2d95fc3aabe211d.png)\n\n### **生成页面**\n\n```PLAINTEXT\nhexo g\n```\n\n[<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332692.png\" alt=\"img\" style=\"zoom:50%;\" />](https://static001.geekbang.org/infoq/ec/ec4dc5e76906c62036e61f4d083ebaad.png)\n\n#### 注意一\n\n如果报错如下：（无报错，请忽略此条）\n\n报错信息是提示hexo的yml配置文件 冒号后面少了空格解决方案：\n\n到提示行将对应的空格补上即可\n\n[<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332399.png\" alt=\"img\" style=\"zoom:50%;\" />](https://static001.geekbang.org/infoq/f1/f139b76ed562b895ece7557ebb5bb791.png)\n\n本地文件上传到Github上面\n\n```PLAINTEXT\nhexo d\n```\n\n中间会出现一个登录界面，可以用令牌登录。（令牌及时保存，就看不到了）\n\n结束以后就上传 Github 就成功了！！！\n\n[<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332663.png\" alt=\"img\" style=\"zoom:50%;\" />](https://static001.geekbang.org/infoq/1b/1ba83adbf958f9ed0ad0129bd843f785.png)\n\n#### 注意二\n\n如果出现如图错误网络报错，再次尝试，多次尝试，直到更换WiFi~~~~\n\n[<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332772.png\" alt=\"img\" style=\"zoom:50%;\" />](https://static001.geekbang.org/infoq/5e/5e33beb4a80df251722f550b7ca0de88.png)\n\n## 访问GitHub博客\n\n[<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332428.png\" alt=\"img\" style=\"zoom:50%;\" />](https://static001.geekbang.org/infoq/0a/0a397f64a129a210ccbebdff832de7af.png)\n\n访问博客，开始的页面是初始化页面，没有做美化和增加内容。\n\n```PLAINTEXT\nhttps://wushishu.github.io/\n```\n\n[<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332934.png\" alt=\"img\" style=\"zoom: 50%;\" />](https://static001.geekbang.org/infoq/aa/aa2f760148fbcbf6c3ce0b43cbe3433c.png)\n\n# 第二部分 文档学习\n\n## 撰写博客\n\n***电脑要必须有Typora！电脑要必须有Typora！电脑要必须有Typora！***（重要的事情说三遍）\n\n文本教程：https://dhndzwxj.vercel.app/3276806131.html\n\nhexo标签教程：[http://haiyong.site/post/cda958f2.html](http://haiyong.site/post/cda958f2.html)（参考文档看需求加不加）\n\n我们打开自己的博客根目录，跟着我一个个了解里面的这些文件（夹）都是干什么的：\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332992.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n- `_config.yml`：俗称站点配置文件，很多与博客网站的格式、内容相关的设置都需要在里面改。\n- `node_modules`:存储Hexo插件的文件，可以实现各种扩展功能。一般不需要管。\n- `package.json`：别问我，我也不知道干嘛的。\n- `scaffolds`：模板文件夹，里面的`post.md`文件可以设置每一篇博客的模板。具体用起来就知道能干嘛了。\n- `source`：非常重要。所有的个人文件都在里面！\n- `themes`：主题文件夹，可以从[Hexo主题官网](https://hexo.io/themes/)或者网上大神的Github主页下载各种各样美观的主题，让自己的网站变得逼格高端的关键！\n\n接下来重点介绍`source`文件夹。新建的博客中，`source`文件夹下默认只有一个子文件夹——`_posts`。我们写的博客都放在这个子文件夹里面。我们还可以在`source`里面新建各种子文件夹满足自己的个性化需求，对初学者而言，我们先把精力放在主线任务上，然后再来搞这些细节。\n\n[<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332045.png\" alt=\"img\" style=\"zoom:50%;\" />](https://static001.geekbang.org/infoq/3f/3f7b8b410726691082019f2ab603976b.png)\n\n写好Hellworld内容后，在命令行一键三连：\n\n> ‘hexo cl’命令用于清除缓存文件（db.json）和已生成的静态文件（public）。\n>\n> 例如：在更换主题后，如果发现站点更改不生效，可以运行该命令。\n\n```PLAINTEXT\nhexo cl\n\nhexo g\n\nhexo s\n```\n\n然后随便打开一个浏览器，在网址栏输入`localhost:4000/`，就能发现自己的网站更新了！不过这只是在本地进行了更新，要想部署到网上（Github上），输入如下代码：\n\n```PLAINTEXT\nhexo d\n```\n\n然后在浏览器地址栏输入`https://yourname.github.io`，或者`yourname.github.io`就能在网上浏览自己的博客了！\n\n以上，我们的博客网站1.0版本就搭建完成了，如果没有更多的需求，做到这里基本上就可以了。如果有更多的要求，还需要进一步的精耕细作！\n\n## 精耕细作\n\n**海拥\\Butterfly 主题美化：**http://haiyong.site/post/22e1d5da.html\n\n**Butterfly参考文档（小白慎入，但是他也是你走向DIY必须迈出的一歩）**:https://butterfly.js.org/posts/dc584b87/#Post-Front-matter\n\n文章中要更改的文件（.yml .bug 等）可以要用viscode打开！！！\n\n**Butterfly 主题安装**\n\n```PLAINTEXT\ngit clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly\n```\n\n这里面如果报错，如下图所示（长路漫漫，bug满满）\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311333567.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n只需要在命令行中执行\n\n```PLAINTEXT\ngit config --global --unset http.proxy \ngit config --global --unset https.proxy\n```\n\n再次安装主题即可成功\n\n[<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311333116.png\" alt=\"img\" style=\"zoom:50%;\" />](https://static001.geekbang.org/infoq/a1/a1ee42ae917eb1c19261ec72b82efde4.png)\n\n**应用主题**\n\n```PLAINTEXT\ntheme: butterfly\n```\n\n[<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311333759.png\" alt=\"img\" style=\"zoom:50%;\" />](https://static001.geekbang.org/infoq/b0/b08a6de31ecdfcc74ccb0037f23094b3.png)\n\n**安装插件**\n\n如果你没有 pug 以及 stylus 的渲染器，请下载安装：\n\n```PLAINTEXT\nnpm install hexo-renderer-pug hexo-renderer-stylus --save\n```\n\n[<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311333574.png\" alt=\"img\" style=\"zoom:50%;\" />](https://static001.geekbang.org/infoq/cd/cded5198aec31fec9f8b53bb76676174.png)\n\n### Butterfly 主题\n\n生成文章唯一链接\n\nHexo的默认文章链接格式是年，月，日，标题这种格式来生成的。如果你的标题是中文的话，那你的URL链接就会包含中文，\n\n复制后的URL路径就是把中文变成了一大堆字符串编码，如果你在其他地方用这边文章的url链接，偶然你又修改了改文章的标题，那这个URL链接就会失效。为了给每一篇文章来上一个属于自己的链接，写下此教程，利用 hexo-abbrlink 插件，A Hexo plugin to generate static post link based on post titles ,来解决这个问题。 参考github官方： hexo-abbrlink 按照此教程配置完之后如下：\n\n1、安装插件，在博客根目录 [Blogroot] 下打开终端，运行以下指令：\n\n```PLAINTEXT\nnpm install hexo-abbrlink --save\n```\n\n[<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311333642.png\" alt=\"img\" style=\"zoom:50%;\" />](https://static001.geekbang.org/infoq/32/32ad907f045425afedb968d20dab4507.png)\n\n2、插件安装成功后，在根目录 Blogroot(你的博客目录)的配置文件 _config.yml 找到 permalink：\n\n[<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311334031.png\" alt=\"img\" style=\"zoom:50%;\" />](https://static001.geekbang.org/infoq/7e/7e4272e54cb25564b1e708e85c8539d2.png)\n\n## 发布博客\n\n这次了解我上面只有一个HelloWord的时候，为什么不让右键新建，**因为需要命令生成啊，铁汁！**\n\n```PLAINTEXT\nnpm i hexo-deployer-git\n\nhexo new post \"新建博客文章名\"\n\nhexo cl && hexo g  && hexo s\n```\n\n## hexo更换背景图片\n\n背景图片参考网址：\n\n- https://wallhaven.cc/\n- https://wall.alphacoders.com/\n- https://bz.zzzmh.cn/index\n\n*本方法解决的是多次同步到GitHub上背景图片未成功的情况*\n\n直接更改原文件\n\n图片所在目录：`hexo/themes/landscape/source/css/images/`\n\n图片名称：`banner.jpg`\n\n\n\n## ⭐主题美化\n\n芜湖，想做到和我主页一样的动态标题(网页崩溃欺骗)和透明页面吗\n\nLet's get started!\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/image-20231101154515640.png\" style=\"zoom:80%;\" />\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/image-20231101155107655.png\" alt=\"path\" style=\"zoom:80%;\" />\n\n一定要放在博客根目录下的source下，没有就新建一个\n\n然后在\\themes\\butterfly\\中的_config.yml文件下查找injection，将自己新建的文件路径添加进去\n\n```yaml\n# Inject\n# Insert the code to head (before '</head>' tag) and the bottom (before '</body>' tag)\n# 插入代码到头部 </head> 之前 和 底部 </body> 之前\ninject:\n  head:\n    - <link rel=\"stylesheet\" href=\"/css/transpancy.css\">\n    # - <link rel=\"stylesheet\" href=\"/xxx.css\">\n  bottom:\n    - <script src=\"/js/cheat.js\"></script>\n    # - <script src=\"xxxx\"></script>\n```\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/image-20231101154311035.png\" alt=\"image-20231101154311035\" style=\"zoom:80%;\" />\n\n### 动态标题\n\n`cheat.js`的代码\n\n```js\n//动态标题\nvar OriginTitile = document.title;\nvar titleTime;\ndocument.addEventListener('visibilitychange', function () {\n    if (document.hidden) {\n        //离开当前页面时标签显示内容\n        document.title = '网页崩溃啦w(ﾟДﾟ)w ！';\n        clearTimeout(titleTime);\n    }\n    else {\n        //返回当前页面时标签显示内容\n        document.title = '♪(^∇^*)我又好啦！' + OriginTitile;\n        //两秒后变回正常标题\n        titleTime = setTimeout(function () {\n            document.title = OriginTitile;\n        }, 2000);\n    }\n});\n```\n\n### 透明页面\n\n`transpancy.css`的代码：\n\n```css\n/* 文章页背景 */\n.layout_post>#post {\n    /* 以下代表透明度为0.7 可以自行修改*/\n    background: rgba(255,255,255,.7);\n}\n \n/* 所有页面背景 */\n#aside_content .card-widget, #recent-posts>.recent-post-item, .layout_page>div:first-child:not(.recent-posts), .layout_post>#page, .layout_post>#post, .read-mode .layout_post>#post{\n    /* 以下代表透明度为0.7 */\n    background: rgba(255,255,255,.7);\n}\n/*侧边卡片的透明度 */\n:root {\n  --card-bg: rgba(255, 255, 255, .7);\n}\n/* 页脚透明 */\n#footer {\n    /* 以下代表透明度为0.5 */\n    background: rgba(255,255,255, .5);\n}\n```\n\n`注意一件事：css要放在head；js要放在bottom。不能乱放！`\n\n参考：[透明化](https://conzxy.github.io/2022/08/19/hexo/transparent_bg/)    [透明化](https://blog.csdn.net/qq_44138925/article/details/128843200)    [渐变](https://blog.csdn.net/qq_43740362/article/details/113790851?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2-113790851-blog-128843200.235%5Ev38%5Epc_relevant_sort_base1&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2-113790851-blog-128843200.235%5Ev38%5Epc_relevant_sort_base1&utm_relevant_index=5)\n\n\n\n# 第三部分 绑定自己的域名\n\n博客地址：https://www.likecs.com/show-30474.html\n\n**绑定之后你就有有一个自己专属的博客了。**\n\n买一个域名，可以一块钱白嫖，但是续费贵的飞天！！！\n\n***注意请谨慎绑定，想我就会出现提交一次 (hexo d) ,需要重新绑定域名***\n\n\n\n# 图床：\n\n我试了两种：GitHub和七牛云\n\n我想说，如果你有自己的域名。可以选择七牛云，相比GitHub来说快很多\n\n\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311350299.png\" alt=\"image-20231031135024267\" style=\"zoom: 67%;\" />\n\n\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311352581.png\" alt=\"image-20231031135228551\" style=\"zoom: 67%;\" />\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311353997.png\" alt=\"image-20231031135328962\" style=\"zoom: 67%;\" />\n\n\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311354876.png\" alt=\"image-20231031135414847\" style=\"zoom:67%;\" />\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311401584.png\" alt=\"image-20231031140102545\" style=\"zoom:67%;\" />\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311404397.png\" alt=\"image-20231031140446365\" style=\"zoom:67%;\" />\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311409077.png\" alt=\"image-20231031140957036\" style=\"zoom:67%;\" />\n\n进行到这一步就成功喽\n\n下一步，去PicGo设置：\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311408731.png\" alt=\"image-20231031140821695\" style=\"zoom:67%;\" />\n\n\n\nhttps://www.cnblogs.com/skuld-yi/p/14533794.html\n\n\n\n---大部分转载至 武师叔\n\n关注公众号武师叔————————–回复博客————————-即可获得博客PDF文件\n","slug":"hexo-github搭建个人博客","published":1,"updated":"2023-11-01T08:07:21.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clofj2tbx0008oot3fs0eataq","content":"<h1 id=\"Hexo-github搭建个人博客，并绑定域名\"><a href=\"#Hexo-github搭建个人博客，并绑定域名\" class=\"headerlink\" title=\"Hexo+github搭建个人博客，并绑定域名\"></a>Hexo+github搭建个人博客，并绑定域名</h1><blockquote>\n<p>搭建&amp;美化：<a href=\"http://haiyong.site/post/cda958f2.html\">http://haiyong.site/post/cda958f2.html</a> </p>\n</blockquote>\n<p>注：本文章内容大部分来源(包括视频)来自：<a href=\"www.wushishu.xyz\">www.wushishu.xyz </a>备用<a href=\"wushishu.github.io\">wushishu.github.io</a></p>\n<h1 id=\"第一部分视频学习\"><a href=\"#第一部分视频学习\" class=\"headerlink\" title=\"第一部分视频学习\"></a>第一部分视频学习</h1><iframe src=\"https://player.bilibili.com/player.html?aid=638754315&amp;bvid=BV1NY4y1C7Ng&amp;cid=714430663&amp;page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"800\" height=\"500\" style=\"box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-pan-x: ; --tw-pan-y: ; --tw-pinch-zoom: ; --tw-scroll-snap-strictness: proximity; --tw-ordinal: ; --tw-slashed-zero: ; --tw-numeric-figure: ; --tw-numeric-spacing: ; --tw-numeric-fraction: ; --tw-ring-inset: ; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgb(59 130 246 / 0.5); --tw-ring-offset-shadow: 0 0 #0000; --tw-ring-shadow: 0 0 #0000; --tw-shadow: 0 0 #0000; --tw-shadow-colored: 0 0 #0000; --tw-blur: ; --tw-brightness: ; --tw-contrast: ; --tw-grayscale: ; --tw-hue-rotate: ; --tw-invert: ; --tw-saturate: ; --tw-sepia: ; --tw-drop-shadow: ; --tw-backdrop-blur: ; --tw-backdrop-brightness: ; --tw-backdrop-contrast: ; --tw-backdrop-grayscale: ; --tw-backdrop-hue-rotate: ; --tw-backdrop-invert: ; --tw-backdrop-opacity: ; --tw-backdrop-saturate: ; --tw-backdrop-sepia: ; margin: 0px 0px 20px; color: rgb(76, 73, 72); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, &quot;Helvetica Neue&quot;, Lato, Roboto, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;\"></iframe>\n\n<p>也可以直接跟着视频走</p>\n<h2 id=\"安装并配置Node-js\"><a href=\"#安装并配置Node-js\" class=\"headerlink\" title=\"安装并配置Node.js\"></a>安装并配置Node.js</h2><p>Node.js下载:【它让JavaScript成为与PHP、Python、Perl、Ruby等服务端语言平起平坐的脚本语言。】</p>\n<p>教程：<a href=\"https://blog.csdn.net/weixin_52799373/article/details/123840137%EF%BC%88%E8%BF%87%E7%A8%8B%E8%AF%A6%E7%BB%86%EF%BC%8C%E8%BF%98%E8%A6%86%E7%9B%96win11%EF%BC%8C%E8%AF%84%E8%AE%BA%E4%B8%8B%E9%9D%A2%E8%BF%98%E6%9C%89%E5%B8%88%E5%8F%94%E7%9A%84%E8%B6%B3%E8%BF%B9%EF%BC%89\">https://blog.csdn.net/weixin_52799373/article/details/123840137（过程详细，还覆盖win11，评论下面还有师叔的足迹）</a></p>\n<h4 id=\"注意一\"><a href=\"#注意一\" class=\"headerlink\" title=\"注意一\"></a>注意一</h4><p>全局安装最常用的 express 模块 进行测试</p>\n<p>命令如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install express -g</span><br></pre></td></tr></table></figure>\n\n<p>报错图片：</p>\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311330969.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n<p>解决方法：</p>\n<p>【亲测有效】</p>\n<p>需要删除 npmrc 文件。</p>\n<p><strong>强调：</strong>不是nodejs安装目录npm模块下的那个npmrc文件</p>\n<p>而是在 C:\\Users\\（你的用户名）\\下的.npmrc文件</p>\n<p><em><strong>聪明的你，一定想到了直接用evering搜索，省的还要调用文件管理器在一点一点的找</strong></em></p>\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311331077.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n<h4 id=\"注意二\"><a href=\"#注意二\" class=\"headerlink\" title=\"注意二\"></a>注意二</h4><p><strong>在文章第四歩测试上查看安装结果</strong></p>\n<p>可能会出现下面照片结果，更改了目录为什么还是C盘目录下，这时候只需要以管理员身份运行命令即可。</p>\n<p>在下面路径下找到cmd.exe并且管理员身份运行即可。</p>\n<p>推测：出像这种现象的原因就是执行权限不够，推荐大家在桌面建立一个快捷方式（管理员命令的）cmd</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Windows\\System32\\cmd.exe</span><br></pre></td></tr></table></figure>\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311331718.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n<p><strong>创建管理员权限的cmd桌面快捷方式</strong></p>\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311331004.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n<h2 id=\"安装并配置Git\"><a href=\"#安装并配置Git\" class=\"headerlink\" title=\"安装并配置Git\"></a>安装并配置Git</h2><p>git是一个并源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理</p>\n<p>Windows系统Git安装教程：<a href=\"https://www.cnblogs.com/xueweisuoyong/p/11914045.html\">https://www.cnblogs.com/xueweisuoyong/p/11914045.html</a></p>\n<h3 id=\"生成SSH-Keys\"><a href=\"#生成SSH-Keys\" class=\"headerlink\" title=\"生成SSH Keys\"></a>生成SSH Keys</h3><p>生成ssh</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;你的邮箱地址&quot;</span><br></pre></td></tr></table></figure>\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311331566.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n<p><strong>找到秘钥位置并复制</strong></p>\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311331246.png\" alt=\"img\" style=\"zoom:500%;\" />\n\n<p><strong>测试ssh是否绑定成功</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n\n<p>如果问你（yes or no）,直接 yes 就可以得到下面这段话</p>\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311331532.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n<h2 id=\"本地访问博客\"><a href=\"#本地访问博客\" class=\"headerlink\" title=\"本地访问博客\"></a>本地访问博客</h2><p>1、创建一个名为 Blog 的文件，在里面启用 Git Bash Here</p>\n<p><a href=\"https://static001.geekbang.org/infoq/b0/b06a27bee58606277ea46f413b34ed14.png\"><img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311331193.png\" alt=\"img\" style=\"zoom:50%;\" /></a></p>\n<p>2、初始化hexo</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311331023.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n<p>3、生成本地的hexo页面</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332717.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n<p>4、访问</p>\n<p>打开本地服务器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:4000/</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://static001.geekbang.org/infoq/5f/5fde531819308103720a5c098f342092.png\"><img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332849.png\" alt=\"img\" style=\"zoom:50%;\" /></a></p>\n<blockquote>\n<p>长按 Ctrl + c 关闭服务器</p>\n</blockquote>\n<p><a href=\"https://static001.geekbang.org/infoq/6f/6f77175cb6028832126b38d0b820be95.png\"><img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332255.png\" alt=\"img\" style=\"zoom:50%;\" /></a></p>\n<h2 id=\"上传到Github\"><a href=\"#上传到Github\" class=\"headerlink\" title=\"上传到Github\"></a>上传到Github</h2><p>修改_config.yml文件</p>\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332108.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n<p><strong>把图片上位置更换成</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: 你的github地址</span><br><span class=\"line\">  branch: main</span><br></pre></td></tr></table></figure>\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332828.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n<p>安装hexo-deployer-git 自动部署发布工具</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://static001.geekbang.org/infoq/a9/a94aa787c8627d7bc2d95fc3aabe211d.png\"><img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332467.png\" alt=\"img\" style=\"zoom:50%;\" /></a></p>\n<h3 id=\"生成页面\"><a href=\"#生成页面\" class=\"headerlink\" title=\"生成页面\"></a><strong>生成页面</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://static001.geekbang.org/infoq/ec/ec4dc5e76906c62036e61f4d083ebaad.png\"><img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332692.png\" alt=\"img\" style=\"zoom:50%;\" /></a></p>\n<h4 id=\"注意一-1\"><a href=\"#注意一-1\" class=\"headerlink\" title=\"注意一\"></a>注意一</h4><p>如果报错如下：（无报错，请忽略此条）</p>\n<p>报错信息是提示hexo的yml配置文件 冒号后面少了空格解决方案：</p>\n<p>到提示行将对应的空格补上即可</p>\n<p><a href=\"https://static001.geekbang.org/infoq/f1/f139b76ed562b895ece7557ebb5bb791.png\"><img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332399.png\" alt=\"img\" style=\"zoom:50%;\" /></a></p>\n<p>本地文件上传到Github上面</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<p>中间会出现一个登录界面，可以用令牌登录。（令牌及时保存，就看不到了）</p>\n<p>结束以后就上传 Github 就成功了！！！</p>\n<p><a href=\"https://static001.geekbang.org/infoq/1b/1ba83adbf958f9ed0ad0129bd843f785.png\"><img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332663.png\" alt=\"img\" style=\"zoom:50%;\" /></a></p>\n<h4 id=\"注意二-1\"><a href=\"#注意二-1\" class=\"headerlink\" title=\"注意二\"></a>注意二</h4><p>如果出现如图错误网络报错，再次尝试，多次尝试，直到更换WiFi~~~~</p>\n<p><a href=\"https://static001.geekbang.org/infoq/5e/5e33beb4a80df251722f550b7ca0de88.png\"><img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332772.png\" alt=\"img\" style=\"zoom:50%;\" /></a></p>\n<h2 id=\"访问GitHub博客\"><a href=\"#访问GitHub博客\" class=\"headerlink\" title=\"访问GitHub博客\"></a>访问GitHub博客</h2><p><a href=\"https://static001.geekbang.org/infoq/0a/0a397f64a129a210ccbebdff832de7af.png\"><img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332428.png\" alt=\"img\" style=\"zoom:50%;\" /></a></p>\n<p>访问博客，开始的页面是初始化页面，没有做美化和增加内容。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://wushishu.github.io/</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://static001.geekbang.org/infoq/aa/aa2f760148fbcbf6c3ce0b43cbe3433c.png\"><img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332934.png\" alt=\"img\" style=\"zoom: 50%;\" /></a></p>\n<h1 id=\"第二部分-文档学习\"><a href=\"#第二部分-文档学习\" class=\"headerlink\" title=\"第二部分 文档学习\"></a>第二部分 文档学习</h1><h2 id=\"撰写博客\"><a href=\"#撰写博客\" class=\"headerlink\" title=\"撰写博客\"></a>撰写博客</h2><p><em><strong>电脑要必须有Typora！电脑要必须有Typora！电脑要必须有Typora！</strong></em>（重要的事情说三遍）</p>\n<p>文本教程：<a href=\"https://dhndzwxj.vercel.app/3276806131.html\">https://dhndzwxj.vercel.app/3276806131.html</a></p>\n<p>hexo标签教程：<a href=\"http://haiyong.site/post/cda958f2.html\">http://haiyong.site/post/cda958f2.html</a>（参考文档看需求加不加）</p>\n<p>我们打开自己的博客根目录，跟着我一个个了解里面的这些文件（夹）都是干什么的：</p>\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332992.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n<ul>\n<li><code>_config.yml</code>：俗称站点配置文件，很多与博客网站的格式、内容相关的设置都需要在里面改。</li>\n<li><code>node_modules</code>:存储Hexo插件的文件，可以实现各种扩展功能。一般不需要管。</li>\n<li><code>package.json</code>：别问我，我也不知道干嘛的。</li>\n<li><code>scaffolds</code>：模板文件夹，里面的<code>post.md</code>文件可以设置每一篇博客的模板。具体用起来就知道能干嘛了。</li>\n<li><code>source</code>：非常重要。所有的个人文件都在里面！</li>\n<li><code>themes</code>：主题文件夹，可以从<a href=\"https://hexo.io/themes/\">Hexo主题官网</a>或者网上大神的Github主页下载各种各样美观的主题，让自己的网站变得逼格高端的关键！</li>\n</ul>\n<p>接下来重点介绍<code>source</code>文件夹。新建的博客中，<code>source</code>文件夹下默认只有一个子文件夹——<code>_posts</code>。我们写的博客都放在这个子文件夹里面。我们还可以在<code>source</code>里面新建各种子文件夹满足自己的个性化需求，对初学者而言，我们先把精力放在主线任务上，然后再来搞这些细节。</p>\n<p><a href=\"https://static001.geekbang.org/infoq/3f/3f7b8b410726691082019f2ab603976b.png\"><img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332045.png\" alt=\"img\" style=\"zoom:50%;\" /></a></p>\n<p>写好Hellworld内容后，在命令行一键三连：</p>\n<blockquote>\n<p>‘hexo cl’命令用于清除缓存文件（db.json）和已生成的静态文件（public）。</p>\n<p>例如：在更换主题后，如果发现站点更改不生效，可以运行该命令。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo cl</span><br><span class=\"line\"></span><br><span class=\"line\">hexo g</span><br><span class=\"line\"></span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n\n<p>然后随便打开一个浏览器，在网址栏输入<code>localhost:4000/</code>，就能发现自己的网站更新了！不过这只是在本地进行了更新，要想部署到网上（Github上），输入如下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<p>然后在浏览器地址栏输入<code>https://yourname.github.io</code>，或者<code>yourname.github.io</code>就能在网上浏览自己的博客了！</p>\n<p>以上，我们的博客网站1.0版本就搭建完成了，如果没有更多的需求，做到这里基本上就可以了。如果有更多的要求，还需要进一步的精耕细作！</p>\n<h2 id=\"精耕细作\"><a href=\"#精耕细作\" class=\"headerlink\" title=\"精耕细作\"></a>精耕细作</h2><p><strong>海拥\\Butterfly 主题美化：</strong><a href=\"http://haiyong.site/post/22e1d5da.html\">http://haiyong.site/post/22e1d5da.html</a></p>\n<p><strong>Butterfly参考文档（小白慎入，但是他也是你走向DIY必须迈出的一歩）</strong>:<a href=\"https://butterfly.js.org/posts/dc584b87/#Post-Front-matter\">https://butterfly.js.org/posts/dc584b87/#Post-Front-matter</a></p>\n<p>文章中要更改的文件（.yml .bug 等）可以要用viscode打开！！！</p>\n<p><strong>Butterfly 主题安装</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure>\n\n<p>这里面如果报错，如下图所示（长路漫漫，bug满满）</p>\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311333567.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n<p>只需要在命令行中执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --unset http.proxy </span><br><span class=\"line\">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>\n\n<p>再次安装主题即可成功</p>\n<p><a href=\"https://static001.geekbang.org/infoq/a1/a1ee42ae917eb1c19261ec72b82efde4.png\"><img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311333116.png\" alt=\"img\" style=\"zoom:50%;\" /></a></p>\n<p><strong>应用主题</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme: butterfly</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://static001.geekbang.org/infoq/b0/b08a6de31ecdfcc74ccb0037f23094b3.png\"><img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311333759.png\" alt=\"img\" style=\"zoom:50%;\" /></a></p>\n<p><strong>安装插件</strong></p>\n<p>如果你没有 pug 以及 stylus 的渲染器，请下载安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://static001.geekbang.org/infoq/cd/cded5198aec31fec9f8b53bb76676174.png\"><img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311333574.png\" alt=\"img\" style=\"zoom:50%;\" /></a></p>\n<h3 id=\"Butterfly-主题\"><a href=\"#Butterfly-主题\" class=\"headerlink\" title=\"Butterfly 主题\"></a>Butterfly 主题</h3><p>生成文章唯一链接</p>\n<p>Hexo的默认文章链接格式是年，月，日，标题这种格式来生成的。如果你的标题是中文的话，那你的URL链接就会包含中文，</p>\n<p>复制后的URL路径就是把中文变成了一大堆字符串编码，如果你在其他地方用这边文章的url链接，偶然你又修改了改文章的标题，那这个URL链接就会失效。为了给每一篇文章来上一个属于自己的链接，写下此教程，利用 hexo-abbrlink 插件，A Hexo plugin to generate static post link based on post titles ,来解决这个问题。 参考github官方： hexo-abbrlink 按照此教程配置完之后如下：</p>\n<p>1、安装插件，在博客根目录 [Blogroot] 下打开终端，运行以下指令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://static001.geekbang.org/infoq/32/32ad907f045425afedb968d20dab4507.png\"><img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311333642.png\" alt=\"img\" style=\"zoom:50%;\" /></a></p>\n<p>2、插件安装成功后，在根目录 Blogroot(你的博客目录)的配置文件 _config.yml 找到 permalink：</p>\n<p><a href=\"https://static001.geekbang.org/infoq/7e/7e4272e54cb25564b1e708e85c8539d2.png\"><img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311334031.png\" alt=\"img\" style=\"zoom:50%;\" /></a></p>\n<h2 id=\"发布博客\"><a href=\"#发布博客\" class=\"headerlink\" title=\"发布博客\"></a>发布博客</h2><p>这次了解我上面只有一个HelloWord的时候，为什么不让右键新建，<strong>因为需要命令生成啊，铁汁！</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i hexo-deployer-git</span><br><span class=\"line\"></span><br><span class=\"line\">hexo new post &quot;新建博客文章名&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">hexo cl &amp;&amp; hexo g  &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"hexo更换背景图片\"><a href=\"#hexo更换背景图片\" class=\"headerlink\" title=\"hexo更换背景图片\"></a>hexo更换背景图片</h2><p>背景图片参考网址：</p>\n<ul>\n<li><a href=\"https://wallhaven.cc/\">https://wallhaven.cc/</a></li>\n<li><a href=\"https://wall.alphacoders.com/\">https://wall.alphacoders.com/</a></li>\n<li><a href=\"https://bz.zzzmh.cn/index\">https://bz.zzzmh.cn/index</a></li>\n</ul>\n<p><em>本方法解决的是多次同步到GitHub上背景图片未成功的情况</em></p>\n<p>直接更改原文件</p>\n<p>图片所在目录：<code>hexo/themes/landscape/source/css/images/</code></p>\n<p>图片名称：<code>banner.jpg</code></p>\n<h2 id=\"⭐主题美化\"><a href=\"#⭐主题美化\" class=\"headerlink\" title=\"⭐主题美化\"></a>⭐主题美化</h2><p>芜湖，想做到和我主页一样的动态标题(网页崩溃欺骗)和透明页面吗</p>\n<p>Let’s get started!</p>\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/image-20231101154515640.png\" style=\"zoom:80%;\" />\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/image-20231101155107655.png\" alt=\"path\" style=\"zoom:80%;\" />\n\n<p>一定要放在博客根目录下的source下，没有就新建一个</p>\n<p>然后在\\themes\\butterfly\\中的_config.yml文件下查找injection，将自己新建的文件路径添加进去</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Inject</span></span><br><span class=\"line\"><span class=\"comment\"># Insert the code to head (before &#x27;&lt;/head&gt;&#x27; tag) and the bottom (before &#x27;&lt;/body&gt;&#x27; tag)</span></span><br><span class=\"line\"><span class=\"comment\"># 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前</span></span><br><span class=\"line\"><span class=\"attr\">inject:</span></span><br><span class=\"line\">  <span class=\"attr\">head:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&lt;link</span> <span class=\"string\">rel=&quot;stylesheet&quot;</span> <span class=\"string\">href=&quot;/css/transpancy.css&quot;&gt;</span></span><br><span class=\"line\">    <span class=\"comment\"># - &lt;link rel=&quot;stylesheet&quot; href=&quot;/xxx.css&quot;&gt;</span></span><br><span class=\"line\">  <span class=\"attr\">bottom:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&lt;script</span> <span class=\"string\">src=&quot;/js/cheat.js&quot;&gt;&lt;/script&gt;</span></span><br><span class=\"line\">    <span class=\"comment\"># - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/image-20231101154311035.png\" alt=\"image-20231101154311035\" style=\"zoom:80%;\" />\n\n<h3 id=\"动态标题\"><a href=\"#动态标题\" class=\"headerlink\" title=\"动态标题\"></a>动态标题</h3><p><code>cheat.js</code>的代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//动态标题</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">OriginTitile</span> = <span class=\"variable language_\">document</span>.<span class=\"property\">title</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> titleTime;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;visibilitychange&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">document</span>.<span class=\"property\">hidden</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//离开当前页面时标签显示内容</span></span><br><span class=\"line\">        <span class=\"variable language_\">document</span>.<span class=\"property\">title</span> = <span class=\"string\">&#x27;网页崩溃啦w(ﾟДﾟ)w ！&#x27;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">clearTimeout</span>(titleTime);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//返回当前页面时标签显示内容</span></span><br><span class=\"line\">        <span class=\"variable language_\">document</span>.<span class=\"property\">title</span> = <span class=\"string\">&#x27;♪(^∇^*)我又好啦！&#x27;</span> + <span class=\"title class_\">OriginTitile</span>;</span><br><span class=\"line\">        <span class=\"comment\">//两秒后变回正常标题</span></span><br><span class=\"line\">        titleTime = <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">document</span>.<span class=\"property\">title</span> = <span class=\"title class_\">OriginTitile</span>;</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"透明页面\"><a href=\"#透明页面\" class=\"headerlink\" title=\"透明页面\"></a>透明页面</h3><p><code>transpancy.css</code>的代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 文章页背景 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.layout_post</span>&gt;<span class=\"selector-id\">#post</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 以下代表透明度为0.7 可以自行修改*/</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>,.<span class=\"number\">7</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/* 所有页面背景 */</span></span><br><span class=\"line\"><span class=\"selector-id\">#aside_content</span> <span class=\"selector-class\">.card-widget</span>, <span class=\"selector-id\">#recent-posts</span>&gt;<span class=\"selector-class\">.recent-post-item</span>, <span class=\"selector-class\">.layout_page</span>&gt;<span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">:first</span>-child<span class=\"selector-pseudo\">:not</span>(<span class=\"selector-class\">.recent-posts</span>), <span class=\"selector-class\">.layout_post</span>&gt;<span class=\"selector-id\">#page</span>, <span class=\"selector-class\">.layout_post</span>&gt;<span class=\"selector-id\">#post</span>, <span class=\"selector-class\">.read-mode</span> <span class=\"selector-class\">.layout_post</span>&gt;<span class=\"selector-id\">#post</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 以下代表透明度为0.7 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>,.<span class=\"number\">7</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*侧边卡片的透明度 */</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">:root</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">--card-bg</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, .<span class=\"number\">7</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 页脚透明 */</span></span><br><span class=\"line\"><span class=\"selector-id\">#footer</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 以下代表透明度为0.5 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>, .<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>注意一件事：css要放在head；js要放在bottom。不能乱放！</code></p>\n<p>参考：<a href=\"https://conzxy.github.io/2022/08/19/hexo/transparent_bg/\">透明化</a>    <a href=\"https://blog.csdn.net/qq_44138925/article/details/128843200\">透明化</a>    <a href=\"https://blog.csdn.net/qq_43740362/article/details/113790851?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-113790851-blog-128843200.235%5Ev38%5Epc_relevant_sort_base1&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-113790851-blog-128843200.235%5Ev38%5Epc_relevant_sort_base1&utm_relevant_index=5\">渐变</a></p>\n<h1 id=\"第三部分-绑定自己的域名\"><a href=\"#第三部分-绑定自己的域名\" class=\"headerlink\" title=\"第三部分 绑定自己的域名\"></a>第三部分 绑定自己的域名</h1><p>博客地址：<a href=\"https://www.likecs.com/show-30474.html\">https://www.likecs.com/show-30474.html</a></p>\n<p><strong>绑定之后你就有有一个自己专属的博客了。</strong></p>\n<p>买一个域名，可以一块钱白嫖，但是续费贵的飞天！！！</p>\n<p><em><strong>注意请谨慎绑定，想我就会出现提交一次 (hexo d) ,需要重新绑定域名</strong></em></p>\n<h1 id=\"图床：\"><a href=\"#图床：\" class=\"headerlink\" title=\"图床：\"></a>图床：</h1><p>我试了两种：GitHub和七牛云</p>\n<p>我想说，如果你有自己的域名。可以选择七牛云，相比GitHub来说快很多</p>\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311350299.png\" alt=\"image-20231031135024267\" style=\"zoom: 67%;\" />\n\n\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311352581.png\" alt=\"image-20231031135228551\" style=\"zoom: 67%;\" />\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311353997.png\" alt=\"image-20231031135328962\" style=\"zoom: 67%;\" />\n\n\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311354876.png\" alt=\"image-20231031135414847\" style=\"zoom:67%;\" />\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311401584.png\" alt=\"image-20231031140102545\" style=\"zoom:67%;\" />\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311404397.png\" alt=\"image-20231031140446365\" style=\"zoom:67%;\" />\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311409077.png\" alt=\"image-20231031140957036\" style=\"zoom:67%;\" />\n\n<p>进行到这一步就成功喽</p>\n<p>下一步，去PicGo设置：</p>\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311408731.png\" alt=\"image-20231031140821695\" style=\"zoom:67%;\" />\n\n\n\n<p><a href=\"https://www.cnblogs.com/skuld-yi/p/14533794.html\">https://www.cnblogs.com/skuld-yi/p/14533794.html</a></p>\n<p>—大部分转载至 武师叔</p>\n<p>关注公众号武师叔————————–回复博客————————-即可获得博客PDF文件</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"安装文, 档快速开始","link":"https://butterfly.js.org/posts/21cfbf15/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"Butterfly主题 帮助文档"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"http://qiniu.hanvon.top/blog_backgounnd/praire.jpg","excerpt":"","more":"<h1 id=\"Hexo-github搭建个人博客，并绑定域名\"><a href=\"#Hexo-github搭建个人博客，并绑定域名\" class=\"headerlink\" title=\"Hexo+github搭建个人博客，并绑定域名\"></a>Hexo+github搭建个人博客，并绑定域名</h1><blockquote>\n<p>搭建&amp;美化：<a href=\"http://haiyong.site/post/cda958f2.html\">http://haiyong.site/post/cda958f2.html</a> </p>\n</blockquote>\n<p>注：本文章内容大部分来源(包括视频)来自：<a href=\"www.wushishu.xyz\">www.wushishu.xyz </a>备用<a href=\"wushishu.github.io\">wushishu.github.io</a></p>\n<h1 id=\"第一部分视频学习\"><a href=\"#第一部分视频学习\" class=\"headerlink\" title=\"第一部分视频学习\"></a>第一部分视频学习</h1><iframe src=\"https://player.bilibili.com/player.html?aid=638754315&amp;bvid=BV1NY4y1C7Ng&amp;cid=714430663&amp;page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"800\" height=\"500\" style=\"box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-pan-x: ; --tw-pan-y: ; --tw-pinch-zoom: ; --tw-scroll-snap-strictness: proximity; --tw-ordinal: ; --tw-slashed-zero: ; --tw-numeric-figure: ; --tw-numeric-spacing: ; --tw-numeric-fraction: ; --tw-ring-inset: ; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgb(59 130 246 / 0.5); --tw-ring-offset-shadow: 0 0 #0000; --tw-ring-shadow: 0 0 #0000; --tw-shadow: 0 0 #0000; --tw-shadow-colored: 0 0 #0000; --tw-blur: ; --tw-brightness: ; --tw-contrast: ; --tw-grayscale: ; --tw-hue-rotate: ; --tw-invert: ; --tw-saturate: ; --tw-sepia: ; --tw-drop-shadow: ; --tw-backdrop-blur: ; --tw-backdrop-brightness: ; --tw-backdrop-contrast: ; --tw-backdrop-grayscale: ; --tw-backdrop-hue-rotate: ; --tw-backdrop-invert: ; --tw-backdrop-opacity: ; --tw-backdrop-saturate: ; --tw-backdrop-sepia: ; margin: 0px 0px 20px; color: rgb(76, 73, 72); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, &quot;Helvetica Neue&quot;, Lato, Roboto, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;\"></iframe>\n\n<p>也可以直接跟着视频走</p>\n<h2 id=\"安装并配置Node-js\"><a href=\"#安装并配置Node-js\" class=\"headerlink\" title=\"安装并配置Node.js\"></a>安装并配置Node.js</h2><p>Node.js下载:【它让JavaScript成为与PHP、Python、Perl、Ruby等服务端语言平起平坐的脚本语言。】</p>\n<p>教程：<a href=\"https://blog.csdn.net/weixin_52799373/article/details/123840137%EF%BC%88%E8%BF%87%E7%A8%8B%E8%AF%A6%E7%BB%86%EF%BC%8C%E8%BF%98%E8%A6%86%E7%9B%96win11%EF%BC%8C%E8%AF%84%E8%AE%BA%E4%B8%8B%E9%9D%A2%E8%BF%98%E6%9C%89%E5%B8%88%E5%8F%94%E7%9A%84%E8%B6%B3%E8%BF%B9%EF%BC%89\">https://blog.csdn.net/weixin_52799373/article/details/123840137（过程详细，还覆盖win11，评论下面还有师叔的足迹）</a></p>\n<h4 id=\"注意一\"><a href=\"#注意一\" class=\"headerlink\" title=\"注意一\"></a>注意一</h4><p>全局安装最常用的 express 模块 进行测试</p>\n<p>命令如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install express -g</span><br></pre></td></tr></table></figure>\n\n<p>报错图片：</p>\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311330969.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n<p>解决方法：</p>\n<p>【亲测有效】</p>\n<p>需要删除 npmrc 文件。</p>\n<p><strong>强调：</strong>不是nodejs安装目录npm模块下的那个npmrc文件</p>\n<p>而是在 C:\\Users\\（你的用户名）\\下的.npmrc文件</p>\n<p><em><strong>聪明的你，一定想到了直接用evering搜索，省的还要调用文件管理器在一点一点的找</strong></em></p>\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311331077.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n<h4 id=\"注意二\"><a href=\"#注意二\" class=\"headerlink\" title=\"注意二\"></a>注意二</h4><p><strong>在文章第四歩测试上查看安装结果</strong></p>\n<p>可能会出现下面照片结果，更改了目录为什么还是C盘目录下，这时候只需要以管理员身份运行命令即可。</p>\n<p>在下面路径下找到cmd.exe并且管理员身份运行即可。</p>\n<p>推测：出像这种现象的原因就是执行权限不够，推荐大家在桌面建立一个快捷方式（管理员命令的）cmd</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Windows\\System32\\cmd.exe</span><br></pre></td></tr></table></figure>\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311331718.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n<p><strong>创建管理员权限的cmd桌面快捷方式</strong></p>\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311331004.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n<h2 id=\"安装并配置Git\"><a href=\"#安装并配置Git\" class=\"headerlink\" title=\"安装并配置Git\"></a>安装并配置Git</h2><p>git是一个并源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理</p>\n<p>Windows系统Git安装教程：<a href=\"https://www.cnblogs.com/xueweisuoyong/p/11914045.html\">https://www.cnblogs.com/xueweisuoyong/p/11914045.html</a></p>\n<h3 id=\"生成SSH-Keys\"><a href=\"#生成SSH-Keys\" class=\"headerlink\" title=\"生成SSH Keys\"></a>生成SSH Keys</h3><p>生成ssh</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;你的邮箱地址&quot;</span><br></pre></td></tr></table></figure>\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311331566.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n<p><strong>找到秘钥位置并复制</strong></p>\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311331246.png\" alt=\"img\" style=\"zoom:500%;\" />\n\n<p><strong>测试ssh是否绑定成功</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n\n<p>如果问你（yes or no）,直接 yes 就可以得到下面这段话</p>\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311331532.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n<h2 id=\"本地访问博客\"><a href=\"#本地访问博客\" class=\"headerlink\" title=\"本地访问博客\"></a>本地访问博客</h2><p>1、创建一个名为 Blog 的文件，在里面启用 Git Bash Here</p>\n<p><a href=\"https://static001.geekbang.org/infoq/b0/b06a27bee58606277ea46f413b34ed14.png\"><img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311331193.png\" alt=\"img\" style=\"zoom:50%;\" /></a></p>\n<p>2、初始化hexo</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311331023.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n<p>3、生成本地的hexo页面</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332717.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n<p>4、访问</p>\n<p>打开本地服务器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:4000/</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://static001.geekbang.org/infoq/5f/5fde531819308103720a5c098f342092.png\"><img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332849.png\" alt=\"img\" style=\"zoom:50%;\" /></a></p>\n<blockquote>\n<p>长按 Ctrl + c 关闭服务器</p>\n</blockquote>\n<p><a href=\"https://static001.geekbang.org/infoq/6f/6f77175cb6028832126b38d0b820be95.png\"><img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332255.png\" alt=\"img\" style=\"zoom:50%;\" /></a></p>\n<h2 id=\"上传到Github\"><a href=\"#上传到Github\" class=\"headerlink\" title=\"上传到Github\"></a>上传到Github</h2><p>修改_config.yml文件</p>\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332108.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n<p><strong>把图片上位置更换成</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: 你的github地址</span><br><span class=\"line\">  branch: main</span><br></pre></td></tr></table></figure>\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332828.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n<p>安装hexo-deployer-git 自动部署发布工具</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://static001.geekbang.org/infoq/a9/a94aa787c8627d7bc2d95fc3aabe211d.png\"><img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332467.png\" alt=\"img\" style=\"zoom:50%;\" /></a></p>\n<h3 id=\"生成页面\"><a href=\"#生成页面\" class=\"headerlink\" title=\"生成页面\"></a><strong>生成页面</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://static001.geekbang.org/infoq/ec/ec4dc5e76906c62036e61f4d083ebaad.png\"><img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332692.png\" alt=\"img\" style=\"zoom:50%;\" /></a></p>\n<h4 id=\"注意一-1\"><a href=\"#注意一-1\" class=\"headerlink\" title=\"注意一\"></a>注意一</h4><p>如果报错如下：（无报错，请忽略此条）</p>\n<p>报错信息是提示hexo的yml配置文件 冒号后面少了空格解决方案：</p>\n<p>到提示行将对应的空格补上即可</p>\n<p><a href=\"https://static001.geekbang.org/infoq/f1/f139b76ed562b895ece7557ebb5bb791.png\"><img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332399.png\" alt=\"img\" style=\"zoom:50%;\" /></a></p>\n<p>本地文件上传到Github上面</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<p>中间会出现一个登录界面，可以用令牌登录。（令牌及时保存，就看不到了）</p>\n<p>结束以后就上传 Github 就成功了！！！</p>\n<p><a href=\"https://static001.geekbang.org/infoq/1b/1ba83adbf958f9ed0ad0129bd843f785.png\"><img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332663.png\" alt=\"img\" style=\"zoom:50%;\" /></a></p>\n<h4 id=\"注意二-1\"><a href=\"#注意二-1\" class=\"headerlink\" title=\"注意二\"></a>注意二</h4><p>如果出现如图错误网络报错，再次尝试，多次尝试，直到更换WiFi~~~~</p>\n<p><a href=\"https://static001.geekbang.org/infoq/5e/5e33beb4a80df251722f550b7ca0de88.png\"><img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332772.png\" alt=\"img\" style=\"zoom:50%;\" /></a></p>\n<h2 id=\"访问GitHub博客\"><a href=\"#访问GitHub博客\" class=\"headerlink\" title=\"访问GitHub博客\"></a>访问GitHub博客</h2><p><a href=\"https://static001.geekbang.org/infoq/0a/0a397f64a129a210ccbebdff832de7af.png\"><img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332428.png\" alt=\"img\" style=\"zoom:50%;\" /></a></p>\n<p>访问博客，开始的页面是初始化页面，没有做美化和增加内容。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://wushishu.github.io/</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://static001.geekbang.org/infoq/aa/aa2f760148fbcbf6c3ce0b43cbe3433c.png\"><img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332934.png\" alt=\"img\" style=\"zoom: 50%;\" /></a></p>\n<h1 id=\"第二部分-文档学习\"><a href=\"#第二部分-文档学习\" class=\"headerlink\" title=\"第二部分 文档学习\"></a>第二部分 文档学习</h1><h2 id=\"撰写博客\"><a href=\"#撰写博客\" class=\"headerlink\" title=\"撰写博客\"></a>撰写博客</h2><p><em><strong>电脑要必须有Typora！电脑要必须有Typora！电脑要必须有Typora！</strong></em>（重要的事情说三遍）</p>\n<p>文本教程：<a href=\"https://dhndzwxj.vercel.app/3276806131.html\">https://dhndzwxj.vercel.app/3276806131.html</a></p>\n<p>hexo标签教程：<a href=\"http://haiyong.site/post/cda958f2.html\">http://haiyong.site/post/cda958f2.html</a>（参考文档看需求加不加）</p>\n<p>我们打开自己的博客根目录，跟着我一个个了解里面的这些文件（夹）都是干什么的：</p>\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332992.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n<ul>\n<li><code>_config.yml</code>：俗称站点配置文件，很多与博客网站的格式、内容相关的设置都需要在里面改。</li>\n<li><code>node_modules</code>:存储Hexo插件的文件，可以实现各种扩展功能。一般不需要管。</li>\n<li><code>package.json</code>：别问我，我也不知道干嘛的。</li>\n<li><code>scaffolds</code>：模板文件夹，里面的<code>post.md</code>文件可以设置每一篇博客的模板。具体用起来就知道能干嘛了。</li>\n<li><code>source</code>：非常重要。所有的个人文件都在里面！</li>\n<li><code>themes</code>：主题文件夹，可以从<a href=\"https://hexo.io/themes/\">Hexo主题官网</a>或者网上大神的Github主页下载各种各样美观的主题，让自己的网站变得逼格高端的关键！</li>\n</ul>\n<p>接下来重点介绍<code>source</code>文件夹。新建的博客中，<code>source</code>文件夹下默认只有一个子文件夹——<code>_posts</code>。我们写的博客都放在这个子文件夹里面。我们还可以在<code>source</code>里面新建各种子文件夹满足自己的个性化需求，对初学者而言，我们先把精力放在主线任务上，然后再来搞这些细节。</p>\n<p><a href=\"https://static001.geekbang.org/infoq/3f/3f7b8b410726691082019f2ab603976b.png\"><img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311332045.png\" alt=\"img\" style=\"zoom:50%;\" /></a></p>\n<p>写好Hellworld内容后，在命令行一键三连：</p>\n<blockquote>\n<p>‘hexo cl’命令用于清除缓存文件（db.json）和已生成的静态文件（public）。</p>\n<p>例如：在更换主题后，如果发现站点更改不生效，可以运行该命令。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo cl</span><br><span class=\"line\"></span><br><span class=\"line\">hexo g</span><br><span class=\"line\"></span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n\n<p>然后随便打开一个浏览器，在网址栏输入<code>localhost:4000/</code>，就能发现自己的网站更新了！不过这只是在本地进行了更新，要想部署到网上（Github上），输入如下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<p>然后在浏览器地址栏输入<code>https://yourname.github.io</code>，或者<code>yourname.github.io</code>就能在网上浏览自己的博客了！</p>\n<p>以上，我们的博客网站1.0版本就搭建完成了，如果没有更多的需求，做到这里基本上就可以了。如果有更多的要求，还需要进一步的精耕细作！</p>\n<h2 id=\"精耕细作\"><a href=\"#精耕细作\" class=\"headerlink\" title=\"精耕细作\"></a>精耕细作</h2><p><strong>海拥\\Butterfly 主题美化：</strong><a href=\"http://haiyong.site/post/22e1d5da.html\">http://haiyong.site/post/22e1d5da.html</a></p>\n<p><strong>Butterfly参考文档（小白慎入，但是他也是你走向DIY必须迈出的一歩）</strong>:<a href=\"https://butterfly.js.org/posts/dc584b87/#Post-Front-matter\">https://butterfly.js.org/posts/dc584b87/#Post-Front-matter</a></p>\n<p>文章中要更改的文件（.yml .bug 等）可以要用viscode打开！！！</p>\n<p><strong>Butterfly 主题安装</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure>\n\n<p>这里面如果报错，如下图所示（长路漫漫，bug满满）</p>\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311333567.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n<p>只需要在命令行中执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --unset http.proxy </span><br><span class=\"line\">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>\n\n<p>再次安装主题即可成功</p>\n<p><a href=\"https://static001.geekbang.org/infoq/a1/a1ee42ae917eb1c19261ec72b82efde4.png\"><img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311333116.png\" alt=\"img\" style=\"zoom:50%;\" /></a></p>\n<p><strong>应用主题</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme: butterfly</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://static001.geekbang.org/infoq/b0/b08a6de31ecdfcc74ccb0037f23094b3.png\"><img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311333759.png\" alt=\"img\" style=\"zoom:50%;\" /></a></p>\n<p><strong>安装插件</strong></p>\n<p>如果你没有 pug 以及 stylus 的渲染器，请下载安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://static001.geekbang.org/infoq/cd/cded5198aec31fec9f8b53bb76676174.png\"><img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311333574.png\" alt=\"img\" style=\"zoom:50%;\" /></a></p>\n<h3 id=\"Butterfly-主题\"><a href=\"#Butterfly-主题\" class=\"headerlink\" title=\"Butterfly 主题\"></a>Butterfly 主题</h3><p>生成文章唯一链接</p>\n<p>Hexo的默认文章链接格式是年，月，日，标题这种格式来生成的。如果你的标题是中文的话，那你的URL链接就会包含中文，</p>\n<p>复制后的URL路径就是把中文变成了一大堆字符串编码，如果你在其他地方用这边文章的url链接，偶然你又修改了改文章的标题，那这个URL链接就会失效。为了给每一篇文章来上一个属于自己的链接，写下此教程，利用 hexo-abbrlink 插件，A Hexo plugin to generate static post link based on post titles ,来解决这个问题。 参考github官方： hexo-abbrlink 按照此教程配置完之后如下：</p>\n<p>1、安装插件，在博客根目录 [Blogroot] 下打开终端，运行以下指令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://static001.geekbang.org/infoq/32/32ad907f045425afedb968d20dab4507.png\"><img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311333642.png\" alt=\"img\" style=\"zoom:50%;\" /></a></p>\n<p>2、插件安装成功后，在根目录 Blogroot(你的博客目录)的配置文件 _config.yml 找到 permalink：</p>\n<p><a href=\"https://static001.geekbang.org/infoq/7e/7e4272e54cb25564b1e708e85c8539d2.png\"><img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311334031.png\" alt=\"img\" style=\"zoom:50%;\" /></a></p>\n<h2 id=\"发布博客\"><a href=\"#发布博客\" class=\"headerlink\" title=\"发布博客\"></a>发布博客</h2><p>这次了解我上面只有一个HelloWord的时候，为什么不让右键新建，<strong>因为需要命令生成啊，铁汁！</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i hexo-deployer-git</span><br><span class=\"line\"></span><br><span class=\"line\">hexo new post &quot;新建博客文章名&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">hexo cl &amp;&amp; hexo g  &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"hexo更换背景图片\"><a href=\"#hexo更换背景图片\" class=\"headerlink\" title=\"hexo更换背景图片\"></a>hexo更换背景图片</h2><p>背景图片参考网址：</p>\n<ul>\n<li><a href=\"https://wallhaven.cc/\">https://wallhaven.cc/</a></li>\n<li><a href=\"https://wall.alphacoders.com/\">https://wall.alphacoders.com/</a></li>\n<li><a href=\"https://bz.zzzmh.cn/index\">https://bz.zzzmh.cn/index</a></li>\n</ul>\n<p><em>本方法解决的是多次同步到GitHub上背景图片未成功的情况</em></p>\n<p>直接更改原文件</p>\n<p>图片所在目录：<code>hexo/themes/landscape/source/css/images/</code></p>\n<p>图片名称：<code>banner.jpg</code></p>\n<h2 id=\"⭐主题美化\"><a href=\"#⭐主题美化\" class=\"headerlink\" title=\"⭐主题美化\"></a>⭐主题美化</h2><p>芜湖，想做到和我主页一样的动态标题(网页崩溃欺骗)和透明页面吗</p>\n<p>Let’s get started!</p>\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/image-20231101154515640.png\" style=\"zoom:80%;\" />\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/image-20231101155107655.png\" alt=\"path\" style=\"zoom:80%;\" />\n\n<p>一定要放在博客根目录下的source下，没有就新建一个</p>\n<p>然后在\\themes\\butterfly\\中的_config.yml文件下查找injection，将自己新建的文件路径添加进去</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Inject</span></span><br><span class=\"line\"><span class=\"comment\"># Insert the code to head (before &#x27;&lt;/head&gt;&#x27; tag) and the bottom (before &#x27;&lt;/body&gt;&#x27; tag)</span></span><br><span class=\"line\"><span class=\"comment\"># 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前</span></span><br><span class=\"line\"><span class=\"attr\">inject:</span></span><br><span class=\"line\">  <span class=\"attr\">head:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&lt;link</span> <span class=\"string\">rel=&quot;stylesheet&quot;</span> <span class=\"string\">href=&quot;/css/transpancy.css&quot;&gt;</span></span><br><span class=\"line\">    <span class=\"comment\"># - &lt;link rel=&quot;stylesheet&quot; href=&quot;/xxx.css&quot;&gt;</span></span><br><span class=\"line\">  <span class=\"attr\">bottom:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&lt;script</span> <span class=\"string\">src=&quot;/js/cheat.js&quot;&gt;&lt;/script&gt;</span></span><br><span class=\"line\">    <span class=\"comment\"># - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/image-20231101154311035.png\" alt=\"image-20231101154311035\" style=\"zoom:80%;\" />\n\n<h3 id=\"动态标题\"><a href=\"#动态标题\" class=\"headerlink\" title=\"动态标题\"></a>动态标题</h3><p><code>cheat.js</code>的代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//动态标题</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">OriginTitile</span> = <span class=\"variable language_\">document</span>.<span class=\"property\">title</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> titleTime;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;visibilitychange&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">document</span>.<span class=\"property\">hidden</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//离开当前页面时标签显示内容</span></span><br><span class=\"line\">        <span class=\"variable language_\">document</span>.<span class=\"property\">title</span> = <span class=\"string\">&#x27;网页崩溃啦w(ﾟДﾟ)w ！&#x27;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">clearTimeout</span>(titleTime);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//返回当前页面时标签显示内容</span></span><br><span class=\"line\">        <span class=\"variable language_\">document</span>.<span class=\"property\">title</span> = <span class=\"string\">&#x27;♪(^∇^*)我又好啦！&#x27;</span> + <span class=\"title class_\">OriginTitile</span>;</span><br><span class=\"line\">        <span class=\"comment\">//两秒后变回正常标题</span></span><br><span class=\"line\">        titleTime = <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">document</span>.<span class=\"property\">title</span> = <span class=\"title class_\">OriginTitile</span>;</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"透明页面\"><a href=\"#透明页面\" class=\"headerlink\" title=\"透明页面\"></a>透明页面</h3><p><code>transpancy.css</code>的代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 文章页背景 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.layout_post</span>&gt;<span class=\"selector-id\">#post</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 以下代表透明度为0.7 可以自行修改*/</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>,.<span class=\"number\">7</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/* 所有页面背景 */</span></span><br><span class=\"line\"><span class=\"selector-id\">#aside_content</span> <span class=\"selector-class\">.card-widget</span>, <span class=\"selector-id\">#recent-posts</span>&gt;<span class=\"selector-class\">.recent-post-item</span>, <span class=\"selector-class\">.layout_page</span>&gt;<span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">:first</span>-child<span class=\"selector-pseudo\">:not</span>(<span class=\"selector-class\">.recent-posts</span>), <span class=\"selector-class\">.layout_post</span>&gt;<span class=\"selector-id\">#page</span>, <span class=\"selector-class\">.layout_post</span>&gt;<span class=\"selector-id\">#post</span>, <span class=\"selector-class\">.read-mode</span> <span class=\"selector-class\">.layout_post</span>&gt;<span class=\"selector-id\">#post</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 以下代表透明度为0.7 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>,.<span class=\"number\">7</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*侧边卡片的透明度 */</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">:root</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">--card-bg</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, .<span class=\"number\">7</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 页脚透明 */</span></span><br><span class=\"line\"><span class=\"selector-id\">#footer</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 以下代表透明度为0.5 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>, .<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>注意一件事：css要放在head；js要放在bottom。不能乱放！</code></p>\n<p>参考：<a href=\"https://conzxy.github.io/2022/08/19/hexo/transparent_bg/\">透明化</a>    <a href=\"https://blog.csdn.net/qq_44138925/article/details/128843200\">透明化</a>    <a href=\"https://blog.csdn.net/qq_43740362/article/details/113790851?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-113790851-blog-128843200.235%5Ev38%5Epc_relevant_sort_base1&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-113790851-blog-128843200.235%5Ev38%5Epc_relevant_sort_base1&utm_relevant_index=5\">渐变</a></p>\n<h1 id=\"第三部分-绑定自己的域名\"><a href=\"#第三部分-绑定自己的域名\" class=\"headerlink\" title=\"第三部分 绑定自己的域名\"></a>第三部分 绑定自己的域名</h1><p>博客地址：<a href=\"https://www.likecs.com/show-30474.html\">https://www.likecs.com/show-30474.html</a></p>\n<p><strong>绑定之后你就有有一个自己专属的博客了。</strong></p>\n<p>买一个域名，可以一块钱白嫖，但是续费贵的飞天！！！</p>\n<p><em><strong>注意请谨慎绑定，想我就会出现提交一次 (hexo d) ,需要重新绑定域名</strong></em></p>\n<h1 id=\"图床：\"><a href=\"#图床：\" class=\"headerlink\" title=\"图床：\"></a>图床：</h1><p>我试了两种：GitHub和七牛云</p>\n<p>我想说，如果你有自己的域名。可以选择七牛云，相比GitHub来说快很多</p>\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311350299.png\" alt=\"image-20231031135024267\" style=\"zoom: 67%;\" />\n\n\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311352581.png\" alt=\"image-20231031135228551\" style=\"zoom: 67%;\" />\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311353997.png\" alt=\"image-20231031135328962\" style=\"zoom: 67%;\" />\n\n\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311354876.png\" alt=\"image-20231031135414847\" style=\"zoom:67%;\" />\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311401584.png\" alt=\"image-20231031140102545\" style=\"zoom:67%;\" />\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311404397.png\" alt=\"image-20231031140446365\" style=\"zoom:67%;\" />\n\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311409077.png\" alt=\"image-20231031140957036\" style=\"zoom:67%;\" />\n\n<p>进行到这一步就成功喽</p>\n<p>下一步，去PicGo设置：</p>\n<img src=\"http://qiniu.hanvon.top/blog_article/Blog_building/202310311408731.png\" alt=\"image-20231031140821695\" style=\"zoom:67%;\" />\n\n\n\n<p><a href=\"https://www.cnblogs.com/skuld-yi/p/14533794.html\">https://www.cnblogs.com/skuld-yi/p/14533794.html</a></p>\n<p>—大部分转载至 武师叔</p>\n<p>关注公众号武师叔————————–回复博客————————-即可获得博客PDF文件</p>\n"},{"title":"Matlab","abbrlink":"f73596b","date":"2023-03-29T02:52:49.000Z","keywords":null,"description":"记录一些matlab简单操作","cover":"http://qiniu.hanvon.top/blog_cover/matlab_cover.png","password":null,"abstract":null,"message":null,"_content":"Matlab/Simulink快捷键\nSimulink快捷键\n模型调整\nAlt + Enter：为选定模块设置主要参数\nCtrl + Shift + I：打开或隐藏 Property Inspector\nShift + 拖动句柄：调整模块大小，保持相同的高宽比\nCtrl + 拖动句柄：从中心调整模块大小\nCtrl + R：顺时针旋转模块\nCtrl + Shift + R：逆时针旋转模块\nCtrl + I：翻转模块\nCtrl + F：查找模块\nCtrl + M：封装模块\nCtrl + U：在模块封装下查找\nCtrl + Shift + Y：注释模块\nCtrl + Shift + X：注释掉或取消注释模块\nCtrl + K：刷新Mode模块\nCtrl + L：对于链接模块，转到父模块的库\nCtrl + H：打开 Model Explorer\n\n仿真键盘快捷键\nCtrl + E：打开 Configuration Parameters对话框\nCtrl + D：更新图\nCtrl + T：开始仿真\nCtrl + Shift + T：停止仿真\nCtrl + B：构建模型（用于代码生成）\n\n调试和断点键盘快捷方式\nF10：步骤\nF11：步入\nShift + F11：步出\nF5：运行\nF12：设置/清除断点\nCtrl + J：查看simple time\n视图放大：r\n视图缩小：v\n————————————————\n版权声明：本文为CSDN博主「小曾&amp;同学」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/acknole/article/details/112344263","source":"_posts/matlab.md","raw":"---\ntitle: Matlab\nabbrlink: f73596b\ndate: 2023-3-29 10:52:49\ntags: matlab\nkeywords:\ndescription: 记录一些matlab简单操作\ncover: http://qiniu.hanvon.top/blog_cover/matlab_cover.png\npassword:\nabstract:\nmessage:\n---\nMatlab/Simulink快捷键\nSimulink快捷键\n模型调整\nAlt + Enter：为选定模块设置主要参数\nCtrl + Shift + I：打开或隐藏 Property Inspector\nShift + 拖动句柄：调整模块大小，保持相同的高宽比\nCtrl + 拖动句柄：从中心调整模块大小\nCtrl + R：顺时针旋转模块\nCtrl + Shift + R：逆时针旋转模块\nCtrl + I：翻转模块\nCtrl + F：查找模块\nCtrl + M：封装模块\nCtrl + U：在模块封装下查找\nCtrl + Shift + Y：注释模块\nCtrl + Shift + X：注释掉或取消注释模块\nCtrl + K：刷新Mode模块\nCtrl + L：对于链接模块，转到父模块的库\nCtrl + H：打开 Model Explorer\n\n仿真键盘快捷键\nCtrl + E：打开 Configuration Parameters对话框\nCtrl + D：更新图\nCtrl + T：开始仿真\nCtrl + Shift + T：停止仿真\nCtrl + B：构建模型（用于代码生成）\n\n调试和断点键盘快捷方式\nF10：步骤\nF11：步入\nShift + F11：步出\nF5：运行\nF12：设置/清除断点\nCtrl + J：查看simple time\n视图放大：r\n视图缩小：v\n————————————————\n版权声明：本文为CSDN博主「小曾&amp;同学」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/acknole/article/details/112344263","slug":"matlab","published":1,"updated":"2023-11-01T06:53:46.395Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clofj2tby000aoot38nvv0bft","content":"<p>Matlab&#x2F;Simulink快捷键<br>Simulink快捷键<br>模型调整<br>Alt + Enter：为选定模块设置主要参数<br>Ctrl + Shift + I：打开或隐藏 Property Inspector<br>Shift + 拖动句柄：调整模块大小，保持相同的高宽比<br>Ctrl + 拖动句柄：从中心调整模块大小<br>Ctrl + R：顺时针旋转模块<br>Ctrl + Shift + R：逆时针旋转模块<br>Ctrl + I：翻转模块<br>Ctrl + F：查找模块<br>Ctrl + M：封装模块<br>Ctrl + U：在模块封装下查找<br>Ctrl + Shift + Y：注释模块<br>Ctrl + Shift + X：注释掉或取消注释模块<br>Ctrl + K：刷新Mode模块<br>Ctrl + L：对于链接模块，转到父模块的库<br>Ctrl + H：打开 Model Explorer</p>\n<p>仿真键盘快捷键<br>Ctrl + E：打开 Configuration Parameters对话框<br>Ctrl + D：更新图<br>Ctrl + T：开始仿真<br>Ctrl + Shift + T：停止仿真<br>Ctrl + B：构建模型（用于代码生成）</p>\n<p>调试和断点键盘快捷方式<br>F10：步骤<br>F11：步入<br>Shift + F11：步出<br>F5：运行<br>F12：设置&#x2F;清除断点<br>Ctrl + J：查看simple time<br>视图放大：r<br>视图缩小：v<br>————————————————<br>版权声明：本文为CSDN博主「小曾&amp;同学」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href=\"https://blog.csdn.net/acknole/article/details/112344263\">https://blog.csdn.net/acknole/article/details/112344263</a></p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"安装文, 档快速开始","link":"https://butterfly.js.org/posts/21cfbf15/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"Butterfly主题 帮助文档"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<p>Matlab&#x2F;Simulink快捷键<br>Simulink快捷键<br>模型调整<br>Alt + Enter：为选定模块设置主要参数<br>Ctrl + Shift + I：打开或隐藏 Property Inspector<br>Shift + 拖动句柄：调整模块大小，保持相同的高宽比<br>Ctrl + 拖动句柄：从中心调整模块大小<br>Ctrl + R：顺时针旋转模块<br>Ctrl + Shift + R：逆时针旋转模块<br>Ctrl + I：翻转模块<br>Ctrl + F：查找模块<br>Ctrl + M：封装模块<br>Ctrl + U：在模块封装下查找<br>Ctrl + Shift + Y：注释模块<br>Ctrl + Shift + X：注释掉或取消注释模块<br>Ctrl + K：刷新Mode模块<br>Ctrl + L：对于链接模块，转到父模块的库<br>Ctrl + H：打开 Model Explorer</p>\n<p>仿真键盘快捷键<br>Ctrl + E：打开 Configuration Parameters对话框<br>Ctrl + D：更新图<br>Ctrl + T：开始仿真<br>Ctrl + Shift + T：停止仿真<br>Ctrl + B：构建模型（用于代码生成）</p>\n<p>调试和断点键盘快捷方式<br>F10：步骤<br>F11：步入<br>Shift + F11：步出<br>F5：运行<br>F12：设置&#x2F;清除断点<br>Ctrl + J：查看simple time<br>视图放大：r<br>视图缩小：v<br>————————————————<br>版权声明：本文为CSDN博主「小曾&amp;同学」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href=\"https://blog.csdn.net/acknole/article/details/112344263\">https://blog.csdn.net/acknole/article/details/112344263</a></p>\n"},{"title":"vi编辑器基本命令","abbrlink":59501,"date":"2022-08-28T09:36:09.000Z","tog_img":"https://i.postimg.cc/SQzNnMMy/sunrise.jpg","cover":"http://qiniu.hanvon.top/blog_cover/linux_cover.png","_content":"## vi模式切换\n\n![vi](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/vi.jpg)\n\n\n\n## vi保存和退出命令\n\n|  命令   |                             功能                             |\n| :-----: | :----------------------------------------------------------: |\n|   :q    | (Quit)退出未修改的文件（若文件被修改且未保存，则该命令无效） |\n|   :q!   |                强制退出，且不保存修改过的部分                |\n|   :w    |                  (Write)保存文件，但不退出                   |\n|   :x    |              (Exit)保存文件并退出（:x <=> :wq）              |\n| :w File |                另存为File给出的文件名，不退出                |\n| :r File |          （Read)读入File指定的文件内容插入到光标处           |\n\n\n\n## vi命令、编辑模式切换\n\n|        命令        |                             功能                             |\n| :----------------: | :----------------------------------------------------------: |\n| i I<br />（Insert) | i 命令将文本插入到光标所在位置前。<br />I 命令将文本插入当前行的行首。当输入 I 命令后，光标自动移到该行的行首。 |\n| a A <br />(Append) | a 命令将新文本追加到光标当前所在位置之后<br />A 命令将新文本追加到所在行的行尾。当输入 A 命令后，光标自动移到该行的行尾。 |\n|  o O<br />(Open)   | o 命令将在光标所在行的下面插入一个空行，并将光标置于该行的行首。<br />O 命令在光标所在行的上面插入一个空行，并将光标置于该行的行首。 |\n|     :！Command     | 在vi中执行外部命令Command，按回车键可以返回vi继续工作<br />例如，在vi命令行模式下输入:! pwd可以查看当前所在目录又或者:! date 查看时间 |\n\n当 vi 处于文本编辑状态，屏幕最下行显示 “--INSERT--”说明信息\n\n\n\n## vi拷贝 粘贴\n\n|          命令          |                             功能                             |\n| :--------------------: | :----------------------------------------------------------: |\n| [N] x<br />(Expurgate) |     删除从光标位置开始的连续N行字符(并复制到编辑缓冲区)      |\n|  [N] dd<br />(Delete)  | 该命令删除光标所在的整行。在 dd 前可加上一个数字 N，表示删除当前行及其后 N-1 行的内容。 |\n|   [N] yy<br />(Yank)   | 复制光标所在的整行。在 yy 前可加一个数字 N，表示复制当前行及其后 N-1 行的内容。 |\n|   p 或 P<br />(Put)    |               从编辑缓冲区复制文本到当前光标处               |\n|     u<br />(Undo)      | 该命令撤销上一次所做的操作。多次使用 u 命令会一步一步依次撤销之前做过的操作（在一次切换到文本输入模式中输入的所有文本算一次操作）。 |\n\n\n\n## vi光标命令\n\n|    命令     |                       功能                       |\n| :---------: | :----------------------------------------------: |\n|      h      | 方向键，向左移动光标一个字符的位置，相当于键 “←” |\n|      j      | 方向键，向下移动光标到下一行的位置，相当于键 “↓” |\n|      k      | 方向键，向上移动光标到上一行的位置，相当于键 “↑” |\n|      l      | 方向键，向右移动光标一个字符的位置，相当于键 “→” |\n|     :N      |             移动光标到第N行 (N待定)              |\n|     1G      |             移动光标到文件的第 1 行              |\n|      G      |            移动光标到文件的最后 1 行             |\n| :set number |                   设置行号显示                   |\n|     set     |                   取消行号显示                   |","source":"_posts/vi编辑器基本命令.md","raw":"---\ntitle: vi编辑器基本命令\nabbrlink: 59501\ndate: 2022-08-28 17:36:09\ntags: \ntog_img: \"https://i.postimg.cc/SQzNnMMy/sunrise.jpg\"\ncover: \"http://qiniu.hanvon.top/blog_cover/linux_cover.png\"\n---\n## vi模式切换\n\n![vi](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/vi.jpg)\n\n\n\n## vi保存和退出命令\n\n|  命令   |                             功能                             |\n| :-----: | :----------------------------------------------------------: |\n|   :q    | (Quit)退出未修改的文件（若文件被修改且未保存，则该命令无效） |\n|   :q!   |                强制退出，且不保存修改过的部分                |\n|   :w    |                  (Write)保存文件，但不退出                   |\n|   :x    |              (Exit)保存文件并退出（:x <=> :wq）              |\n| :w File |                另存为File给出的文件名，不退出                |\n| :r File |          （Read)读入File指定的文件内容插入到光标处           |\n\n\n\n## vi命令、编辑模式切换\n\n|        命令        |                             功能                             |\n| :----------------: | :----------------------------------------------------------: |\n| i I<br />（Insert) | i 命令将文本插入到光标所在位置前。<br />I 命令将文本插入当前行的行首。当输入 I 命令后，光标自动移到该行的行首。 |\n| a A <br />(Append) | a 命令将新文本追加到光标当前所在位置之后<br />A 命令将新文本追加到所在行的行尾。当输入 A 命令后，光标自动移到该行的行尾。 |\n|  o O<br />(Open)   | o 命令将在光标所在行的下面插入一个空行，并将光标置于该行的行首。<br />O 命令在光标所在行的上面插入一个空行，并将光标置于该行的行首。 |\n|     :！Command     | 在vi中执行外部命令Command，按回车键可以返回vi继续工作<br />例如，在vi命令行模式下输入:! pwd可以查看当前所在目录又或者:! date 查看时间 |\n\n当 vi 处于文本编辑状态，屏幕最下行显示 “--INSERT--”说明信息\n\n\n\n## vi拷贝 粘贴\n\n|          命令          |                             功能                             |\n| :--------------------: | :----------------------------------------------------------: |\n| [N] x<br />(Expurgate) |     删除从光标位置开始的连续N行字符(并复制到编辑缓冲区)      |\n|  [N] dd<br />(Delete)  | 该命令删除光标所在的整行。在 dd 前可加上一个数字 N，表示删除当前行及其后 N-1 行的内容。 |\n|   [N] yy<br />(Yank)   | 复制光标所在的整行。在 yy 前可加一个数字 N，表示复制当前行及其后 N-1 行的内容。 |\n|   p 或 P<br />(Put)    |               从编辑缓冲区复制文本到当前光标处               |\n|     u<br />(Undo)      | 该命令撤销上一次所做的操作。多次使用 u 命令会一步一步依次撤销之前做过的操作（在一次切换到文本输入模式中输入的所有文本算一次操作）。 |\n\n\n\n## vi光标命令\n\n|    命令     |                       功能                       |\n| :---------: | :----------------------------------------------: |\n|      h      | 方向键，向左移动光标一个字符的位置，相当于键 “←” |\n|      j      | 方向键，向下移动光标到下一行的位置，相当于键 “↓” |\n|      k      | 方向键，向上移动光标到上一行的位置，相当于键 “↑” |\n|      l      | 方向键，向右移动光标一个字符的位置，相当于键 “→” |\n|     :N      |             移动光标到第N行 (N待定)              |\n|     1G      |             移动光标到文件的第 1 行              |\n|      G      |            移动光标到文件的最后 1 行             |\n| :set number |                   设置行号显示                   |\n|     set     |                   取消行号显示                   |","slug":"vi编辑器基本命令","published":1,"updated":"2023-11-01T06:41:16.707Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clofj2tbz000eoot3bf1k6741","content":"<h2 id=\"vi模式切换\"><a href=\"#vi模式切换\" class=\"headerlink\" title=\"vi模式切换\"></a>vi模式切换</h2><p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/vi.jpg\" alt=\"vi\"></p>\n<h2 id=\"vi保存和退出命令\"><a href=\"#vi保存和退出命令\" class=\"headerlink\" title=\"vi保存和退出命令\"></a>vi保存和退出命令</h2><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">:q</td>\n<td align=\"center\">(Quit)退出未修改的文件（若文件被修改且未保存，则该命令无效）</td>\n</tr>\n<tr>\n<td align=\"center\">:q!</td>\n<td align=\"center\">强制退出，且不保存修改过的部分</td>\n</tr>\n<tr>\n<td align=\"center\">:w</td>\n<td align=\"center\">(Write)保存文件，但不退出</td>\n</tr>\n<tr>\n<td align=\"center\">:x</td>\n<td align=\"center\">(Exit)保存文件并退出（:x &lt;&#x3D;&gt; :wq）</td>\n</tr>\n<tr>\n<td align=\"center\">:w File</td>\n<td align=\"center\">另存为File给出的文件名，不退出</td>\n</tr>\n<tr>\n<td align=\"center\">:r File</td>\n<td align=\"center\">（Read)读入File指定的文件内容插入到光标处</td>\n</tr>\n</tbody></table>\n<h2 id=\"vi命令、编辑模式切换\"><a href=\"#vi命令、编辑模式切换\" class=\"headerlink\" title=\"vi命令、编辑模式切换\"></a>vi命令、编辑模式切换</h2><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">i I<br />（Insert)</td>\n<td align=\"center\">i 命令将文本插入到光标所在位置前。<br />I 命令将文本插入当前行的行首。当输入 I 命令后，光标自动移到该行的行首。</td>\n</tr>\n<tr>\n<td align=\"center\">a A <br />(Append)</td>\n<td align=\"center\">a 命令将新文本追加到光标当前所在位置之后<br />A 命令将新文本追加到所在行的行尾。当输入 A 命令后，光标自动移到该行的行尾。</td>\n</tr>\n<tr>\n<td align=\"center\">o O<br />(Open)</td>\n<td align=\"center\">o 命令将在光标所在行的下面插入一个空行，并将光标置于该行的行首。<br />O 命令在光标所在行的上面插入一个空行，并将光标置于该行的行首。</td>\n</tr>\n<tr>\n<td align=\"center\">:！Command</td>\n<td align=\"center\">在vi中执行外部命令Command，按回车键可以返回vi继续工作<br />例如，在vi命令行模式下输入:! pwd可以查看当前所在目录又或者:! date 查看时间</td>\n</tr>\n</tbody></table>\n<p>当 vi 处于文本编辑状态，屏幕最下行显示 “–INSERT–”说明信息</p>\n<h2 id=\"vi拷贝-粘贴\"><a href=\"#vi拷贝-粘贴\" class=\"headerlink\" title=\"vi拷贝 粘贴\"></a>vi拷贝 粘贴</h2><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">[N] x<br />(Expurgate)</td>\n<td align=\"center\">删除从光标位置开始的连续N行字符(并复制到编辑缓冲区)</td>\n</tr>\n<tr>\n<td align=\"center\">[N] dd<br />(Delete)</td>\n<td align=\"center\">该命令删除光标所在的整行。在 dd 前可加上一个数字 N，表示删除当前行及其后 N-1 行的内容。</td>\n</tr>\n<tr>\n<td align=\"center\">[N] yy<br />(Yank)</td>\n<td align=\"center\">复制光标所在的整行。在 yy 前可加一个数字 N，表示复制当前行及其后 N-1 行的内容。</td>\n</tr>\n<tr>\n<td align=\"center\">p 或 P<br />(Put)</td>\n<td align=\"center\">从编辑缓冲区复制文本到当前光标处</td>\n</tr>\n<tr>\n<td align=\"center\">u<br />(Undo)</td>\n<td align=\"center\">该命令撤销上一次所做的操作。多次使用 u 命令会一步一步依次撤销之前做过的操作（在一次切换到文本输入模式中输入的所有文本算一次操作）。</td>\n</tr>\n</tbody></table>\n<h2 id=\"vi光标命令\"><a href=\"#vi光标命令\" class=\"headerlink\" title=\"vi光标命令\"></a>vi光标命令</h2><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">h</td>\n<td align=\"center\">方向键，向左移动光标一个字符的位置，相当于键 “←”</td>\n</tr>\n<tr>\n<td align=\"center\">j</td>\n<td align=\"center\">方向键，向下移动光标到下一行的位置，相当于键 “↓”</td>\n</tr>\n<tr>\n<td align=\"center\">k</td>\n<td align=\"center\">方向键，向上移动光标到上一行的位置，相当于键 “↑”</td>\n</tr>\n<tr>\n<td align=\"center\">l</td>\n<td align=\"center\">方向键，向右移动光标一个字符的位置，相当于键 “→”</td>\n</tr>\n<tr>\n<td align=\"center\">:N</td>\n<td align=\"center\">移动光标到第N行 (N待定)</td>\n</tr>\n<tr>\n<td align=\"center\">1G</td>\n<td align=\"center\">移动光标到文件的第 1 行</td>\n</tr>\n<tr>\n<td align=\"center\">G</td>\n<td align=\"center\">移动光标到文件的最后 1 行</td>\n</tr>\n<tr>\n<td align=\"center\">:set number</td>\n<td align=\"center\">设置行号显示</td>\n</tr>\n<tr>\n<td align=\"center\">set</td>\n<td align=\"center\">取消行号显示</td>\n</tr>\n</tbody></table>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"安装文, 档快速开始","link":"https://butterfly.js.org/posts/21cfbf15/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"Butterfly主题 帮助文档"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h2 id=\"vi模式切换\"><a href=\"#vi模式切换\" class=\"headerlink\" title=\"vi模式切换\"></a>vi模式切换</h2><p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/vi.jpg\" alt=\"vi\"></p>\n<h2 id=\"vi保存和退出命令\"><a href=\"#vi保存和退出命令\" class=\"headerlink\" title=\"vi保存和退出命令\"></a>vi保存和退出命令</h2><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">:q</td>\n<td align=\"center\">(Quit)退出未修改的文件（若文件被修改且未保存，则该命令无效）</td>\n</tr>\n<tr>\n<td align=\"center\">:q!</td>\n<td align=\"center\">强制退出，且不保存修改过的部分</td>\n</tr>\n<tr>\n<td align=\"center\">:w</td>\n<td align=\"center\">(Write)保存文件，但不退出</td>\n</tr>\n<tr>\n<td align=\"center\">:x</td>\n<td align=\"center\">(Exit)保存文件并退出（:x &lt;&#x3D;&gt; :wq）</td>\n</tr>\n<tr>\n<td align=\"center\">:w File</td>\n<td align=\"center\">另存为File给出的文件名，不退出</td>\n</tr>\n<tr>\n<td align=\"center\">:r File</td>\n<td align=\"center\">（Read)读入File指定的文件内容插入到光标处</td>\n</tr>\n</tbody></table>\n<h2 id=\"vi命令、编辑模式切换\"><a href=\"#vi命令、编辑模式切换\" class=\"headerlink\" title=\"vi命令、编辑模式切换\"></a>vi命令、编辑模式切换</h2><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">i I<br />（Insert)</td>\n<td align=\"center\">i 命令将文本插入到光标所在位置前。<br />I 命令将文本插入当前行的行首。当输入 I 命令后，光标自动移到该行的行首。</td>\n</tr>\n<tr>\n<td align=\"center\">a A <br />(Append)</td>\n<td align=\"center\">a 命令将新文本追加到光标当前所在位置之后<br />A 命令将新文本追加到所在行的行尾。当输入 A 命令后，光标自动移到该行的行尾。</td>\n</tr>\n<tr>\n<td align=\"center\">o O<br />(Open)</td>\n<td align=\"center\">o 命令将在光标所在行的下面插入一个空行，并将光标置于该行的行首。<br />O 命令在光标所在行的上面插入一个空行，并将光标置于该行的行首。</td>\n</tr>\n<tr>\n<td align=\"center\">:！Command</td>\n<td align=\"center\">在vi中执行外部命令Command，按回车键可以返回vi继续工作<br />例如，在vi命令行模式下输入:! pwd可以查看当前所在目录又或者:! date 查看时间</td>\n</tr>\n</tbody></table>\n<p>当 vi 处于文本编辑状态，屏幕最下行显示 “–INSERT–”说明信息</p>\n<h2 id=\"vi拷贝-粘贴\"><a href=\"#vi拷贝-粘贴\" class=\"headerlink\" title=\"vi拷贝 粘贴\"></a>vi拷贝 粘贴</h2><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">[N] x<br />(Expurgate)</td>\n<td align=\"center\">删除从光标位置开始的连续N行字符(并复制到编辑缓冲区)</td>\n</tr>\n<tr>\n<td align=\"center\">[N] dd<br />(Delete)</td>\n<td align=\"center\">该命令删除光标所在的整行。在 dd 前可加上一个数字 N，表示删除当前行及其后 N-1 行的内容。</td>\n</tr>\n<tr>\n<td align=\"center\">[N] yy<br />(Yank)</td>\n<td align=\"center\">复制光标所在的整行。在 yy 前可加一个数字 N，表示复制当前行及其后 N-1 行的内容。</td>\n</tr>\n<tr>\n<td align=\"center\">p 或 P<br />(Put)</td>\n<td align=\"center\">从编辑缓冲区复制文本到当前光标处</td>\n</tr>\n<tr>\n<td align=\"center\">u<br />(Undo)</td>\n<td align=\"center\">该命令撤销上一次所做的操作。多次使用 u 命令会一步一步依次撤销之前做过的操作（在一次切换到文本输入模式中输入的所有文本算一次操作）。</td>\n</tr>\n</tbody></table>\n<h2 id=\"vi光标命令\"><a href=\"#vi光标命令\" class=\"headerlink\" title=\"vi光标命令\"></a>vi光标命令</h2><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">h</td>\n<td align=\"center\">方向键，向左移动光标一个字符的位置，相当于键 “←”</td>\n</tr>\n<tr>\n<td align=\"center\">j</td>\n<td align=\"center\">方向键，向下移动光标到下一行的位置，相当于键 “↓”</td>\n</tr>\n<tr>\n<td align=\"center\">k</td>\n<td align=\"center\">方向键，向上移动光标到上一行的位置，相当于键 “↑”</td>\n</tr>\n<tr>\n<td align=\"center\">l</td>\n<td align=\"center\">方向键，向右移动光标一个字符的位置，相当于键 “→”</td>\n</tr>\n<tr>\n<td align=\"center\">:N</td>\n<td align=\"center\">移动光标到第N行 (N待定)</td>\n</tr>\n<tr>\n<td align=\"center\">1G</td>\n<td align=\"center\">移动光标到文件的第 1 行</td>\n</tr>\n<tr>\n<td align=\"center\">G</td>\n<td align=\"center\">移动光标到文件的最后 1 行</td>\n</tr>\n<tr>\n<td align=\"center\">:set number</td>\n<td align=\"center\">设置行号显示</td>\n</tr>\n<tr>\n<td align=\"center\">set</td>\n<td align=\"center\">取消行号显示</td>\n</tr>\n</tbody></table>\n"},{"title":"学物联网之ESP8266NodeMCU（一）","abbrlink":"a01e6d85","date":"2022-08-31T01:53:31.000Z","keywords":"初识NodeMCU开发板","password":null,"abstract":null,"message":null,"cover":"http://qiniu.hanvon.top/blog_cover/imagesnodemcu_pinLocation_cover.png","_content":"\n# 初识NodeMCU开发板\n\n市面上销售的配有ESP8266芯片的开发板有很多种。比较流行的有SparkFun ESP8266 Thing、Adafruit Feather HUZZAH with ESP8266、NodeMCU等。这里选择跟太极创客团队学NodeMCU。\n\n![ESP8266-NodeMCU开发板](https://raw.githubusercontent.com/wild-civil/typora_img/main/imagesnodemcu_pinLocation.jpg)\n\n## 数字输入输出引脚（GPIO）\n\n如下图所示，ESP8266芯片四周分布很多引脚。这些引脚大部分可用作输入输出使用。这些用作输入输出的引脚统称为GPIO。\n\n当引脚以数字输出模式工作时，低电平是<font color=red size=4>0V</font>> (灌电流)，高电平是<font color=red size=4>3.3V</font> (拉电流)。\n\n<font face=\"黑体\" color=green size=4>请注意:ESP8266芯片与Arduino Uno/Mega/Nano等开发板的引脚电平电压有所区别。Arduino开发板的高电平是+5V，低电平是0V。</font>\n\n### GPIO编号与NodeMCU开发板引脚名的区别\n\n请留意：在很多介绍ESP8266以及NodeMCU的资料里会出现两种引脚命名方法。一种是GPIO编号，一种是NodeMCU引脚名。请注意这两者是不同的，请千万不要混淆。\n\n![nodemcu-pin-number](https://raw.githubusercontent.com/wild-civil/typora_img/main/imagesnodemcu-pin-number.jpg)\n\n简而言之，只要您看到GPIO这几个字母，就说明是芯片引脚，而没有GPIO这几个字母，那肯定是指开发板引脚。\n\n### ESP8266 GPIO编号与NodeMCU开发板引脚名的对应关系\n\n![nodemcu-pin-GPIO_001](https://raw.githubusercontent.com/wild-civil/typora_img/main/imagesnodemcu-pin-GPIO_001.png)\n\n\n\n![esp8266_devkit_horizontal-002](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266_devkit_horizontal-002.png)\n\n在以上图片中深蓝底白色字的标识就是GPIO引脚编号。如![NodeMCU-GPIO4](http://www.taichi-maker.com/wp-content/uploads/2019/02/GPIO4.png) \n\n而开发板上所印刷的D2,D3等等就是NodeMCU开发板引脚名称。\n\n```c\ndigitalWrite(4, High);\n```\n\n以上语句通过digitalWrite函数将引脚4设置为高电平。这里的数字4就是指GPIO4。也可以说这个语句是将NodeMCU开发板的D2引脚设置为高电平,即：\n\n```c\ndigitalWrite(D2, High);    //因为D2对应的是GPIO4。\n```\n\n## 可用引脚\n\nESP8266芯片有17个GPIO引脚（GPIO0～GPIO16）。这些引脚中的GPIO6～GPIO 11被用于连接开发板的闪存（Flash Memory）。如果在实验电路中使用GPIO6～GPIO11，NodeMCU开发板将无法正常工作。因此建议您<font color=red size=4>不要使用GPIO6～GPIO 11。</font>\n\n![*ESP8266的GPIO6-GPIO11用于连接闪存，因此不建议使用这些引脚。*](https://raw.githubusercontent.com/wild-civil/typora_img/main/imagesesp8266_devkit_horizontal-flash-pins.png)\n\n### 电压电流限制\n\nNodeMCU开发板引脚的<font color=orange>输入输出电压限制是3.3 V</font>。如果向引脚施加3.6V以上的电压就有可能对芯片电路造成损坏。同时请注意，这些引脚的<font color=orange>最大输出电流是12mA。</font>\n\n由于NodeMCU开发板的引脚允许电压和电流都是低于Arduino开发板的引脚，将NodeMCU与Arduino引脚相互连接时一定要特别注意这两个开发板的引脚电压和电流的区别。操作不当极有可能可能会损坏NodeMCU开发板。\n\n### 特殊引脚情况说明\n\n**GPIO2引脚** 在NodeMCU开发板启动时是不能连接低电平的。\n\n**GPIO15引脚**在开发板运行中一直保持低电平状态。因此请不要使用GPIO15引脚来读取开关状态或进行I²C通讯。\n\n**GPIO0引脚**在开发板运行中需要一直保持高电平状态。否则ESP8266将进入程序上传工作模式也就无法正常工作了。您无需对GPIO0引脚进行额外操作，因为NodeMCU的内置电路可以确保GPIO0引脚在工作时连接高电平而在上传程序时连接低电平。\n\n### 上拉电阻/下拉电阻\n\n**GPIO 0-15引脚**都配有内置上拉电阻。这一点与Arduino十分类似。**GPIO16 引脚**配有内置下拉电阻。\n\n### 模拟输入\n\nESP8266 只有一个模拟输入引脚（该引脚通过模拟-数字转换将引脚上的模拟电压数值转化为数字量）。<font color=red>此引脚可读取的模拟电压值为 0 – 1.0V。</font>请注意：ESP8266 芯片模拟输入引脚连接在1.0V以上电压可能损坏ESP8266芯片。\n\n以上所描述的是针对ESP8266芯片的引脚。而对于NodeMCU开发板引脚，情况就不同了。\n\nNodeMCU开发板配有降压电路。您可以用NodeMCU开发板的模拟输入引脚读取0-3.3V的模拟电压信号。\n\n### 通讯\n\n#### **串行端口**\n\nESP8266有2个硬件串行端口（UART）。\n\n串行端口0（UART0）使用GPIO1和GPIO3引脚。其中GPIO1引脚是TX0，GPIO3是RX0。\n\n串行端口1（UART1）使用GPIO2和GPIO8引脚。其中GPIO2引脚是TX1，GPIO8是RX1。请注意，由于GPIO8被用于连接闪存芯片，串行端口1只能使用GPIO2来向外发送串行数据。\n\n#### **I²C**\n\nESP8266只有软件模拟的I²C端口，没有硬件I²C端口。也就是说我们可以使用任意的两个GPIO引脚通过软件模拟来实现I²C通讯。ESP8266的数据表（datasheet）中，GPIO2标注为SDA，GPIO14标注为SCL。\n\n#### **SPI**\n\nESP8266的SPI端口情况如下：\n\nGPIO14 — CLK\nGPIO12 — MISO\nGPIO13 — MOSI\nGPIO 15 — CS(SS)\n\n### **ESP8266引脚功能一览**\n\n| GPIO   | 功能             | 状态 | 限制                                               |\n| :----- | :--------------- | :--- | :------------------------------------------------- |\n| 0      | 引导模式选择     | 3.3V | 无Hi-Z                                             |\n| 1      | TX0              | –    | 串口通讯过程中不能使用                             |\n| 2      | 引导模式选择 TX1 | 3.3V | 启动时不能接地 启动时发送调试信息                  |\n| 3      | RX0              | –    | 串口通讯过程中不能使用                             |\n| 4      | SDA (I²C)        | –    | –                                                  |\n| 5      | SCL (I²C)        | –    | –                                                  |\n| 6 – 11 | 连接闪存         | x    | 不可用                                             |\n| 12     | MISO (SPI)       | –    | –                                                  |\n| 13     | MOSI (SPI)       | –    | –                                                  |\n| 14     | SCK (SPI)        | –    | –                                                  |\n| 15     | SS (SPI)         | 0V   | 上拉电阻不可用                                     |\n| 16     | 睡眠唤醒         | –    | 无上拉电阻，仅有下拉电阻 连接 RST 引脚实现睡眠唤醒 |\n","source":"_posts/学物联网-NodeMCU-一.md","raw":"---\ntitle: 学物联网之ESP8266NodeMCU（一）\nabbrlink: a01e6d85\ndate: 2022-08-31 09:53:31\ntags: \n  - esp8266\n  - 物联网\nkeywords: 初识NodeMCU开发板\npassword:\nabstract:\nmessage:\ncover: http://qiniu.hanvon.top/blog_cover/imagesnodemcu_pinLocation_cover.png\n---\n\n# 初识NodeMCU开发板\n\n市面上销售的配有ESP8266芯片的开发板有很多种。比较流行的有SparkFun ESP8266 Thing、Adafruit Feather HUZZAH with ESP8266、NodeMCU等。这里选择跟太极创客团队学NodeMCU。\n\n![ESP8266-NodeMCU开发板](https://raw.githubusercontent.com/wild-civil/typora_img/main/imagesnodemcu_pinLocation.jpg)\n\n## 数字输入输出引脚（GPIO）\n\n如下图所示，ESP8266芯片四周分布很多引脚。这些引脚大部分可用作输入输出使用。这些用作输入输出的引脚统称为GPIO。\n\n当引脚以数字输出模式工作时，低电平是<font color=red size=4>0V</font>> (灌电流)，高电平是<font color=red size=4>3.3V</font> (拉电流)。\n\n<font face=\"黑体\" color=green size=4>请注意:ESP8266芯片与Arduino Uno/Mega/Nano等开发板的引脚电平电压有所区别。Arduino开发板的高电平是+5V，低电平是0V。</font>\n\n### GPIO编号与NodeMCU开发板引脚名的区别\n\n请留意：在很多介绍ESP8266以及NodeMCU的资料里会出现两种引脚命名方法。一种是GPIO编号，一种是NodeMCU引脚名。请注意这两者是不同的，请千万不要混淆。\n\n![nodemcu-pin-number](https://raw.githubusercontent.com/wild-civil/typora_img/main/imagesnodemcu-pin-number.jpg)\n\n简而言之，只要您看到GPIO这几个字母，就说明是芯片引脚，而没有GPIO这几个字母，那肯定是指开发板引脚。\n\n### ESP8266 GPIO编号与NodeMCU开发板引脚名的对应关系\n\n![nodemcu-pin-GPIO_001](https://raw.githubusercontent.com/wild-civil/typora_img/main/imagesnodemcu-pin-GPIO_001.png)\n\n\n\n![esp8266_devkit_horizontal-002](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266_devkit_horizontal-002.png)\n\n在以上图片中深蓝底白色字的标识就是GPIO引脚编号。如![NodeMCU-GPIO4](http://www.taichi-maker.com/wp-content/uploads/2019/02/GPIO4.png) \n\n而开发板上所印刷的D2,D3等等就是NodeMCU开发板引脚名称。\n\n```c\ndigitalWrite(4, High);\n```\n\n以上语句通过digitalWrite函数将引脚4设置为高电平。这里的数字4就是指GPIO4。也可以说这个语句是将NodeMCU开发板的D2引脚设置为高电平,即：\n\n```c\ndigitalWrite(D2, High);    //因为D2对应的是GPIO4。\n```\n\n## 可用引脚\n\nESP8266芯片有17个GPIO引脚（GPIO0～GPIO16）。这些引脚中的GPIO6～GPIO 11被用于连接开发板的闪存（Flash Memory）。如果在实验电路中使用GPIO6～GPIO11，NodeMCU开发板将无法正常工作。因此建议您<font color=red size=4>不要使用GPIO6～GPIO 11。</font>\n\n![*ESP8266的GPIO6-GPIO11用于连接闪存，因此不建议使用这些引脚。*](https://raw.githubusercontent.com/wild-civil/typora_img/main/imagesesp8266_devkit_horizontal-flash-pins.png)\n\n### 电压电流限制\n\nNodeMCU开发板引脚的<font color=orange>输入输出电压限制是3.3 V</font>。如果向引脚施加3.6V以上的电压就有可能对芯片电路造成损坏。同时请注意，这些引脚的<font color=orange>最大输出电流是12mA。</font>\n\n由于NodeMCU开发板的引脚允许电压和电流都是低于Arduino开发板的引脚，将NodeMCU与Arduino引脚相互连接时一定要特别注意这两个开发板的引脚电压和电流的区别。操作不当极有可能可能会损坏NodeMCU开发板。\n\n### 特殊引脚情况说明\n\n**GPIO2引脚** 在NodeMCU开发板启动时是不能连接低电平的。\n\n**GPIO15引脚**在开发板运行中一直保持低电平状态。因此请不要使用GPIO15引脚来读取开关状态或进行I²C通讯。\n\n**GPIO0引脚**在开发板运行中需要一直保持高电平状态。否则ESP8266将进入程序上传工作模式也就无法正常工作了。您无需对GPIO0引脚进行额外操作，因为NodeMCU的内置电路可以确保GPIO0引脚在工作时连接高电平而在上传程序时连接低电平。\n\n### 上拉电阻/下拉电阻\n\n**GPIO 0-15引脚**都配有内置上拉电阻。这一点与Arduino十分类似。**GPIO16 引脚**配有内置下拉电阻。\n\n### 模拟输入\n\nESP8266 只有一个模拟输入引脚（该引脚通过模拟-数字转换将引脚上的模拟电压数值转化为数字量）。<font color=red>此引脚可读取的模拟电压值为 0 – 1.0V。</font>请注意：ESP8266 芯片模拟输入引脚连接在1.0V以上电压可能损坏ESP8266芯片。\n\n以上所描述的是针对ESP8266芯片的引脚。而对于NodeMCU开发板引脚，情况就不同了。\n\nNodeMCU开发板配有降压电路。您可以用NodeMCU开发板的模拟输入引脚读取0-3.3V的模拟电压信号。\n\n### 通讯\n\n#### **串行端口**\n\nESP8266有2个硬件串行端口（UART）。\n\n串行端口0（UART0）使用GPIO1和GPIO3引脚。其中GPIO1引脚是TX0，GPIO3是RX0。\n\n串行端口1（UART1）使用GPIO2和GPIO8引脚。其中GPIO2引脚是TX1，GPIO8是RX1。请注意，由于GPIO8被用于连接闪存芯片，串行端口1只能使用GPIO2来向外发送串行数据。\n\n#### **I²C**\n\nESP8266只有软件模拟的I²C端口，没有硬件I²C端口。也就是说我们可以使用任意的两个GPIO引脚通过软件模拟来实现I²C通讯。ESP8266的数据表（datasheet）中，GPIO2标注为SDA，GPIO14标注为SCL。\n\n#### **SPI**\n\nESP8266的SPI端口情况如下：\n\nGPIO14 — CLK\nGPIO12 — MISO\nGPIO13 — MOSI\nGPIO 15 — CS(SS)\n\n### **ESP8266引脚功能一览**\n\n| GPIO   | 功能             | 状态 | 限制                                               |\n| :----- | :--------------- | :--- | :------------------------------------------------- |\n| 0      | 引导模式选择     | 3.3V | 无Hi-Z                                             |\n| 1      | TX0              | –    | 串口通讯过程中不能使用                             |\n| 2      | 引导模式选择 TX1 | 3.3V | 启动时不能接地 启动时发送调试信息                  |\n| 3      | RX0              | –    | 串口通讯过程中不能使用                             |\n| 4      | SDA (I²C)        | –    | –                                                  |\n| 5      | SCL (I²C)        | –    | –                                                  |\n| 6 – 11 | 连接闪存         | x    | 不可用                                             |\n| 12     | MISO (SPI)       | –    | –                                                  |\n| 13     | MOSI (SPI)       | –    | –                                                  |\n| 14     | SCK (SPI)        | –    | –                                                  |\n| 15     | SS (SPI)         | 0V   | 上拉电阻不可用                                     |\n| 16     | 睡眠唤醒         | –    | 无上拉电阻，仅有下拉电阻 连接 RST 引脚实现睡眠唤醒 |\n","slug":"学物联网-NodeMCU-一","published":1,"updated":"2023-11-01T03:45:08.937Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clofj2tbz000goot3ccij7v51","content":"<h1 id=\"初识NodeMCU开发板\"><a href=\"#初识NodeMCU开发板\" class=\"headerlink\" title=\"初识NodeMCU开发板\"></a>初识NodeMCU开发板</h1><p>市面上销售的配有ESP8266芯片的开发板有很多种。比较流行的有SparkFun ESP8266 Thing、Adafruit Feather HUZZAH with ESP8266、NodeMCU等。这里选择跟太极创客团队学NodeMCU。</p>\n<p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/imagesnodemcu_pinLocation.jpg\" alt=\"ESP8266-NodeMCU开发板\"></p>\n<h2 id=\"数字输入输出引脚（GPIO）\"><a href=\"#数字输入输出引脚（GPIO）\" class=\"headerlink\" title=\"数字输入输出引脚（GPIO）\"></a>数字输入输出引脚（GPIO）</h2><p>如下图所示，ESP8266芯片四周分布很多引脚。这些引脚大部分可用作输入输出使用。这些用作输入输出的引脚统称为GPIO。</p>\n<p>当引脚以数字输出模式工作时，低电平是<font color=red size=4>0V</font>&gt; (灌电流)，高电平是<font color=red size=4>3.3V</font> (拉电流)。</p>\n<p><font face=\"黑体\" color=green size=4>请注意:ESP8266芯片与Arduino Uno&#x2F;Mega&#x2F;Nano等开发板的引脚电平电压有所区别。Arduino开发板的高电平是+5V，低电平是0V。</font></p>\n<h3 id=\"GPIO编号与NodeMCU开发板引脚名的区别\"><a href=\"#GPIO编号与NodeMCU开发板引脚名的区别\" class=\"headerlink\" title=\"GPIO编号与NodeMCU开发板引脚名的区别\"></a>GPIO编号与NodeMCU开发板引脚名的区别</h3><p>请留意：在很多介绍ESP8266以及NodeMCU的资料里会出现两种引脚命名方法。一种是GPIO编号，一种是NodeMCU引脚名。请注意这两者是不同的，请千万不要混淆。</p>\n<p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/imagesnodemcu-pin-number.jpg\" alt=\"nodemcu-pin-number\"></p>\n<p>简而言之，只要您看到GPIO这几个字母，就说明是芯片引脚，而没有GPIO这几个字母，那肯定是指开发板引脚。</p>\n<h3 id=\"ESP8266-GPIO编号与NodeMCU开发板引脚名的对应关系\"><a href=\"#ESP8266-GPIO编号与NodeMCU开发板引脚名的对应关系\" class=\"headerlink\" title=\"ESP8266 GPIO编号与NodeMCU开发板引脚名的对应关系\"></a>ESP8266 GPIO编号与NodeMCU开发板引脚名的对应关系</h3><p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/imagesnodemcu-pin-GPIO_001.png\" alt=\"nodemcu-pin-GPIO_001\"></p>\n<p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266_devkit_horizontal-002.png\" alt=\"esp8266_devkit_horizontal-002\"></p>\n<p>在以上图片中深蓝底白色字的标识就是GPIO引脚编号。如<img src=\"http://www.taichi-maker.com/wp-content/uploads/2019/02/GPIO4.png\" alt=\"NodeMCU-GPIO4\"> </p>\n<p>而开发板上所印刷的D2,D3等等就是NodeMCU开发板引脚名称。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">digitalWrite(<span class=\"number\">4</span>, High);</span><br></pre></td></tr></table></figure>\n\n<p>以上语句通过digitalWrite函数将引脚4设置为高电平。这里的数字4就是指GPIO4。也可以说这个语句是将NodeMCU开发板的D2引脚设置为高电平,即：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">digitalWrite(D2, High);    <span class=\"comment\">//因为D2对应的是GPIO4。</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"可用引脚\"><a href=\"#可用引脚\" class=\"headerlink\" title=\"可用引脚\"></a>可用引脚</h2><p>ESP8266芯片有17个GPIO引脚（GPIO0～GPIO16）。这些引脚中的GPIO6～GPIO 11被用于连接开发板的闪存（Flash Memory）。如果在实验电路中使用GPIO6～GPIO11，NodeMCU开发板将无法正常工作。因此建议您<font color=red size=4>不要使用GPIO6～GPIO 11。</font></p>\n<p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/imagesesp8266_devkit_horizontal-flash-pins.png\" alt=\"*ESP8266的GPIO6-GPIO11用于连接闪存，因此不建议使用这些引脚。*\"></p>\n<h3 id=\"电压电流限制\"><a href=\"#电压电流限制\" class=\"headerlink\" title=\"电压电流限制\"></a>电压电流限制</h3><p>NodeMCU开发板引脚的<font color=orange>输入输出电压限制是3.3 V</font>。如果向引脚施加3.6V以上的电压就有可能对芯片电路造成损坏。同时请注意，这些引脚的<font color=orange>最大输出电流是12mA。</font></p>\n<p>由于NodeMCU开发板的引脚允许电压和电流都是低于Arduino开发板的引脚，将NodeMCU与Arduino引脚相互连接时一定要特别注意这两个开发板的引脚电压和电流的区别。操作不当极有可能可能会损坏NodeMCU开发板。</p>\n<h3 id=\"特殊引脚情况说明\"><a href=\"#特殊引脚情况说明\" class=\"headerlink\" title=\"特殊引脚情况说明\"></a>特殊引脚情况说明</h3><p><strong>GPIO2引脚</strong> 在NodeMCU开发板启动时是不能连接低电平的。</p>\n<p><strong>GPIO15引脚</strong>在开发板运行中一直保持低电平状态。因此请不要使用GPIO15引脚来读取开关状态或进行I²C通讯。</p>\n<p><strong>GPIO0引脚</strong>在开发板运行中需要一直保持高电平状态。否则ESP8266将进入程序上传工作模式也就无法正常工作了。您无需对GPIO0引脚进行额外操作，因为NodeMCU的内置电路可以确保GPIO0引脚在工作时连接高电平而在上传程序时连接低电平。</p>\n<h3 id=\"上拉电阻-x2F-下拉电阻\"><a href=\"#上拉电阻-x2F-下拉电阻\" class=\"headerlink\" title=\"上拉电阻&#x2F;下拉电阻\"></a>上拉电阻&#x2F;下拉电阻</h3><p><strong>GPIO 0-15引脚</strong>都配有内置上拉电阻。这一点与Arduino十分类似。<strong>GPIO16 引脚</strong>配有内置下拉电阻。</p>\n<h3 id=\"模拟输入\"><a href=\"#模拟输入\" class=\"headerlink\" title=\"模拟输入\"></a>模拟输入</h3><p>ESP8266 只有一个模拟输入引脚（该引脚通过模拟-数字转换将引脚上的模拟电压数值转化为数字量）。<font color=red>此引脚可读取的模拟电压值为 0 – 1.0V。</font>请注意：ESP8266 芯片模拟输入引脚连接在1.0V以上电压可能损坏ESP8266芯片。</p>\n<p>以上所描述的是针对ESP8266芯片的引脚。而对于NodeMCU开发板引脚，情况就不同了。</p>\n<p>NodeMCU开发板配有降压电路。您可以用NodeMCU开发板的模拟输入引脚读取0-3.3V的模拟电压信号。</p>\n<h3 id=\"通讯\"><a href=\"#通讯\" class=\"headerlink\" title=\"通讯\"></a>通讯</h3><h4 id=\"串行端口\"><a href=\"#串行端口\" class=\"headerlink\" title=\"串行端口\"></a><strong>串行端口</strong></h4><p>ESP8266有2个硬件串行端口（UART）。</p>\n<p>串行端口0（UART0）使用GPIO1和GPIO3引脚。其中GPIO1引脚是TX0，GPIO3是RX0。</p>\n<p>串行端口1（UART1）使用GPIO2和GPIO8引脚。其中GPIO2引脚是TX1，GPIO8是RX1。请注意，由于GPIO8被用于连接闪存芯片，串行端口1只能使用GPIO2来向外发送串行数据。</p>\n<h4 id=\"I²C\"><a href=\"#I²C\" class=\"headerlink\" title=\"I²C\"></a><strong>I²C</strong></h4><p>ESP8266只有软件模拟的I²C端口，没有硬件I²C端口。也就是说我们可以使用任意的两个GPIO引脚通过软件模拟来实现I²C通讯。ESP8266的数据表（datasheet）中，GPIO2标注为SDA，GPIO14标注为SCL。</p>\n<h4 id=\"SPI\"><a href=\"#SPI\" class=\"headerlink\" title=\"SPI\"></a><strong>SPI</strong></h4><p>ESP8266的SPI端口情况如下：</p>\n<p>GPIO14 — CLK<br>GPIO12 — MISO<br>GPIO13 — MOSI<br>GPIO 15 — CS(SS)</p>\n<h3 id=\"ESP8266引脚功能一览\"><a href=\"#ESP8266引脚功能一览\" class=\"headerlink\" title=\"ESP8266引脚功能一览\"></a><strong>ESP8266引脚功能一览</strong></h3><table>\n<thead>\n<tr>\n<th align=\"left\">GPIO</th>\n<th align=\"left\">功能</th>\n<th align=\"left\">状态</th>\n<th align=\"left\">限制</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">0</td>\n<td align=\"left\">引导模式选择</td>\n<td align=\"left\">3.3V</td>\n<td align=\"left\">无Hi-Z</td>\n</tr>\n<tr>\n<td align=\"left\">1</td>\n<td align=\"left\">TX0</td>\n<td align=\"left\">–</td>\n<td align=\"left\">串口通讯过程中不能使用</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">引导模式选择 TX1</td>\n<td align=\"left\">3.3V</td>\n<td align=\"left\">启动时不能接地 启动时发送调试信息</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">RX0</td>\n<td align=\"left\">–</td>\n<td align=\"left\">串口通讯过程中不能使用</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">SDA (I²C)</td>\n<td align=\"left\">–</td>\n<td align=\"left\">–</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">SCL (I²C)</td>\n<td align=\"left\">–</td>\n<td align=\"left\">–</td>\n</tr>\n<tr>\n<td align=\"left\">6 – 11</td>\n<td align=\"left\">连接闪存</td>\n<td align=\"left\">x</td>\n<td align=\"left\">不可用</td>\n</tr>\n<tr>\n<td align=\"left\">12</td>\n<td align=\"left\">MISO (SPI)</td>\n<td align=\"left\">–</td>\n<td align=\"left\">–</td>\n</tr>\n<tr>\n<td align=\"left\">13</td>\n<td align=\"left\">MOSI (SPI)</td>\n<td align=\"left\">–</td>\n<td align=\"left\">–</td>\n</tr>\n<tr>\n<td align=\"left\">14</td>\n<td align=\"left\">SCK (SPI)</td>\n<td align=\"left\">–</td>\n<td align=\"left\">–</td>\n</tr>\n<tr>\n<td align=\"left\">15</td>\n<td align=\"left\">SS (SPI)</td>\n<td align=\"left\">0V</td>\n<td align=\"left\">上拉电阻不可用</td>\n</tr>\n<tr>\n<td align=\"left\">16</td>\n<td align=\"left\">睡眠唤醒</td>\n<td align=\"left\">–</td>\n<td align=\"left\">无上拉电阻，仅有下拉电阻 连接 RST 引脚实现睡眠唤醒</td>\n</tr>\n</tbody></table>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"安装文, 档快速开始","link":"https://butterfly.js.org/posts/21cfbf15/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"Butterfly主题 帮助文档"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"初识NodeMCU开发板\"><a href=\"#初识NodeMCU开发板\" class=\"headerlink\" title=\"初识NodeMCU开发板\"></a>初识NodeMCU开发板</h1><p>市面上销售的配有ESP8266芯片的开发板有很多种。比较流行的有SparkFun ESP8266 Thing、Adafruit Feather HUZZAH with ESP8266、NodeMCU等。这里选择跟太极创客团队学NodeMCU。</p>\n<p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/imagesnodemcu_pinLocation.jpg\" alt=\"ESP8266-NodeMCU开发板\"></p>\n<h2 id=\"数字输入输出引脚（GPIO）\"><a href=\"#数字输入输出引脚（GPIO）\" class=\"headerlink\" title=\"数字输入输出引脚（GPIO）\"></a>数字输入输出引脚（GPIO）</h2><p>如下图所示，ESP8266芯片四周分布很多引脚。这些引脚大部分可用作输入输出使用。这些用作输入输出的引脚统称为GPIO。</p>\n<p>当引脚以数字输出模式工作时，低电平是<font color=red size=4>0V</font>&gt; (灌电流)，高电平是<font color=red size=4>3.3V</font> (拉电流)。</p>\n<p><font face=\"黑体\" color=green size=4>请注意:ESP8266芯片与Arduino Uno&#x2F;Mega&#x2F;Nano等开发板的引脚电平电压有所区别。Arduino开发板的高电平是+5V，低电平是0V。</font></p>\n<h3 id=\"GPIO编号与NodeMCU开发板引脚名的区别\"><a href=\"#GPIO编号与NodeMCU开发板引脚名的区别\" class=\"headerlink\" title=\"GPIO编号与NodeMCU开发板引脚名的区别\"></a>GPIO编号与NodeMCU开发板引脚名的区别</h3><p>请留意：在很多介绍ESP8266以及NodeMCU的资料里会出现两种引脚命名方法。一种是GPIO编号，一种是NodeMCU引脚名。请注意这两者是不同的，请千万不要混淆。</p>\n<p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/imagesnodemcu-pin-number.jpg\" alt=\"nodemcu-pin-number\"></p>\n<p>简而言之，只要您看到GPIO这几个字母，就说明是芯片引脚，而没有GPIO这几个字母，那肯定是指开发板引脚。</p>\n<h3 id=\"ESP8266-GPIO编号与NodeMCU开发板引脚名的对应关系\"><a href=\"#ESP8266-GPIO编号与NodeMCU开发板引脚名的对应关系\" class=\"headerlink\" title=\"ESP8266 GPIO编号与NodeMCU开发板引脚名的对应关系\"></a>ESP8266 GPIO编号与NodeMCU开发板引脚名的对应关系</h3><p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/imagesnodemcu-pin-GPIO_001.png\" alt=\"nodemcu-pin-GPIO_001\"></p>\n<p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266_devkit_horizontal-002.png\" alt=\"esp8266_devkit_horizontal-002\"></p>\n<p>在以上图片中深蓝底白色字的标识就是GPIO引脚编号。如<img src=\"http://www.taichi-maker.com/wp-content/uploads/2019/02/GPIO4.png\" alt=\"NodeMCU-GPIO4\"> </p>\n<p>而开发板上所印刷的D2,D3等等就是NodeMCU开发板引脚名称。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">digitalWrite(<span class=\"number\">4</span>, High);</span><br></pre></td></tr></table></figure>\n\n<p>以上语句通过digitalWrite函数将引脚4设置为高电平。这里的数字4就是指GPIO4。也可以说这个语句是将NodeMCU开发板的D2引脚设置为高电平,即：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">digitalWrite(D2, High);    <span class=\"comment\">//因为D2对应的是GPIO4。</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"可用引脚\"><a href=\"#可用引脚\" class=\"headerlink\" title=\"可用引脚\"></a>可用引脚</h2><p>ESP8266芯片有17个GPIO引脚（GPIO0～GPIO16）。这些引脚中的GPIO6～GPIO 11被用于连接开发板的闪存（Flash Memory）。如果在实验电路中使用GPIO6～GPIO11，NodeMCU开发板将无法正常工作。因此建议您<font color=red size=4>不要使用GPIO6～GPIO 11。</font></p>\n<p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/imagesesp8266_devkit_horizontal-flash-pins.png\" alt=\"*ESP8266的GPIO6-GPIO11用于连接闪存，因此不建议使用这些引脚。*\"></p>\n<h3 id=\"电压电流限制\"><a href=\"#电压电流限制\" class=\"headerlink\" title=\"电压电流限制\"></a>电压电流限制</h3><p>NodeMCU开发板引脚的<font color=orange>输入输出电压限制是3.3 V</font>。如果向引脚施加3.6V以上的电压就有可能对芯片电路造成损坏。同时请注意，这些引脚的<font color=orange>最大输出电流是12mA。</font></p>\n<p>由于NodeMCU开发板的引脚允许电压和电流都是低于Arduino开发板的引脚，将NodeMCU与Arduino引脚相互连接时一定要特别注意这两个开发板的引脚电压和电流的区别。操作不当极有可能可能会损坏NodeMCU开发板。</p>\n<h3 id=\"特殊引脚情况说明\"><a href=\"#特殊引脚情况说明\" class=\"headerlink\" title=\"特殊引脚情况说明\"></a>特殊引脚情况说明</h3><p><strong>GPIO2引脚</strong> 在NodeMCU开发板启动时是不能连接低电平的。</p>\n<p><strong>GPIO15引脚</strong>在开发板运行中一直保持低电平状态。因此请不要使用GPIO15引脚来读取开关状态或进行I²C通讯。</p>\n<p><strong>GPIO0引脚</strong>在开发板运行中需要一直保持高电平状态。否则ESP8266将进入程序上传工作模式也就无法正常工作了。您无需对GPIO0引脚进行额外操作，因为NodeMCU的内置电路可以确保GPIO0引脚在工作时连接高电平而在上传程序时连接低电平。</p>\n<h3 id=\"上拉电阻-x2F-下拉电阻\"><a href=\"#上拉电阻-x2F-下拉电阻\" class=\"headerlink\" title=\"上拉电阻&#x2F;下拉电阻\"></a>上拉电阻&#x2F;下拉电阻</h3><p><strong>GPIO 0-15引脚</strong>都配有内置上拉电阻。这一点与Arduino十分类似。<strong>GPIO16 引脚</strong>配有内置下拉电阻。</p>\n<h3 id=\"模拟输入\"><a href=\"#模拟输入\" class=\"headerlink\" title=\"模拟输入\"></a>模拟输入</h3><p>ESP8266 只有一个模拟输入引脚（该引脚通过模拟-数字转换将引脚上的模拟电压数值转化为数字量）。<font color=red>此引脚可读取的模拟电压值为 0 – 1.0V。</font>请注意：ESP8266 芯片模拟输入引脚连接在1.0V以上电压可能损坏ESP8266芯片。</p>\n<p>以上所描述的是针对ESP8266芯片的引脚。而对于NodeMCU开发板引脚，情况就不同了。</p>\n<p>NodeMCU开发板配有降压电路。您可以用NodeMCU开发板的模拟输入引脚读取0-3.3V的模拟电压信号。</p>\n<h3 id=\"通讯\"><a href=\"#通讯\" class=\"headerlink\" title=\"通讯\"></a>通讯</h3><h4 id=\"串行端口\"><a href=\"#串行端口\" class=\"headerlink\" title=\"串行端口\"></a><strong>串行端口</strong></h4><p>ESP8266有2个硬件串行端口（UART）。</p>\n<p>串行端口0（UART0）使用GPIO1和GPIO3引脚。其中GPIO1引脚是TX0，GPIO3是RX0。</p>\n<p>串行端口1（UART1）使用GPIO2和GPIO8引脚。其中GPIO2引脚是TX1，GPIO8是RX1。请注意，由于GPIO8被用于连接闪存芯片，串行端口1只能使用GPIO2来向外发送串行数据。</p>\n<h4 id=\"I²C\"><a href=\"#I²C\" class=\"headerlink\" title=\"I²C\"></a><strong>I²C</strong></h4><p>ESP8266只有软件模拟的I²C端口，没有硬件I²C端口。也就是说我们可以使用任意的两个GPIO引脚通过软件模拟来实现I²C通讯。ESP8266的数据表（datasheet）中，GPIO2标注为SDA，GPIO14标注为SCL。</p>\n<h4 id=\"SPI\"><a href=\"#SPI\" class=\"headerlink\" title=\"SPI\"></a><strong>SPI</strong></h4><p>ESP8266的SPI端口情况如下：</p>\n<p>GPIO14 — CLK<br>GPIO12 — MISO<br>GPIO13 — MOSI<br>GPIO 15 — CS(SS)</p>\n<h3 id=\"ESP8266引脚功能一览\"><a href=\"#ESP8266引脚功能一览\" class=\"headerlink\" title=\"ESP8266引脚功能一览\"></a><strong>ESP8266引脚功能一览</strong></h3><table>\n<thead>\n<tr>\n<th align=\"left\">GPIO</th>\n<th align=\"left\">功能</th>\n<th align=\"left\">状态</th>\n<th align=\"left\">限制</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">0</td>\n<td align=\"left\">引导模式选择</td>\n<td align=\"left\">3.3V</td>\n<td align=\"left\">无Hi-Z</td>\n</tr>\n<tr>\n<td align=\"left\">1</td>\n<td align=\"left\">TX0</td>\n<td align=\"left\">–</td>\n<td align=\"left\">串口通讯过程中不能使用</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">引导模式选择 TX1</td>\n<td align=\"left\">3.3V</td>\n<td align=\"left\">启动时不能接地 启动时发送调试信息</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">RX0</td>\n<td align=\"left\">–</td>\n<td align=\"left\">串口通讯过程中不能使用</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">SDA (I²C)</td>\n<td align=\"left\">–</td>\n<td align=\"left\">–</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">SCL (I²C)</td>\n<td align=\"left\">–</td>\n<td align=\"left\">–</td>\n</tr>\n<tr>\n<td align=\"left\">6 – 11</td>\n<td align=\"left\">连接闪存</td>\n<td align=\"left\">x</td>\n<td align=\"left\">不可用</td>\n</tr>\n<tr>\n<td align=\"left\">12</td>\n<td align=\"left\">MISO (SPI)</td>\n<td align=\"left\">–</td>\n<td align=\"left\">–</td>\n</tr>\n<tr>\n<td align=\"left\">13</td>\n<td align=\"left\">MOSI (SPI)</td>\n<td align=\"left\">–</td>\n<td align=\"left\">–</td>\n</tr>\n<tr>\n<td align=\"left\">14</td>\n<td align=\"left\">SCK (SPI)</td>\n<td align=\"left\">–</td>\n<td align=\"left\">–</td>\n</tr>\n<tr>\n<td align=\"left\">15</td>\n<td align=\"left\">SS (SPI)</td>\n<td align=\"left\">0V</td>\n<td align=\"left\">上拉电阻不可用</td>\n</tr>\n<tr>\n<td align=\"left\">16</td>\n<td align=\"left\">睡眠唤醒</td>\n<td align=\"left\">–</td>\n<td align=\"left\">无上拉电阻，仅有下拉电阻 连接 RST 引脚实现睡眠唤醒</td>\n</tr>\n</tbody></table>\n"},{"title":"学物联网之ESP8266NodeMCU（三）","abbrlink":"336e95a3","date":"2022-08-31T03:54:16.000Z","keywords":"ESP8266-NodeMCU通过C/C++开发使用物联网","description":"开发基础","password":null,"abstract":null,"message":null,"cover":"http://qiniu.hanvon.top/blog_cover/iot_develop-basics_cover.png","copyright":false,"_content":"\n# 准备工作\n\n## [安装 ESP8266-NodeMCU开发板驱动](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/install-esp8266-nodemcu-driver/)\n\n目前大部分电脑驱动都已自动安装完成，可先进行下一步，若遇连接问题，可自行百度安装驱动。\n\n## [为ESP8266-NodeMCU搭建Arduino IDE开发环境](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/nodemcu-arduino-ide/)\n\n**下载 Arduino IDE **\n\n打开Arduino IDE，**“文件” -> \"首选项\", 在 \"附加开发板管理网址\"** 中输入以下网址：\n\nesp8266开发板管理器地址：\n\n```html\nhttp://arduino.esp8266.com/stable/package_esp8266com_index.json\n```\n\n（选填，方便日后开发esp32）esp32开发版管理器地址：\n\n```html\nhttps://dl.espressif.com/dl/package_esp32_index.json\n```\n\n紧接着点击**”工具“ -> ”开发板“ -> \"开发板管理器\"**, **在搜索栏中输入“esp8266”**，看到搜索结果显示**\"esp8266 by ESP8266 Community\", 选择最新版本安装即可（我这里是3.0.2）**\n\n安装成功后，在**”工具“ -> ”开发板“ 中选择”NodeMCU 1.0 (ESP-12E Moudle)“ 即可**\n\n紧接着设置**NodeMCU开发板的端口，在 “工具” -> \"端口\"**\n\n<font color=purple>（这里比较简单，如果有其它问题自行百度解决）</font>\n\n# [NodeMCU开发板的接入点模式](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/ap/)\n\n## 接入点模式（Access Point, 也称 AP）\n\n![ESP8266-NodeMCU接入点(Access Point)工作模式](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/NodeMCU-Access-Point.png)\n\n\n\n```c\n/*\nNodeMCU接入点模式 \n    \n此程序用于演示如何将NodeMCU以接入点模式工作。通过此程序，您可以使用\n电脑或者手机连接NodeMCU所建立WiFi网络。\n*/\n \n#include <ESP8266WiFi.h>        // 本程序使用ESP8266WiFi库\n \nconst char *ssid = \"设定自己的wifi名\"; // 这里定义将要 建立 的WiFi名称\n                                   // 您可以将自己想要建立的WiFi名称填写入此处的双引号中\n \nconst char *password = \"设定自己的wifi密码\";  // 这里定义将要建立的WiFi密码\n                                    // 您可以将自己想要使用的WiFi密码放入引号内\n                                    // 如果建立的WiFi不要密码，则在双引号内不要填入任何信息\n \nvoid setup() {\n  Serial.begin(9600);              // 启动串口通讯\n \n  WiFi.softAP(ssid, password);     // 此语句是重点。WiFi.softAP用于启动NodeMCU的AP模式。\n                                   // 括号中有两个参数，ssid是WiFi名。password是WiFi密码。\n                                   // 这两个参数具体内容在setup函数之前的位置进行定义。\n \n  Serial.print(\"Access Point: \");    // 通过串口监视器输出信息\n  Serial.println(ssid);              // 告知用户NodeMCU所建立的WiFi名\n  Serial.print(\"IP address: \");      // 以及NodeMCU的IP地址\n  Serial.println(WiFi.softAPIP());   // 通过调用WiFi.softAPIP()可以得到NodeMCU的IP地址\n}\n \nvoid loop() { \n}\n```\n\n将程序上传至开发板以后, NodeMCU在每次启动以后，都会自动启动接入点模式。接入点WiFi的详细信息会通过串口监视器输出给用户查看。\n\n若想要验证一下电脑是否可以与NodeMCU进行网络通讯，那么同样可以在Windows操作系统的“命令提示符”中输入：`ping IP address`\n\n（注意：ping的IP地址是NodeMCU默认的接入点IP地址，这一信息在上面的 串口监视器截屏中可以看到。）\n\n# [NodeMCU开发板的无线终端模式](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/station/)\n\n## 无线终端模式(Station)\n\n### **1. 连接WiFI**\n\n![ESP8266-NodeMCU无线终端(Wireless Station)工作模式](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/NodeMCU-Station.png))\n\n```c\n/*\nNodeMCU无线终端模式连接WiFi\n \n本示例程序用于演示如何使用NodeMCU无线终端模式连接WiFi\n*/\n \n#include <ESP8266WiFi.h>        // 本程序使用ESP8266WiFi库\n \nconst char* ssid     = \"自家路由器的wifi名\";      // 连接WiFi名\n                                            // 请将您需要连接的WiFi名填入引号中\nconst char* password = \"自家路由器的wifi密码\";          // 连接WiFi密码\n                                            // 请将您需要连接的WiFi密码填入引号中\n                                            \nvoid setup() {\n  Serial.begin(9600);         // 启动串口通讯\n  \n  WiFi.begin(ssid, password);                  // 启动网络连接\n  Serial.print(\"Connecting to \");              // 串口监视器输出网络连接信息\n  Serial.print(ssid); Serial.println(\" ...\");  // 告知用户NodeMCU正在尝试WiFi连接\n  \n  int i = 0;                                   // 这一段程序语句用于检查WiFi是否连接成功\n  while (WiFi.status() != WL_CONNECTED) {      // WiFi.status()函数的返回值是由NodeMCU的WiFi连接状态所决定的。 \n    delay(1000);                               // 如果WiFi连接成功则返回值为WL_CONNECTED                       \n    Serial.print(i++); Serial.print(' ');      // 此处通过While循环让NodeMCU每隔一秒钟检查一次WiFi.status()函数返回值\n  }                                            // 同时NodeMCU将通过串口监视器输出连接时长读秒。\n                                               // 这个读秒是通过变量i每隔一秒自加1来实现的。\n                                               \n  Serial.println(\"\");                          // WiFi连接成功后\n  Serial.println(\"Connection established!\");   // NodeMCU将通过串口监视器输出\"连接成功\"信息。\n  Serial.print(\"IP address:    \");             // 同时还将输出NodeMCU的IP地址。这一功能是通过调用\n  Serial.println(WiFi.localIP());              // WiFi.localIP()函数来实现的。该函数的返回值即NodeMCU的IP地址。\n}\n \nvoid loop() {                                   \n}\n```\n\n### **2. 自动连接最强信号WiFi网络**\n\n有时会在家，学校，公司等来回跑，这样的话没换一个地方就得重新更改代码，太麻烦，于是我们可以：\n\n```c\n/*\nNodeMCU无线终端模式连接WiFi-2\n \n此程序将会控制NodeMCU在当前的网络环境里搜索预先存储好的WiFi。\n一旦找到预存的WiFi名称，NodeMCU将会使用预存的密码信息尝试连接该WiFi。\n如果同时找到多个预存WiFi，NodeMCU将会尝试连接信号最强的WiFi。\n*/\n \n#include <ESP8266WiFi.h>          // 本程序使用ESP8266WiFi库\n#include <ESP8266WiFiMulti.h>   // 本程序使用ESP8266WiFiMulti库\n \nESP8266WiFiMulti wifiMulti;     // 建立ESP8266WiFiMulti对象,对象名称是'wifiMulti'\n \nvoid setup() {\n  Serial.begin(9600);            // 启动串口通讯\n \n//通过addAp函数存储  WiFi名称       WiFi密码\n  wifiMulti.addAP(\"taichi-maker\", \"12345678\");  // 这三条语句通过调用函数addAP来记录3个不同的WiFi网络信息。\n  wifiMulti.addAP(\"taichi-maker2\", \"87654321\"); // 这3个WiFi网络名称分别是taichi-maker, taichi-maker2, taichi-maker3。\n  wifiMulti.addAP(\"taichi-maker3\", \"13572468\"); // 这3个网络的密码分别是123456789，87654321，13572468。\n                                                // 此处WiFi信息只是示例，请在使用时将需要连接的WiFi信息填入相应位置。\n                                                // 另外这里只存储了3个WiFi信息，您可以存储更多的WiFi信息在此处。\n                                                \n  Serial.println(\"Connecting ...\");         // 通过串口监视器输出信息告知用户NodeMCU正在尝试连接WiFi\n  int i = 0;                                 \n  while (wifiMulti.run() != WL_CONNECTED) {  // 此处的wifiMulti.run()是重点。通过wifiMulti.run()，NodeMCU将会在当前\n    delay(1000);                             // 环境中搜索addAP函数所存储的WiFi。如果搜到多个存储的WiFi那么NodeMCU\n    Serial.print('.');                       // 将会连接信号最强的那一个WiFi信号。\n  }                                           // 一旦连接WiFI成功，wifiMulti.run()将会返回“WL_CONNECTED”。这也是\n                                              // 此处while循环判断是否跳出循环的条件。\n \n  \n  Serial.println('\\n');                     // WiFi连接成功后\n  Serial.print(\"Connected to \");            // NodeMCU将通过串口监视器输出。\n  Serial.println(WiFi.SSID());              // 连接的WiFI名称\n  Serial.print(\"IP address:\\t\");            // 以及\n  Serial.println(WiFi.localIP());           // NodeMCU的IP地址\n}\n \nvoid loop() { \n}\n```\n\n","source":"_posts/学物联网-NodeMCU-三.md","raw":"---\ntitle: 学物联网之ESP8266NodeMCU（三）\nabbrlink: 336e95a3\ndate: 2022-08-31 11:54:16\ntags:\n  - esp8266\n  - 物联网\nkeywords: ESP8266-NodeMCU通过C/C++开发使用物联网\ndescription: 开发基础\npassword:\nabstract:\nmessage:\ncover: http://qiniu.hanvon.top/blog_cover/iot_develop-basics_cover.png\ncopyright: false\n---\n\n# 准备工作\n\n## [安装 ESP8266-NodeMCU开发板驱动](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/install-esp8266-nodemcu-driver/)\n\n目前大部分电脑驱动都已自动安装完成，可先进行下一步，若遇连接问题，可自行百度安装驱动。\n\n## [为ESP8266-NodeMCU搭建Arduino IDE开发环境](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/nodemcu-arduino-ide/)\n\n**下载 Arduino IDE **\n\n打开Arduino IDE，**“文件” -> \"首选项\", 在 \"附加开发板管理网址\"** 中输入以下网址：\n\nesp8266开发板管理器地址：\n\n```html\nhttp://arduino.esp8266.com/stable/package_esp8266com_index.json\n```\n\n（选填，方便日后开发esp32）esp32开发版管理器地址：\n\n```html\nhttps://dl.espressif.com/dl/package_esp32_index.json\n```\n\n紧接着点击**”工具“ -> ”开发板“ -> \"开发板管理器\"**, **在搜索栏中输入“esp8266”**，看到搜索结果显示**\"esp8266 by ESP8266 Community\", 选择最新版本安装即可（我这里是3.0.2）**\n\n安装成功后，在**”工具“ -> ”开发板“ 中选择”NodeMCU 1.0 (ESP-12E Moudle)“ 即可**\n\n紧接着设置**NodeMCU开发板的端口，在 “工具” -> \"端口\"**\n\n<font color=purple>（这里比较简单，如果有其它问题自行百度解决）</font>\n\n# [NodeMCU开发板的接入点模式](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/ap/)\n\n## 接入点模式（Access Point, 也称 AP）\n\n![ESP8266-NodeMCU接入点(Access Point)工作模式](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/NodeMCU-Access-Point.png)\n\n\n\n```c\n/*\nNodeMCU接入点模式 \n    \n此程序用于演示如何将NodeMCU以接入点模式工作。通过此程序，您可以使用\n电脑或者手机连接NodeMCU所建立WiFi网络。\n*/\n \n#include <ESP8266WiFi.h>        // 本程序使用ESP8266WiFi库\n \nconst char *ssid = \"设定自己的wifi名\"; // 这里定义将要 建立 的WiFi名称\n                                   // 您可以将自己想要建立的WiFi名称填写入此处的双引号中\n \nconst char *password = \"设定自己的wifi密码\";  // 这里定义将要建立的WiFi密码\n                                    // 您可以将自己想要使用的WiFi密码放入引号内\n                                    // 如果建立的WiFi不要密码，则在双引号内不要填入任何信息\n \nvoid setup() {\n  Serial.begin(9600);              // 启动串口通讯\n \n  WiFi.softAP(ssid, password);     // 此语句是重点。WiFi.softAP用于启动NodeMCU的AP模式。\n                                   // 括号中有两个参数，ssid是WiFi名。password是WiFi密码。\n                                   // 这两个参数具体内容在setup函数之前的位置进行定义。\n \n  Serial.print(\"Access Point: \");    // 通过串口监视器输出信息\n  Serial.println(ssid);              // 告知用户NodeMCU所建立的WiFi名\n  Serial.print(\"IP address: \");      // 以及NodeMCU的IP地址\n  Serial.println(WiFi.softAPIP());   // 通过调用WiFi.softAPIP()可以得到NodeMCU的IP地址\n}\n \nvoid loop() { \n}\n```\n\n将程序上传至开发板以后, NodeMCU在每次启动以后，都会自动启动接入点模式。接入点WiFi的详细信息会通过串口监视器输出给用户查看。\n\n若想要验证一下电脑是否可以与NodeMCU进行网络通讯，那么同样可以在Windows操作系统的“命令提示符”中输入：`ping IP address`\n\n（注意：ping的IP地址是NodeMCU默认的接入点IP地址，这一信息在上面的 串口监视器截屏中可以看到。）\n\n# [NodeMCU开发板的无线终端模式](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/station/)\n\n## 无线终端模式(Station)\n\n### **1. 连接WiFI**\n\n![ESP8266-NodeMCU无线终端(Wireless Station)工作模式](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/NodeMCU-Station.png))\n\n```c\n/*\nNodeMCU无线终端模式连接WiFi\n \n本示例程序用于演示如何使用NodeMCU无线终端模式连接WiFi\n*/\n \n#include <ESP8266WiFi.h>        // 本程序使用ESP8266WiFi库\n \nconst char* ssid     = \"自家路由器的wifi名\";      // 连接WiFi名\n                                            // 请将您需要连接的WiFi名填入引号中\nconst char* password = \"自家路由器的wifi密码\";          // 连接WiFi密码\n                                            // 请将您需要连接的WiFi密码填入引号中\n                                            \nvoid setup() {\n  Serial.begin(9600);         // 启动串口通讯\n  \n  WiFi.begin(ssid, password);                  // 启动网络连接\n  Serial.print(\"Connecting to \");              // 串口监视器输出网络连接信息\n  Serial.print(ssid); Serial.println(\" ...\");  // 告知用户NodeMCU正在尝试WiFi连接\n  \n  int i = 0;                                   // 这一段程序语句用于检查WiFi是否连接成功\n  while (WiFi.status() != WL_CONNECTED) {      // WiFi.status()函数的返回值是由NodeMCU的WiFi连接状态所决定的。 \n    delay(1000);                               // 如果WiFi连接成功则返回值为WL_CONNECTED                       \n    Serial.print(i++); Serial.print(' ');      // 此处通过While循环让NodeMCU每隔一秒钟检查一次WiFi.status()函数返回值\n  }                                            // 同时NodeMCU将通过串口监视器输出连接时长读秒。\n                                               // 这个读秒是通过变量i每隔一秒自加1来实现的。\n                                               \n  Serial.println(\"\");                          // WiFi连接成功后\n  Serial.println(\"Connection established!\");   // NodeMCU将通过串口监视器输出\"连接成功\"信息。\n  Serial.print(\"IP address:    \");             // 同时还将输出NodeMCU的IP地址。这一功能是通过调用\n  Serial.println(WiFi.localIP());              // WiFi.localIP()函数来实现的。该函数的返回值即NodeMCU的IP地址。\n}\n \nvoid loop() {                                   \n}\n```\n\n### **2. 自动连接最强信号WiFi网络**\n\n有时会在家，学校，公司等来回跑，这样的话没换一个地方就得重新更改代码，太麻烦，于是我们可以：\n\n```c\n/*\nNodeMCU无线终端模式连接WiFi-2\n \n此程序将会控制NodeMCU在当前的网络环境里搜索预先存储好的WiFi。\n一旦找到预存的WiFi名称，NodeMCU将会使用预存的密码信息尝试连接该WiFi。\n如果同时找到多个预存WiFi，NodeMCU将会尝试连接信号最强的WiFi。\n*/\n \n#include <ESP8266WiFi.h>          // 本程序使用ESP8266WiFi库\n#include <ESP8266WiFiMulti.h>   // 本程序使用ESP8266WiFiMulti库\n \nESP8266WiFiMulti wifiMulti;     // 建立ESP8266WiFiMulti对象,对象名称是'wifiMulti'\n \nvoid setup() {\n  Serial.begin(9600);            // 启动串口通讯\n \n//通过addAp函数存储  WiFi名称       WiFi密码\n  wifiMulti.addAP(\"taichi-maker\", \"12345678\");  // 这三条语句通过调用函数addAP来记录3个不同的WiFi网络信息。\n  wifiMulti.addAP(\"taichi-maker2\", \"87654321\"); // 这3个WiFi网络名称分别是taichi-maker, taichi-maker2, taichi-maker3。\n  wifiMulti.addAP(\"taichi-maker3\", \"13572468\"); // 这3个网络的密码分别是123456789，87654321，13572468。\n                                                // 此处WiFi信息只是示例，请在使用时将需要连接的WiFi信息填入相应位置。\n                                                // 另外这里只存储了3个WiFi信息，您可以存储更多的WiFi信息在此处。\n                                                \n  Serial.println(\"Connecting ...\");         // 通过串口监视器输出信息告知用户NodeMCU正在尝试连接WiFi\n  int i = 0;                                 \n  while (wifiMulti.run() != WL_CONNECTED) {  // 此处的wifiMulti.run()是重点。通过wifiMulti.run()，NodeMCU将会在当前\n    delay(1000);                             // 环境中搜索addAP函数所存储的WiFi。如果搜到多个存储的WiFi那么NodeMCU\n    Serial.print('.');                       // 将会连接信号最强的那一个WiFi信号。\n  }                                           // 一旦连接WiFI成功，wifiMulti.run()将会返回“WL_CONNECTED”。这也是\n                                              // 此处while循环判断是否跳出循环的条件。\n \n  \n  Serial.println('\\n');                     // WiFi连接成功后\n  Serial.print(\"Connected to \");            // NodeMCU将通过串口监视器输出。\n  Serial.println(WiFi.SSID());              // 连接的WiFI名称\n  Serial.print(\"IP address:\\t\");            // 以及\n  Serial.println(WiFi.localIP());           // NodeMCU的IP地址\n}\n \nvoid loop() { \n}\n```\n\n","slug":"学物联网-NodeMCU-三","published":1,"updated":"2023-11-01T04:10:47.594Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clofj2tc0000ioot331iuf4wh","content":"<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><h2 id=\"安装-ESP8266-NodeMCU开发板驱动\"><a href=\"#安装-ESP8266-NodeMCU开发板驱动\" class=\"headerlink\" title=\"安装 ESP8266-NodeMCU开发板驱动\"></a><a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/install-esp8266-nodemcu-driver/\">安装 ESP8266-NodeMCU开发板驱动</a></h2><p>目前大部分电脑驱动都已自动安装完成，可先进行下一步，若遇连接问题，可自行百度安装驱动。</p>\n<h2 id=\"为ESP8266-NodeMCU搭建Arduino-IDE开发环境\"><a href=\"#为ESP8266-NodeMCU搭建Arduino-IDE开发环境\" class=\"headerlink\" title=\"为ESP8266-NodeMCU搭建Arduino IDE开发环境\"></a><a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/nodemcu-arduino-ide/\">为ESP8266-NodeMCU搭建Arduino IDE开发环境</a></h2><p>**下载 Arduino IDE **</p>\n<p>打开Arduino IDE，<strong>“文件” -&gt; “首选项”, 在 “附加开发板管理网址”</strong> 中输入以下网址：</p>\n<p>esp8266开发板管理器地址：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://arduino.esp8266.com/stable/package_esp8266com_index.json</span><br></pre></td></tr></table></figure>\n\n<p>（选填，方便日后开发esp32）esp32开发版管理器地址：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://dl.espressif.com/dl/package_esp32_index.json</span><br></pre></td></tr></table></figure>\n\n<p>紧接着点击<strong>”工具“ -&gt; ”开发板“ -&gt; “开发板管理器”</strong>, <strong>在搜索栏中输入“esp8266”</strong>，看到搜索结果显示**”esp8266 by ESP8266 Community”, 选择最新版本安装即可（我这里是3.0.2）**</p>\n<p>安装成功后，在<strong>”工具“ -&gt; ”开发板“ 中选择”NodeMCU 1.0 (ESP-12E Moudle)“ 即可</strong></p>\n<p>紧接着设置<strong>NodeMCU开发板的端口，在 “工具” -&gt; “端口”</strong></p>\n<p><font color=purple>（这里比较简单，如果有其它问题自行百度解决）</font></p>\n<h1 id=\"NodeMCU开发板的接入点模式\"><a href=\"#NodeMCU开发板的接入点模式\" class=\"headerlink\" title=\"NodeMCU开发板的接入点模式\"></a><a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/ap/\">NodeMCU开发板的接入点模式</a></h1><h2 id=\"接入点模式（Access-Point-也称-AP）\"><a href=\"#接入点模式（Access-Point-也称-AP）\" class=\"headerlink\" title=\"接入点模式（Access Point, 也称 AP）\"></a>接入点模式（Access Point, 也称 AP）</h2><p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/NodeMCU-Access-Point.png\" alt=\"ESP8266-NodeMCU接入点(Access Point)工作模式\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">NodeMCU接入点模式 </span></span><br><span class=\"line\"><span class=\"comment\">    </span></span><br><span class=\"line\"><span class=\"comment\">此程序用于演示如何将NodeMCU以接入点模式工作。通过此程序，您可以使用</span></span><br><span class=\"line\"><span class=\"comment\">电脑或者手机连接NodeMCU所建立WiFi网络。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ESP8266WiFi.h&gt;</span>        <span class=\"comment\">// 本程序使用ESP8266WiFi库</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span> *ssid = <span class=\"string\">&quot;设定自己的wifi名&quot;</span>; <span class=\"comment\">// 这里定义将要 建立 的WiFi名称</span></span><br><span class=\"line\">                                   <span class=\"comment\">// 您可以将自己想要建立的WiFi名称填写入此处的双引号中</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span> *password = <span class=\"string\">&quot;设定自己的wifi密码&quot;</span>;  <span class=\"comment\">// 这里定义将要建立的WiFi密码</span></span><br><span class=\"line\">                                    <span class=\"comment\">// 您可以将自己想要使用的WiFi密码放入引号内</span></span><br><span class=\"line\">                                    <span class=\"comment\">// 如果建立的WiFi不要密码，则在双引号内不要填入任何信息</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">setup</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  Serial.begin(<span class=\"number\">9600</span>);              <span class=\"comment\">// 启动串口通讯</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  WiFi.softAP(ssid, password);     <span class=\"comment\">// 此语句是重点。WiFi.softAP用于启动NodeMCU的AP模式。</span></span><br><span class=\"line\">                                   <span class=\"comment\">// 括号中有两个参数，ssid是WiFi名。password是WiFi密码。</span></span><br><span class=\"line\">                                   <span class=\"comment\">// 这两个参数具体内容在setup函数之前的位置进行定义。</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  Serial.print(<span class=\"string\">&quot;Access Point: &quot;</span>);    <span class=\"comment\">// 通过串口监视器输出信息</span></span><br><span class=\"line\">  Serial.println(ssid);              <span class=\"comment\">// 告知用户NodeMCU所建立的WiFi名</span></span><br><span class=\"line\">  Serial.print(<span class=\"string\">&quot;IP address: &quot;</span>);      <span class=\"comment\">// 以及NodeMCU的IP地址</span></span><br><span class=\"line\">  Serial.println(WiFi.softAPIP());   <span class=\"comment\">// 通过调用WiFi.softAPIP()可以得到NodeMCU的IP地址</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">loop</span><span class=\"params\">()</span> &#123; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将程序上传至开发板以后, NodeMCU在每次启动以后，都会自动启动接入点模式。接入点WiFi的详细信息会通过串口监视器输出给用户查看。</p>\n<p>若想要验证一下电脑是否可以与NodeMCU进行网络通讯，那么同样可以在Windows操作系统的“命令提示符”中输入：<code>ping IP address</code></p>\n<p>（注意：ping的IP地址是NodeMCU默认的接入点IP地址，这一信息在上面的 串口监视器截屏中可以看到。）</p>\n<h1 id=\"NodeMCU开发板的无线终端模式\"><a href=\"#NodeMCU开发板的无线终端模式\" class=\"headerlink\" title=\"NodeMCU开发板的无线终端模式\"></a><a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/station/\">NodeMCU开发板的无线终端模式</a></h1><h2 id=\"无线终端模式-Station\"><a href=\"#无线终端模式-Station\" class=\"headerlink\" title=\"无线终端模式(Station)\"></a>无线终端模式(Station)</h2><h3 id=\"1-连接WiFI\"><a href=\"#1-连接WiFI\" class=\"headerlink\" title=\"1. 连接WiFI\"></a><strong>1. 连接WiFI</strong></h3><p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/NodeMCU-Station.png\" alt=\"ESP8266-NodeMCU无线终端(Wireless Station)工作模式\">)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">NodeMCU无线终端模式连接WiFi</span></span><br><span class=\"line\"><span class=\"comment\"> </span></span><br><span class=\"line\"><span class=\"comment\">本示例程序用于演示如何使用NodeMCU无线终端模式连接WiFi</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ESP8266WiFi.h&gt;</span>        <span class=\"comment\">// 本程序使用ESP8266WiFi库</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span>* ssid     = <span class=\"string\">&quot;自家路由器的wifi名&quot;</span>;      <span class=\"comment\">// 连接WiFi名</span></span><br><span class=\"line\">                                            <span class=\"comment\">// 请将您需要连接的WiFi名填入引号中</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span>* password = <span class=\"string\">&quot;自家路由器的wifi密码&quot;</span>;          <span class=\"comment\">// 连接WiFi密码</span></span><br><span class=\"line\">                                            <span class=\"comment\">// 请将您需要连接的WiFi密码填入引号中</span></span><br><span class=\"line\">                                            </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">setup</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  Serial.begin(<span class=\"number\">9600</span>);         <span class=\"comment\">// 启动串口通讯</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  WiFi.begin(ssid, password);                  <span class=\"comment\">// 启动网络连接</span></span><br><span class=\"line\">  Serial.print(<span class=\"string\">&quot;Connecting to &quot;</span>);              <span class=\"comment\">// 串口监视器输出网络连接信息</span></span><br><span class=\"line\">  Serial.print(ssid); Serial.println(<span class=\"string\">&quot; ...&quot;</span>);  <span class=\"comment\">// 告知用户NodeMCU正在尝试WiFi连接</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"type\">int</span> i = <span class=\"number\">0</span>;                                   <span class=\"comment\">// 这一段程序语句用于检查WiFi是否连接成功</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (WiFi.status() != WL_CONNECTED) &#123;      <span class=\"comment\">// WiFi.status()函数的返回值是由NodeMCU的WiFi连接状态所决定的。 </span></span><br><span class=\"line\">    delay(<span class=\"number\">1000</span>);                               <span class=\"comment\">// 如果WiFi连接成功则返回值为WL_CONNECTED                       </span></span><br><span class=\"line\">    Serial.print(i++); Serial.print(<span class=\"string\">&#x27; &#x27;</span>);      <span class=\"comment\">// 此处通过While循环让NodeMCU每隔一秒钟检查一次WiFi.status()函数返回值</span></span><br><span class=\"line\">  &#125;                                            <span class=\"comment\">// 同时NodeMCU将通过串口监视器输出连接时长读秒。</span></span><br><span class=\"line\">                                               <span class=\"comment\">// 这个读秒是通过变量i每隔一秒自加1来实现的。</span></span><br><span class=\"line\">                                               </span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot;&quot;</span>);                          <span class=\"comment\">// WiFi连接成功后</span></span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot;Connection established!&quot;</span>);   <span class=\"comment\">// NodeMCU将通过串口监视器输出&quot;连接成功&quot;信息。</span></span><br><span class=\"line\">  Serial.print(<span class=\"string\">&quot;IP address:    &quot;</span>);             <span class=\"comment\">// 同时还将输出NodeMCU的IP地址。这一功能是通过调用</span></span><br><span class=\"line\">  Serial.println(WiFi.localIP());              <span class=\"comment\">// WiFi.localIP()函数来实现的。该函数的返回值即NodeMCU的IP地址。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">loop</span><span class=\"params\">()</span> &#123;                                   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-自动连接最强信号WiFi网络\"><a href=\"#2-自动连接最强信号WiFi网络\" class=\"headerlink\" title=\"2. 自动连接最强信号WiFi网络\"></a><strong>2. 自动连接最强信号WiFi网络</strong></h3><p>有时会在家，学校，公司等来回跑，这样的话没换一个地方就得重新更改代码，太麻烦，于是我们可以：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">NodeMCU无线终端模式连接WiFi-2</span></span><br><span class=\"line\"><span class=\"comment\"> </span></span><br><span class=\"line\"><span class=\"comment\">此程序将会控制NodeMCU在当前的网络环境里搜索预先存储好的WiFi。</span></span><br><span class=\"line\"><span class=\"comment\">一旦找到预存的WiFi名称，NodeMCU将会使用预存的密码信息尝试连接该WiFi。</span></span><br><span class=\"line\"><span class=\"comment\">如果同时找到多个预存WiFi，NodeMCU将会尝试连接信号最强的WiFi。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ESP8266WiFi.h&gt;</span>          <span class=\"comment\">// 本程序使用ESP8266WiFi库</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ESP8266WiFiMulti.h&gt;</span>   <span class=\"comment\">// 本程序使用ESP8266WiFiMulti库</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\">ESP8266WiFiMulti wifiMulti;     <span class=\"comment\">// 建立ESP8266WiFiMulti对象,对象名称是&#x27;wifiMulti&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">setup</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  Serial.begin(<span class=\"number\">9600</span>);            <span class=\"comment\">// 启动串口通讯</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//通过addAp函数存储  WiFi名称       WiFi密码</span></span><br><span class=\"line\">  wifiMulti.addAP(<span class=\"string\">&quot;taichi-maker&quot;</span>, <span class=\"string\">&quot;12345678&quot;</span>);  <span class=\"comment\">// 这三条语句通过调用函数addAP来记录3个不同的WiFi网络信息。</span></span><br><span class=\"line\">  wifiMulti.addAP(<span class=\"string\">&quot;taichi-maker2&quot;</span>, <span class=\"string\">&quot;87654321&quot;</span>); <span class=\"comment\">// 这3个WiFi网络名称分别是taichi-maker, taichi-maker2, taichi-maker3。</span></span><br><span class=\"line\">  wifiMulti.addAP(<span class=\"string\">&quot;taichi-maker3&quot;</span>, <span class=\"string\">&quot;13572468&quot;</span>); <span class=\"comment\">// 这3个网络的密码分别是123456789，87654321，13572468。</span></span><br><span class=\"line\">                                                <span class=\"comment\">// 此处WiFi信息只是示例，请在使用时将需要连接的WiFi信息填入相应位置。</span></span><br><span class=\"line\">                                                <span class=\"comment\">// 另外这里只存储了3个WiFi信息，您可以存储更多的WiFi信息在此处。</span></span><br><span class=\"line\">                                                </span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot;Connecting ...&quot;</span>);         <span class=\"comment\">// 通过串口监视器输出信息告知用户NodeMCU正在尝试连接WiFi</span></span><br><span class=\"line\">  <span class=\"type\">int</span> i = <span class=\"number\">0</span>;                                 </span><br><span class=\"line\">  <span class=\"keyword\">while</span> (wifiMulti.run() != WL_CONNECTED) &#123;  <span class=\"comment\">// 此处的wifiMulti.run()是重点。通过wifiMulti.run()，NodeMCU将会在当前</span></span><br><span class=\"line\">    delay(<span class=\"number\">1000</span>);                             <span class=\"comment\">// 环境中搜索addAP函数所存储的WiFi。如果搜到多个存储的WiFi那么NodeMCU</span></span><br><span class=\"line\">    Serial.print(<span class=\"string\">&#x27;.&#x27;</span>);                       <span class=\"comment\">// 将会连接信号最强的那一个WiFi信号。</span></span><br><span class=\"line\">  &#125;                                           <span class=\"comment\">// 一旦连接WiFI成功，wifiMulti.run()将会返回“WL_CONNECTED”。这也是</span></span><br><span class=\"line\">                                              <span class=\"comment\">// 此处while循环判断是否跳出循环的条件。</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  </span><br><span class=\"line\">  Serial.println(<span class=\"string\">&#x27;\\n&#x27;</span>);                     <span class=\"comment\">// WiFi连接成功后</span></span><br><span class=\"line\">  Serial.print(<span class=\"string\">&quot;Connected to &quot;</span>);            <span class=\"comment\">// NodeMCU将通过串口监视器输出。</span></span><br><span class=\"line\">  Serial.println(WiFi.SSID());              <span class=\"comment\">// 连接的WiFI名称</span></span><br><span class=\"line\">  Serial.print(<span class=\"string\">&quot;IP address:\\t&quot;</span>);            <span class=\"comment\">// 以及</span></span><br><span class=\"line\">  Serial.println(WiFi.localIP());           <span class=\"comment\">// NodeMCU的IP地址</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">loop</span><span class=\"params\">()</span> &#123; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"安装文, 档快速开始","link":"https://butterfly.js.org/posts/21cfbf15/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"Butterfly主题 帮助文档"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><h2 id=\"安装-ESP8266-NodeMCU开发板驱动\"><a href=\"#安装-ESP8266-NodeMCU开发板驱动\" class=\"headerlink\" title=\"安装 ESP8266-NodeMCU开发板驱动\"></a><a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/install-esp8266-nodemcu-driver/\">安装 ESP8266-NodeMCU开发板驱动</a></h2><p>目前大部分电脑驱动都已自动安装完成，可先进行下一步，若遇连接问题，可自行百度安装驱动。</p>\n<h2 id=\"为ESP8266-NodeMCU搭建Arduino-IDE开发环境\"><a href=\"#为ESP8266-NodeMCU搭建Arduino-IDE开发环境\" class=\"headerlink\" title=\"为ESP8266-NodeMCU搭建Arduino IDE开发环境\"></a><a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/nodemcu-arduino-ide/\">为ESP8266-NodeMCU搭建Arduino IDE开发环境</a></h2><p>**下载 Arduino IDE **</p>\n<p>打开Arduino IDE，<strong>“文件” -&gt; “首选项”, 在 “附加开发板管理网址”</strong> 中输入以下网址：</p>\n<p>esp8266开发板管理器地址：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://arduino.esp8266.com/stable/package_esp8266com_index.json</span><br></pre></td></tr></table></figure>\n\n<p>（选填，方便日后开发esp32）esp32开发版管理器地址：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://dl.espressif.com/dl/package_esp32_index.json</span><br></pre></td></tr></table></figure>\n\n<p>紧接着点击<strong>”工具“ -&gt; ”开发板“ -&gt; “开发板管理器”</strong>, <strong>在搜索栏中输入“esp8266”</strong>，看到搜索结果显示**”esp8266 by ESP8266 Community”, 选择最新版本安装即可（我这里是3.0.2）**</p>\n<p>安装成功后，在<strong>”工具“ -&gt; ”开发板“ 中选择”NodeMCU 1.0 (ESP-12E Moudle)“ 即可</strong></p>\n<p>紧接着设置<strong>NodeMCU开发板的端口，在 “工具” -&gt; “端口”</strong></p>\n<p><font color=purple>（这里比较简单，如果有其它问题自行百度解决）</font></p>\n<h1 id=\"NodeMCU开发板的接入点模式\"><a href=\"#NodeMCU开发板的接入点模式\" class=\"headerlink\" title=\"NodeMCU开发板的接入点模式\"></a><a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/ap/\">NodeMCU开发板的接入点模式</a></h1><h2 id=\"接入点模式（Access-Point-也称-AP）\"><a href=\"#接入点模式（Access-Point-也称-AP）\" class=\"headerlink\" title=\"接入点模式（Access Point, 也称 AP）\"></a>接入点模式（Access Point, 也称 AP）</h2><p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/NodeMCU-Access-Point.png\" alt=\"ESP8266-NodeMCU接入点(Access Point)工作模式\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">NodeMCU接入点模式 </span></span><br><span class=\"line\"><span class=\"comment\">    </span></span><br><span class=\"line\"><span class=\"comment\">此程序用于演示如何将NodeMCU以接入点模式工作。通过此程序，您可以使用</span></span><br><span class=\"line\"><span class=\"comment\">电脑或者手机连接NodeMCU所建立WiFi网络。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ESP8266WiFi.h&gt;</span>        <span class=\"comment\">// 本程序使用ESP8266WiFi库</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span> *ssid = <span class=\"string\">&quot;设定自己的wifi名&quot;</span>; <span class=\"comment\">// 这里定义将要 建立 的WiFi名称</span></span><br><span class=\"line\">                                   <span class=\"comment\">// 您可以将自己想要建立的WiFi名称填写入此处的双引号中</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span> *password = <span class=\"string\">&quot;设定自己的wifi密码&quot;</span>;  <span class=\"comment\">// 这里定义将要建立的WiFi密码</span></span><br><span class=\"line\">                                    <span class=\"comment\">// 您可以将自己想要使用的WiFi密码放入引号内</span></span><br><span class=\"line\">                                    <span class=\"comment\">// 如果建立的WiFi不要密码，则在双引号内不要填入任何信息</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">setup</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  Serial.begin(<span class=\"number\">9600</span>);              <span class=\"comment\">// 启动串口通讯</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  WiFi.softAP(ssid, password);     <span class=\"comment\">// 此语句是重点。WiFi.softAP用于启动NodeMCU的AP模式。</span></span><br><span class=\"line\">                                   <span class=\"comment\">// 括号中有两个参数，ssid是WiFi名。password是WiFi密码。</span></span><br><span class=\"line\">                                   <span class=\"comment\">// 这两个参数具体内容在setup函数之前的位置进行定义。</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  Serial.print(<span class=\"string\">&quot;Access Point: &quot;</span>);    <span class=\"comment\">// 通过串口监视器输出信息</span></span><br><span class=\"line\">  Serial.println(ssid);              <span class=\"comment\">// 告知用户NodeMCU所建立的WiFi名</span></span><br><span class=\"line\">  Serial.print(<span class=\"string\">&quot;IP address: &quot;</span>);      <span class=\"comment\">// 以及NodeMCU的IP地址</span></span><br><span class=\"line\">  Serial.println(WiFi.softAPIP());   <span class=\"comment\">// 通过调用WiFi.softAPIP()可以得到NodeMCU的IP地址</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">loop</span><span class=\"params\">()</span> &#123; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将程序上传至开发板以后, NodeMCU在每次启动以后，都会自动启动接入点模式。接入点WiFi的详细信息会通过串口监视器输出给用户查看。</p>\n<p>若想要验证一下电脑是否可以与NodeMCU进行网络通讯，那么同样可以在Windows操作系统的“命令提示符”中输入：<code>ping IP address</code></p>\n<p>（注意：ping的IP地址是NodeMCU默认的接入点IP地址，这一信息在上面的 串口监视器截屏中可以看到。）</p>\n<h1 id=\"NodeMCU开发板的无线终端模式\"><a href=\"#NodeMCU开发板的无线终端模式\" class=\"headerlink\" title=\"NodeMCU开发板的无线终端模式\"></a><a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/station/\">NodeMCU开发板的无线终端模式</a></h1><h2 id=\"无线终端模式-Station\"><a href=\"#无线终端模式-Station\" class=\"headerlink\" title=\"无线终端模式(Station)\"></a>无线终端模式(Station)</h2><h3 id=\"1-连接WiFI\"><a href=\"#1-连接WiFI\" class=\"headerlink\" title=\"1. 连接WiFI\"></a><strong>1. 连接WiFI</strong></h3><p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/NodeMCU-Station.png\" alt=\"ESP8266-NodeMCU无线终端(Wireless Station)工作模式\">)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">NodeMCU无线终端模式连接WiFi</span></span><br><span class=\"line\"><span class=\"comment\"> </span></span><br><span class=\"line\"><span class=\"comment\">本示例程序用于演示如何使用NodeMCU无线终端模式连接WiFi</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ESP8266WiFi.h&gt;</span>        <span class=\"comment\">// 本程序使用ESP8266WiFi库</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span>* ssid     = <span class=\"string\">&quot;自家路由器的wifi名&quot;</span>;      <span class=\"comment\">// 连接WiFi名</span></span><br><span class=\"line\">                                            <span class=\"comment\">// 请将您需要连接的WiFi名填入引号中</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span>* password = <span class=\"string\">&quot;自家路由器的wifi密码&quot;</span>;          <span class=\"comment\">// 连接WiFi密码</span></span><br><span class=\"line\">                                            <span class=\"comment\">// 请将您需要连接的WiFi密码填入引号中</span></span><br><span class=\"line\">                                            </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">setup</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  Serial.begin(<span class=\"number\">9600</span>);         <span class=\"comment\">// 启动串口通讯</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  WiFi.begin(ssid, password);                  <span class=\"comment\">// 启动网络连接</span></span><br><span class=\"line\">  Serial.print(<span class=\"string\">&quot;Connecting to &quot;</span>);              <span class=\"comment\">// 串口监视器输出网络连接信息</span></span><br><span class=\"line\">  Serial.print(ssid); Serial.println(<span class=\"string\">&quot; ...&quot;</span>);  <span class=\"comment\">// 告知用户NodeMCU正在尝试WiFi连接</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"type\">int</span> i = <span class=\"number\">0</span>;                                   <span class=\"comment\">// 这一段程序语句用于检查WiFi是否连接成功</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (WiFi.status() != WL_CONNECTED) &#123;      <span class=\"comment\">// WiFi.status()函数的返回值是由NodeMCU的WiFi连接状态所决定的。 </span></span><br><span class=\"line\">    delay(<span class=\"number\">1000</span>);                               <span class=\"comment\">// 如果WiFi连接成功则返回值为WL_CONNECTED                       </span></span><br><span class=\"line\">    Serial.print(i++); Serial.print(<span class=\"string\">&#x27; &#x27;</span>);      <span class=\"comment\">// 此处通过While循环让NodeMCU每隔一秒钟检查一次WiFi.status()函数返回值</span></span><br><span class=\"line\">  &#125;                                            <span class=\"comment\">// 同时NodeMCU将通过串口监视器输出连接时长读秒。</span></span><br><span class=\"line\">                                               <span class=\"comment\">// 这个读秒是通过变量i每隔一秒自加1来实现的。</span></span><br><span class=\"line\">                                               </span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot;&quot;</span>);                          <span class=\"comment\">// WiFi连接成功后</span></span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot;Connection established!&quot;</span>);   <span class=\"comment\">// NodeMCU将通过串口监视器输出&quot;连接成功&quot;信息。</span></span><br><span class=\"line\">  Serial.print(<span class=\"string\">&quot;IP address:    &quot;</span>);             <span class=\"comment\">// 同时还将输出NodeMCU的IP地址。这一功能是通过调用</span></span><br><span class=\"line\">  Serial.println(WiFi.localIP());              <span class=\"comment\">// WiFi.localIP()函数来实现的。该函数的返回值即NodeMCU的IP地址。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">loop</span><span class=\"params\">()</span> &#123;                                   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-自动连接最强信号WiFi网络\"><a href=\"#2-自动连接最强信号WiFi网络\" class=\"headerlink\" title=\"2. 自动连接最强信号WiFi网络\"></a><strong>2. 自动连接最强信号WiFi网络</strong></h3><p>有时会在家，学校，公司等来回跑，这样的话没换一个地方就得重新更改代码，太麻烦，于是我们可以：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">NodeMCU无线终端模式连接WiFi-2</span></span><br><span class=\"line\"><span class=\"comment\"> </span></span><br><span class=\"line\"><span class=\"comment\">此程序将会控制NodeMCU在当前的网络环境里搜索预先存储好的WiFi。</span></span><br><span class=\"line\"><span class=\"comment\">一旦找到预存的WiFi名称，NodeMCU将会使用预存的密码信息尝试连接该WiFi。</span></span><br><span class=\"line\"><span class=\"comment\">如果同时找到多个预存WiFi，NodeMCU将会尝试连接信号最强的WiFi。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ESP8266WiFi.h&gt;</span>          <span class=\"comment\">// 本程序使用ESP8266WiFi库</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ESP8266WiFiMulti.h&gt;</span>   <span class=\"comment\">// 本程序使用ESP8266WiFiMulti库</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\">ESP8266WiFiMulti wifiMulti;     <span class=\"comment\">// 建立ESP8266WiFiMulti对象,对象名称是&#x27;wifiMulti&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">setup</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  Serial.begin(<span class=\"number\">9600</span>);            <span class=\"comment\">// 启动串口通讯</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//通过addAp函数存储  WiFi名称       WiFi密码</span></span><br><span class=\"line\">  wifiMulti.addAP(<span class=\"string\">&quot;taichi-maker&quot;</span>, <span class=\"string\">&quot;12345678&quot;</span>);  <span class=\"comment\">// 这三条语句通过调用函数addAP来记录3个不同的WiFi网络信息。</span></span><br><span class=\"line\">  wifiMulti.addAP(<span class=\"string\">&quot;taichi-maker2&quot;</span>, <span class=\"string\">&quot;87654321&quot;</span>); <span class=\"comment\">// 这3个WiFi网络名称分别是taichi-maker, taichi-maker2, taichi-maker3。</span></span><br><span class=\"line\">  wifiMulti.addAP(<span class=\"string\">&quot;taichi-maker3&quot;</span>, <span class=\"string\">&quot;13572468&quot;</span>); <span class=\"comment\">// 这3个网络的密码分别是123456789，87654321，13572468。</span></span><br><span class=\"line\">                                                <span class=\"comment\">// 此处WiFi信息只是示例，请在使用时将需要连接的WiFi信息填入相应位置。</span></span><br><span class=\"line\">                                                <span class=\"comment\">// 另外这里只存储了3个WiFi信息，您可以存储更多的WiFi信息在此处。</span></span><br><span class=\"line\">                                                </span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot;Connecting ...&quot;</span>);         <span class=\"comment\">// 通过串口监视器输出信息告知用户NodeMCU正在尝试连接WiFi</span></span><br><span class=\"line\">  <span class=\"type\">int</span> i = <span class=\"number\">0</span>;                                 </span><br><span class=\"line\">  <span class=\"keyword\">while</span> (wifiMulti.run() != WL_CONNECTED) &#123;  <span class=\"comment\">// 此处的wifiMulti.run()是重点。通过wifiMulti.run()，NodeMCU将会在当前</span></span><br><span class=\"line\">    delay(<span class=\"number\">1000</span>);                             <span class=\"comment\">// 环境中搜索addAP函数所存储的WiFi。如果搜到多个存储的WiFi那么NodeMCU</span></span><br><span class=\"line\">    Serial.print(<span class=\"string\">&#x27;.&#x27;</span>);                       <span class=\"comment\">// 将会连接信号最强的那一个WiFi信号。</span></span><br><span class=\"line\">  &#125;                                           <span class=\"comment\">// 一旦连接WiFI成功，wifiMulti.run()将会返回“WL_CONNECTED”。这也是</span></span><br><span class=\"line\">                                              <span class=\"comment\">// 此处while循环判断是否跳出循环的条件。</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  </span><br><span class=\"line\">  Serial.println(<span class=\"string\">&#x27;\\n&#x27;</span>);                     <span class=\"comment\">// WiFi连接成功后</span></span><br><span class=\"line\">  Serial.print(<span class=\"string\">&quot;Connected to &quot;</span>);            <span class=\"comment\">// NodeMCU将通过串口监视器输出。</span></span><br><span class=\"line\">  Serial.println(WiFi.SSID());              <span class=\"comment\">// 连接的WiFI名称</span></span><br><span class=\"line\">  Serial.print(<span class=\"string\">&quot;IP address:\\t&quot;</span>);            <span class=\"comment\">// 以及</span></span><br><span class=\"line\">  Serial.println(WiFi.localIP());           <span class=\"comment\">// NodeMCU的IP地址</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">loop</span><span class=\"params\">()</span> &#123; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"学物联网之ESP8266NodeMCU（二）","abbrlink":"4e66da29","date":"2022-08-31T03:28:49.000Z","keywords":"互联网知识基础","description":"互联网知识基础","password":null,"abstract":null,"message":null,"cover":"http://qiniu.hanvon.top/blog_cover/taichi-maker-internet-icon_cover.png","copyright":false,"_content":"\n# [TCP/IP协议簇（TCP/IP Stack）](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/internet-basics/tcp-ip-stack/)\n\n在网络系统中，为了保证通信设备之间能正确地进行通信，必须使用一种双方都能够理解的语言，这种语言被称为“协议”。\n\nTCP/IP协议簇是Internet的基础，也是当今最流行的组网形式。TCP/IP是一组协议的代名词。\n\nTCP/IP协议被划分为4层，分别是：\n\n| 分层名称                 | 包含协议                          |\n| ------------------------ | --------------------------------- |\n| 应用层                   | HTTP, FTP, mDNS, WebSocket, OSC … |\n| 传输层                   | TCP, UDP                          |\n| 网络层                   | IP                                |\n| 链路层（也称网络接口层） | Ethernet, Wi-Fi …                 |\n\n# [链路层（Link Layer）](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/internet-basics/link-layer/)\n\n链路层的主要作用是实现设备之间的物理链接。举例来说，我们日常使用的WiFi就是链路层的一种。\n\n## ESP8266利用WiFi联网时有三种工作模式。\n\n**模式1 – 无线终端模式（Wireless Station）**\n\n如下图所示，ESP8266可通过WiFi连接无线路由器。这与用您的手机通过WiFi连接无线路由器的模式相同。\n\n![ESP8266-NodeMCU无线终端(Wireless Station)工作模式](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/NodeMCU-Station.png)\n\n**模式2 – 接入点模式（Access Point, 也称 AP）**\n\nESP8266也可以建立WiFi网络供其它设备连接。当ESP8266以此模式运行时，我们可以使用手机搜索ESP8266所发出的WiFi网络并进行连接。\n\n![ESP8266-NodeMCU接入点(Access Point)工作模式](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/NodeMCU-Access-Point.png)\n\n**模式3 – 混合模式（Wireless Station + AP）**\n\n混合模式即以上两种模式的混合。\n\n# [网络层（Internet Layer）](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/internet-basics/internet-layer/)\n\n##### 网络层与IP协议\n\n尽管设备可以通过链路层联网，但是光有链路层还无法实现设备之间的数据通讯。因为网络设备没有明确的标识。网络设备无从知晓要向谁传输数据，也无法确定从何处获取数据。\n\n网络层主要作用是通过IP协议为联网设备提供IP地址。\n\n有了IP地址还不够，因为要确保网络中所有设备IP地址不重复，还需要DHCP (Dynamic Host Configuration Protocol) 服务器来实现这一功能。\n\n当网络中所有设备都有了独立的IP地址后，设备之间就可以收发数据了。\n\n# [传输层（Transportation Layer）](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/internet-basics/transportation-layer/)\n\n网络设备通讯时，数据丢失和数据受损的情况经常出现。传输层的\nTCP（Transmission Control Protocol）和UDP（User Datagram Protocol）协议可以用来解决这一问题。通常我们会选择这两种协议中的一种来保证数据传输的准确性。具体选择哪一种协议要看我们使用的是何种网络应用。因为不同的网络应用对于数据的传输要求是不同的。\n\nTCP协议可以更好的保证数据传输的准确性，但是传输速度比UDP协议而言要慢一些。TCP协议的特点是可以保证所有数据都能被接收端接收，数据的传输顺序也不会被打乱，而且如有数据损坏则重发受损数据。基于以上功能特点，TCP通常用于电子邮件及文件上传等。\n\nUDP协议并不能保证所有数据都被接收端所接受。一旦出现数据受损的情况，UDP协议将会抛弃受损的数据。这些数据一旦被抛弃将会永久性的消失，发送端不会因为数据受损而重新发送。因此UDP协议远不如TCP协议可靠。\n\n但是既然是这样，为何还有人会选择UDP协议呢？这是因为UDP比TCP速度快。因此UDP协议通常用于网络游戏以及语音聊天或视频聊天应用。\n\n# [应用层（Application Layer）](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/internet-basics/application-layer/)\n\n传输层可以实现设备间的数据传输。但发送端和接收端还需要一种协议来理解这些传输信息的含义。这就引出了即将给您介绍的应用层。\n\n#### **HTTP协议**\n\n应用层中有很多种协议，最常见是HTTP协议。它常被用来传输网页数据。我们这篇教程也将着重介绍HTTP协议。\n\nHTTP协议由**请求**和**响应**构成。也就是说，HTTP的工作模式很像是一问一答。\n\n#### **HTTP请求**\n\n举例来说，当您在浏览器输入www.taichi-maker.com这一网址并按下回车，这时候浏览器会把这一操作转换成一个HTTP请求。\n\n这个HTTP请求主要分为两大部分。一部分是请求头（Request Header）一部分是请求体（Request Body）。对于我们学习物联网知识来说，请求头是我们重点要关注的内容。而请求体的知识已经超越这篇教程的范围，抱歉我就不在这里详述了。\n\n请看以下是简化后的请求头内容：\n\n```http\nGET / HTTP/1.1\nHost: www.taichi-maker.com\n```\n\n在以上的HTTP请求中:\n\n“GET” 是一个**读取**请求。也就是请求网站服务器把网页数据发送过来。\n\n“/” 的作用就是要告诉网站服务器，我这个读取请求的内容是网站根目录下的内容。换句话说，就是请求服务器把网站首页的网页数据发过来。\n\n“HTTP/1.1” 是指请求所采用的HTTP协议版本是1.1。\n\n“Host: www.taichi-maker.com”表示请求的域名是 www.taichi-maker.com 也就是太极创客网站的域名。\n\n以上是HTTP协议的 GET 请求中最关键的内容。在 HTTP 协议中，GET只是诸多请求方法中的一种。以下是HTTP协议中的其它请求方法：\n\n**HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。**\n**HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。**\n\n关于请求方法，我们这里主要介绍的只有GET。其它的请求方法已经超越了我们这个教程的范围，就不在这里继续深入讲下去了。感兴趣的话，您可以通过互联网找到这方面的教程资源。\n\n#### **HTTP响应**\n\n接下来我们再看一看浏览器发送以上HTTP请求后，接收到的服务器HTTP响应。HTTP响应内容也是分为两个部分，一部分是响应头（Response Header）一部分是响应体（Response Body）。其中响应体部分是可选项，也就是说有些HTTP响应只有响应头，而响应体是空的。\n\n我们先来给大家介绍响应头部分。\n\n由于响应头信息量比较大，我们还是选出主要内容给大家讲解。如下所示：\n\n```http\nHTTP/1.1 200 OK\nContent-Type: text/html; charset=UTF-8\n```\n\n“HTTP/1.1”这个信息我们刚刚在HTTP请求部分中介绍过。它的含义就是此HTTP响应所采用的协议版本是1.1。\n\n“200”这个代码可能有些朋友会感觉陌生。但是如果我说起“404”这个数字可能大家会感到更熟悉吧？无论是200也好还是404也好，这些都是HTTP响应状态码。它的作用是以代码的形式表达服务器在接到请求后的状态。“200”代表服务器成功找到了请求的网页资源（这一点大家在后面的OK中也已经体现出来了）。 “404”代表服务器无法找到请求的网页资源。：\n\n以下是常见的服务器状态码：\n\n100~199：成功接收请求，要求客户端继续提交下一次请求才能完成整个处理过程。\n\n200~299：成功接收请求并已完成整个处理过程。常用200\n\n300~399：完成请求，客户需进一步细化请求。\n\n400~499：客户端的请求有错误，常用404和403(403的含义是权限不够，服务器拒绝访问。)\n\n500~599：服务器端出现错误，常用500\n\n**“Content-Type”** 指示响应体的内容是什么类型。这里的响应体内容类型是**“text/htm”**，即网页HTML代码。通过这一行响应头信息，我们的浏览器将会知道，在这一个响应中的响应体部分都是HTML网页代码。于是浏览器将会做好准备，将网页代码翻译成我们人类容易读懂的格式并且呈现在浏览器中。**charset=UTF-8**是字符集。\n\n我们再举一个例子，假设某一个响应头中“Content-Type” 类型是”image/jpeg”。这就意味着该响应体中的信息是一个jpeg格式的图片，那么浏览器也就会按照jpeg的解码方式将图片呈现在我们的面前。\n\n在以上示例中，我们使用互联网浏览器来讲解HTTP的请求和响应。当我们使用NodeMCU来开发物联网项目时，发出HTTP请求的就不再是浏览器而是NodeMCU开发板了。而读取这些响应请求的也将是NodeMCU开发板。那么，究竟如何让NodeMCU发出HTTP请求，而NodeMCU又是如何解读HTTP响应呢？这些都依赖于我们为NodeMCU开发的控制程序。这些内容会在后续的教程里给大家详细介绍。\n\n#### **DNS（Domain Name System/域名系统）**\n\n在之前的教程中，我曾经给大家讲过网络中的所有设备都具有独立的IP地址。这一点对于网站服务器来说也不例外。当我们使用浏览器访问某一个网站时，实际上我们是通过浏览器向网站服务器发送HTTP请求。然而网站服务器的IP地址很难记忆，比如太极创客网站的域名由两个单词组成，taichi是太极，maker是创客。这很好记，但是要想记住太极创客服务器的IP就没那么容易了。因为那是4个毫无规律的数字。\n\n为了解决IP地址不好记这一问题，DNS被派上了用场。\n\n我们可以把DNS看作是一个巨型电话本。电话本中的联系人一栏就是网站的域名，而电话本中的电话号码一栏则是这些网站的IP地址。有了DNS我们就可以使用简单易记的域名来访问网站了。\n\n还是用太极创客网站来举例吧，每当我们在浏览器中输入域名[www.taichi-maker.com](www.taichi-maker.com)并按下回车后，这时浏览器首先会向DNS服务器发送请求，请求的内容大致如下：“亲爱的DNS服务器，我那个明明可以靠脸吃饭却偏偏要学物联网的主人想访问一个域名是[www.taichi-maker.com](www.taichi-maker.com)的网站。麻烦您把这个域名的网站服务器IP地址告诉我好吗？” DNS服务器在接收到这一请求后，会做出以下应答：“亲爱的浏览器，您要的网站服务器ip地址是 12 . 34 . 56 . 78。” 浏览器在接收到这一IP地址后，就开始向这个IP地址所对应的网站服务器正式发出HTTP GET请求了。\n","source":"_posts/学物联网-NodeMCU-二.md","raw":"---\ntitle: 学物联网之ESP8266NodeMCU（二）\nabbrlink: 4e66da29\ndate: 2022-08-31 11:28:49\ntags:\n  - esp8266\n  - 物联网\nkeywords: 互联网知识基础\ndescription: 互联网知识基础\npassword:\nabstract:\nmessage:\ncover: http://qiniu.hanvon.top/blog_cover/taichi-maker-internet-icon_cover.png\ncopyright: false\n---\n\n# [TCP/IP协议簇（TCP/IP Stack）](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/internet-basics/tcp-ip-stack/)\n\n在网络系统中，为了保证通信设备之间能正确地进行通信，必须使用一种双方都能够理解的语言，这种语言被称为“协议”。\n\nTCP/IP协议簇是Internet的基础，也是当今最流行的组网形式。TCP/IP是一组协议的代名词。\n\nTCP/IP协议被划分为4层，分别是：\n\n| 分层名称                 | 包含协议                          |\n| ------------------------ | --------------------------------- |\n| 应用层                   | HTTP, FTP, mDNS, WebSocket, OSC … |\n| 传输层                   | TCP, UDP                          |\n| 网络层                   | IP                                |\n| 链路层（也称网络接口层） | Ethernet, Wi-Fi …                 |\n\n# [链路层（Link Layer）](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/internet-basics/link-layer/)\n\n链路层的主要作用是实现设备之间的物理链接。举例来说，我们日常使用的WiFi就是链路层的一种。\n\n## ESP8266利用WiFi联网时有三种工作模式。\n\n**模式1 – 无线终端模式（Wireless Station）**\n\n如下图所示，ESP8266可通过WiFi连接无线路由器。这与用您的手机通过WiFi连接无线路由器的模式相同。\n\n![ESP8266-NodeMCU无线终端(Wireless Station)工作模式](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/NodeMCU-Station.png)\n\n**模式2 – 接入点模式（Access Point, 也称 AP）**\n\nESP8266也可以建立WiFi网络供其它设备连接。当ESP8266以此模式运行时，我们可以使用手机搜索ESP8266所发出的WiFi网络并进行连接。\n\n![ESP8266-NodeMCU接入点(Access Point)工作模式](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/NodeMCU-Access-Point.png)\n\n**模式3 – 混合模式（Wireless Station + AP）**\n\n混合模式即以上两种模式的混合。\n\n# [网络层（Internet Layer）](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/internet-basics/internet-layer/)\n\n##### 网络层与IP协议\n\n尽管设备可以通过链路层联网，但是光有链路层还无法实现设备之间的数据通讯。因为网络设备没有明确的标识。网络设备无从知晓要向谁传输数据，也无法确定从何处获取数据。\n\n网络层主要作用是通过IP协议为联网设备提供IP地址。\n\n有了IP地址还不够，因为要确保网络中所有设备IP地址不重复，还需要DHCP (Dynamic Host Configuration Protocol) 服务器来实现这一功能。\n\n当网络中所有设备都有了独立的IP地址后，设备之间就可以收发数据了。\n\n# [传输层（Transportation Layer）](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/internet-basics/transportation-layer/)\n\n网络设备通讯时，数据丢失和数据受损的情况经常出现。传输层的\nTCP（Transmission Control Protocol）和UDP（User Datagram Protocol）协议可以用来解决这一问题。通常我们会选择这两种协议中的一种来保证数据传输的准确性。具体选择哪一种协议要看我们使用的是何种网络应用。因为不同的网络应用对于数据的传输要求是不同的。\n\nTCP协议可以更好的保证数据传输的准确性，但是传输速度比UDP协议而言要慢一些。TCP协议的特点是可以保证所有数据都能被接收端接收，数据的传输顺序也不会被打乱，而且如有数据损坏则重发受损数据。基于以上功能特点，TCP通常用于电子邮件及文件上传等。\n\nUDP协议并不能保证所有数据都被接收端所接受。一旦出现数据受损的情况，UDP协议将会抛弃受损的数据。这些数据一旦被抛弃将会永久性的消失，发送端不会因为数据受损而重新发送。因此UDP协议远不如TCP协议可靠。\n\n但是既然是这样，为何还有人会选择UDP协议呢？这是因为UDP比TCP速度快。因此UDP协议通常用于网络游戏以及语音聊天或视频聊天应用。\n\n# [应用层（Application Layer）](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/internet-basics/application-layer/)\n\n传输层可以实现设备间的数据传输。但发送端和接收端还需要一种协议来理解这些传输信息的含义。这就引出了即将给您介绍的应用层。\n\n#### **HTTP协议**\n\n应用层中有很多种协议，最常见是HTTP协议。它常被用来传输网页数据。我们这篇教程也将着重介绍HTTP协议。\n\nHTTP协议由**请求**和**响应**构成。也就是说，HTTP的工作模式很像是一问一答。\n\n#### **HTTP请求**\n\n举例来说，当您在浏览器输入www.taichi-maker.com这一网址并按下回车，这时候浏览器会把这一操作转换成一个HTTP请求。\n\n这个HTTP请求主要分为两大部分。一部分是请求头（Request Header）一部分是请求体（Request Body）。对于我们学习物联网知识来说，请求头是我们重点要关注的内容。而请求体的知识已经超越这篇教程的范围，抱歉我就不在这里详述了。\n\n请看以下是简化后的请求头内容：\n\n```http\nGET / HTTP/1.1\nHost: www.taichi-maker.com\n```\n\n在以上的HTTP请求中:\n\n“GET” 是一个**读取**请求。也就是请求网站服务器把网页数据发送过来。\n\n“/” 的作用就是要告诉网站服务器，我这个读取请求的内容是网站根目录下的内容。换句话说，就是请求服务器把网站首页的网页数据发过来。\n\n“HTTP/1.1” 是指请求所采用的HTTP协议版本是1.1。\n\n“Host: www.taichi-maker.com”表示请求的域名是 www.taichi-maker.com 也就是太极创客网站的域名。\n\n以上是HTTP协议的 GET 请求中最关键的内容。在 HTTP 协议中，GET只是诸多请求方法中的一种。以下是HTTP协议中的其它请求方法：\n\n**HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。**\n**HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。**\n\n关于请求方法，我们这里主要介绍的只有GET。其它的请求方法已经超越了我们这个教程的范围，就不在这里继续深入讲下去了。感兴趣的话，您可以通过互联网找到这方面的教程资源。\n\n#### **HTTP响应**\n\n接下来我们再看一看浏览器发送以上HTTP请求后，接收到的服务器HTTP响应。HTTP响应内容也是分为两个部分，一部分是响应头（Response Header）一部分是响应体（Response Body）。其中响应体部分是可选项，也就是说有些HTTP响应只有响应头，而响应体是空的。\n\n我们先来给大家介绍响应头部分。\n\n由于响应头信息量比较大，我们还是选出主要内容给大家讲解。如下所示：\n\n```http\nHTTP/1.1 200 OK\nContent-Type: text/html; charset=UTF-8\n```\n\n“HTTP/1.1”这个信息我们刚刚在HTTP请求部分中介绍过。它的含义就是此HTTP响应所采用的协议版本是1.1。\n\n“200”这个代码可能有些朋友会感觉陌生。但是如果我说起“404”这个数字可能大家会感到更熟悉吧？无论是200也好还是404也好，这些都是HTTP响应状态码。它的作用是以代码的形式表达服务器在接到请求后的状态。“200”代表服务器成功找到了请求的网页资源（这一点大家在后面的OK中也已经体现出来了）。 “404”代表服务器无法找到请求的网页资源。：\n\n以下是常见的服务器状态码：\n\n100~199：成功接收请求，要求客户端继续提交下一次请求才能完成整个处理过程。\n\n200~299：成功接收请求并已完成整个处理过程。常用200\n\n300~399：完成请求，客户需进一步细化请求。\n\n400~499：客户端的请求有错误，常用404和403(403的含义是权限不够，服务器拒绝访问。)\n\n500~599：服务器端出现错误，常用500\n\n**“Content-Type”** 指示响应体的内容是什么类型。这里的响应体内容类型是**“text/htm”**，即网页HTML代码。通过这一行响应头信息，我们的浏览器将会知道，在这一个响应中的响应体部分都是HTML网页代码。于是浏览器将会做好准备，将网页代码翻译成我们人类容易读懂的格式并且呈现在浏览器中。**charset=UTF-8**是字符集。\n\n我们再举一个例子，假设某一个响应头中“Content-Type” 类型是”image/jpeg”。这就意味着该响应体中的信息是一个jpeg格式的图片，那么浏览器也就会按照jpeg的解码方式将图片呈现在我们的面前。\n\n在以上示例中，我们使用互联网浏览器来讲解HTTP的请求和响应。当我们使用NodeMCU来开发物联网项目时，发出HTTP请求的就不再是浏览器而是NodeMCU开发板了。而读取这些响应请求的也将是NodeMCU开发板。那么，究竟如何让NodeMCU发出HTTP请求，而NodeMCU又是如何解读HTTP响应呢？这些都依赖于我们为NodeMCU开发的控制程序。这些内容会在后续的教程里给大家详细介绍。\n\n#### **DNS（Domain Name System/域名系统）**\n\n在之前的教程中，我曾经给大家讲过网络中的所有设备都具有独立的IP地址。这一点对于网站服务器来说也不例外。当我们使用浏览器访问某一个网站时，实际上我们是通过浏览器向网站服务器发送HTTP请求。然而网站服务器的IP地址很难记忆，比如太极创客网站的域名由两个单词组成，taichi是太极，maker是创客。这很好记，但是要想记住太极创客服务器的IP就没那么容易了。因为那是4个毫无规律的数字。\n\n为了解决IP地址不好记这一问题，DNS被派上了用场。\n\n我们可以把DNS看作是一个巨型电话本。电话本中的联系人一栏就是网站的域名，而电话本中的电话号码一栏则是这些网站的IP地址。有了DNS我们就可以使用简单易记的域名来访问网站了。\n\n还是用太极创客网站来举例吧，每当我们在浏览器中输入域名[www.taichi-maker.com](www.taichi-maker.com)并按下回车后，这时浏览器首先会向DNS服务器发送请求，请求的内容大致如下：“亲爱的DNS服务器，我那个明明可以靠脸吃饭却偏偏要学物联网的主人想访问一个域名是[www.taichi-maker.com](www.taichi-maker.com)的网站。麻烦您把这个域名的网站服务器IP地址告诉我好吗？” DNS服务器在接收到这一请求后，会做出以下应答：“亲爱的浏览器，您要的网站服务器ip地址是 12 . 34 . 56 . 78。” 浏览器在接收到这一IP地址后，就开始向这个IP地址所对应的网站服务器正式发出HTTP GET请求了。\n","slug":"学物联网-NodeMCU-二","published":1,"updated":"2023-11-01T03:38:41.702Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clofj2tc5000zoot3bxqlen9v","content":"<h1 id=\"TCP-x2F-IP协议簇（TCP-x2F-IP-Stack）\"><a href=\"#TCP-x2F-IP协议簇（TCP-x2F-IP-Stack）\" class=\"headerlink\" title=\"TCP&#x2F;IP协议簇（TCP&#x2F;IP Stack）\"></a><a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/internet-basics/tcp-ip-stack/\">TCP&#x2F;IP协议簇（TCP&#x2F;IP Stack）</a></h1><p>在网络系统中，为了保证通信设备之间能正确地进行通信，必须使用一种双方都能够理解的语言，这种语言被称为“协议”。</p>\n<p>TCP&#x2F;IP协议簇是Internet的基础，也是当今最流行的组网形式。TCP&#x2F;IP是一组协议的代名词。</p>\n<p>TCP&#x2F;IP协议被划分为4层，分别是：</p>\n<table>\n<thead>\n<tr>\n<th>分层名称</th>\n<th>包含协议</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>应用层</td>\n<td>HTTP, FTP, mDNS, WebSocket, OSC …</td>\n</tr>\n<tr>\n<td>传输层</td>\n<td>TCP, UDP</td>\n</tr>\n<tr>\n<td>网络层</td>\n<td>IP</td>\n</tr>\n<tr>\n<td>链路层（也称网络接口层）</td>\n<td>Ethernet, Wi-Fi …</td>\n</tr>\n</tbody></table>\n<h1 id=\"链路层（Link-Layer）\"><a href=\"#链路层（Link-Layer）\" class=\"headerlink\" title=\"链路层（Link Layer）\"></a><a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/internet-basics/link-layer/\">链路层（Link Layer）</a></h1><p>链路层的主要作用是实现设备之间的物理链接。举例来说，我们日常使用的WiFi就是链路层的一种。</p>\n<h2 id=\"ESP8266利用WiFi联网时有三种工作模式。\"><a href=\"#ESP8266利用WiFi联网时有三种工作模式。\" class=\"headerlink\" title=\"ESP8266利用WiFi联网时有三种工作模式。\"></a>ESP8266利用WiFi联网时有三种工作模式。</h2><p><strong>模式1 – 无线终端模式（Wireless Station）</strong></p>\n<p>如下图所示，ESP8266可通过WiFi连接无线路由器。这与用您的手机通过WiFi连接无线路由器的模式相同。</p>\n<p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/NodeMCU-Station.png\" alt=\"ESP8266-NodeMCU无线终端(Wireless Station)工作模式\"></p>\n<p><strong>模式2 – 接入点模式（Access Point, 也称 AP）</strong></p>\n<p>ESP8266也可以建立WiFi网络供其它设备连接。当ESP8266以此模式运行时，我们可以使用手机搜索ESP8266所发出的WiFi网络并进行连接。</p>\n<p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/NodeMCU-Access-Point.png\" alt=\"ESP8266-NodeMCU接入点(Access Point)工作模式\"></p>\n<p><strong>模式3 – 混合模式（Wireless Station + AP）</strong></p>\n<p>混合模式即以上两种模式的混合。</p>\n<h1 id=\"网络层（Internet-Layer）\"><a href=\"#网络层（Internet-Layer）\" class=\"headerlink\" title=\"网络层（Internet Layer）\"></a><a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/internet-basics/internet-layer/\">网络层（Internet Layer）</a></h1><h5 id=\"网络层与IP协议\"><a href=\"#网络层与IP协议\" class=\"headerlink\" title=\"网络层与IP协议\"></a>网络层与IP协议</h5><p>尽管设备可以通过链路层联网，但是光有链路层还无法实现设备之间的数据通讯。因为网络设备没有明确的标识。网络设备无从知晓要向谁传输数据，也无法确定从何处获取数据。</p>\n<p>网络层主要作用是通过IP协议为联网设备提供IP地址。</p>\n<p>有了IP地址还不够，因为要确保网络中所有设备IP地址不重复，还需要DHCP (Dynamic Host Configuration Protocol) 服务器来实现这一功能。</p>\n<p>当网络中所有设备都有了独立的IP地址后，设备之间就可以收发数据了。</p>\n<h1 id=\"传输层（Transportation-Layer）\"><a href=\"#传输层（Transportation-Layer）\" class=\"headerlink\" title=\"传输层（Transportation Layer）\"></a><a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/internet-basics/transportation-layer/\">传输层（Transportation Layer）</a></h1><p>网络设备通讯时，数据丢失和数据受损的情况经常出现。传输层的<br>TCP（Transmission Control Protocol）和UDP（User Datagram Protocol）协议可以用来解决这一问题。通常我们会选择这两种协议中的一种来保证数据传输的准确性。具体选择哪一种协议要看我们使用的是何种网络应用。因为不同的网络应用对于数据的传输要求是不同的。</p>\n<p>TCP协议可以更好的保证数据传输的准确性，但是传输速度比UDP协议而言要慢一些。TCP协议的特点是可以保证所有数据都能被接收端接收，数据的传输顺序也不会被打乱，而且如有数据损坏则重发受损数据。基于以上功能特点，TCP通常用于电子邮件及文件上传等。</p>\n<p>UDP协议并不能保证所有数据都被接收端所接受。一旦出现数据受损的情况，UDP协议将会抛弃受损的数据。这些数据一旦被抛弃将会永久性的消失，发送端不会因为数据受损而重新发送。因此UDP协议远不如TCP协议可靠。</p>\n<p>但是既然是这样，为何还有人会选择UDP协议呢？这是因为UDP比TCP速度快。因此UDP协议通常用于网络游戏以及语音聊天或视频聊天应用。</p>\n<h1 id=\"应用层（Application-Layer）\"><a href=\"#应用层（Application-Layer）\" class=\"headerlink\" title=\"应用层（Application Layer）\"></a><a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/internet-basics/application-layer/\">应用层（Application Layer）</a></h1><p>传输层可以实现设备间的数据传输。但发送端和接收端还需要一种协议来理解这些传输信息的含义。这就引出了即将给您介绍的应用层。</p>\n<h4 id=\"HTTP协议\"><a href=\"#HTTP协议\" class=\"headerlink\" title=\"HTTP协议\"></a><strong>HTTP协议</strong></h4><p>应用层中有很多种协议，最常见是HTTP协议。它常被用来传输网页数据。我们这篇教程也将着重介绍HTTP协议。</p>\n<p>HTTP协议由<strong>请求</strong>和<strong>响应</strong>构成。也就是说，HTTP的工作模式很像是一问一答。</p>\n<h4 id=\"HTTP请求\"><a href=\"#HTTP请求\" class=\"headerlink\" title=\"HTTP请求\"></a><strong>HTTP请求</strong></h4><p>举例来说，当您在浏览器输入<a href=\"http://www.taichi-maker.com这一网址并按下回车,这时候浏览器会把这一操作转换成一个http请求./\">www.taichi-maker.com这一网址并按下回车，这时候浏览器会把这一操作转换成一个HTTP请求。</a></p>\n<p>这个HTTP请求主要分为两大部分。一部分是请求头（Request Header）一部分是请求体（Request Body）。对于我们学习物联网知识来说，请求头是我们重点要关注的内容。而请求体的知识已经超越这篇教程的范围，抱歉我就不在这里详述了。</p>\n<p>请看以下是简化后的请求头内容：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GET</span> <span class=\"string\">/</span> <span class=\"meta\">HTTP/1.1</span></span><br><span class=\"line\"><span class=\"attribute\">Host</span><span class=\"punctuation\">: </span>www.taichi-maker.com</span><br></pre></td></tr></table></figure>\n\n<p>在以上的HTTP请求中:</p>\n<p>“GET” 是一个<strong>读取</strong>请求。也就是请求网站服务器把网页数据发送过来。</p>\n<p>“&#x2F;” 的作用就是要告诉网站服务器，我这个读取请求的内容是网站根目录下的内容。换句话说，就是请求服务器把网站首页的网页数据发过来。</p>\n<p>“HTTP&#x2F;1.1” 是指请求所采用的HTTP协议版本是1.1。</p>\n<p>“Host: <a href=\"http://www.taichi-maker.com”表示请求的域名是/\">www.taichi-maker.com”表示请求的域名是</a> <a href=\"http://www.taichi-maker.com/\">www.taichi-maker.com</a> 也就是太极创客网站的域名。</p>\n<p>以上是HTTP协议的 GET 请求中最关键的内容。在 HTTP 协议中，GET只是诸多请求方法中的一种。以下是HTTP协议中的其它请求方法：</p>\n<p><strong>HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。</strong><br><strong>HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。</strong></p>\n<p>关于请求方法，我们这里主要介绍的只有GET。其它的请求方法已经超越了我们这个教程的范围，就不在这里继续深入讲下去了。感兴趣的话，您可以通过互联网找到这方面的教程资源。</p>\n<h4 id=\"HTTP响应\"><a href=\"#HTTP响应\" class=\"headerlink\" title=\"HTTP响应\"></a><strong>HTTP响应</strong></h4><p>接下来我们再看一看浏览器发送以上HTTP请求后，接收到的服务器HTTP响应。HTTP响应内容也是分为两个部分，一部分是响应头（Response Header）一部分是响应体（Response Body）。其中响应体部分是可选项，也就是说有些HTTP响应只有响应头，而响应体是空的。</p>\n<p>我们先来给大家介绍响应头部分。</p>\n<p>由于响应头信息量比较大，我们还是选出主要内容给大家讲解。如下所示：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">HTTP/1.1</span> <span class=\"number\">200</span> OK</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span><span class=\"punctuation\">: </span>text/html; charset=UTF-8</span><br></pre></td></tr></table></figure>\n\n<p>“HTTP&#x2F;1.1”这个信息我们刚刚在HTTP请求部分中介绍过。它的含义就是此HTTP响应所采用的协议版本是1.1。</p>\n<p>“200”这个代码可能有些朋友会感觉陌生。但是如果我说起“404”这个数字可能大家会感到更熟悉吧？无论是200也好还是404也好，这些都是HTTP响应状态码。它的作用是以代码的形式表达服务器在接到请求后的状态。“200”代表服务器成功找到了请求的网页资源（这一点大家在后面的OK中也已经体现出来了）。 “404”代表服务器无法找到请求的网页资源。：</p>\n<p>以下是常见的服务器状态码：</p>\n<p>100~199：成功接收请求，要求客户端继续提交下一次请求才能完成整个处理过程。</p>\n<p>200~299：成功接收请求并已完成整个处理过程。常用200</p>\n<p>300~399：完成请求，客户需进一步细化请求。</p>\n<p>400~499：客户端的请求有错误，常用404和403(403的含义是权限不够，服务器拒绝访问。)</p>\n<p>500~599：服务器端出现错误，常用500</p>\n<p><strong>“Content-Type”</strong> 指示响应体的内容是什么类型。这里的响应体内容类型是<strong>“text&#x2F;htm”</strong>，即网页HTML代码。通过这一行响应头信息，我们的浏览器将会知道，在这一个响应中的响应体部分都是HTML网页代码。于是浏览器将会做好准备，将网页代码翻译成我们人类容易读懂的格式并且呈现在浏览器中。<strong>charset&#x3D;UTF-8</strong>是字符集。</p>\n<p>我们再举一个例子，假设某一个响应头中“Content-Type” 类型是”image&#x2F;jpeg”。这就意味着该响应体中的信息是一个jpeg格式的图片，那么浏览器也就会按照jpeg的解码方式将图片呈现在我们的面前。</p>\n<p>在以上示例中，我们使用互联网浏览器来讲解HTTP的请求和响应。当我们使用NodeMCU来开发物联网项目时，发出HTTP请求的就不再是浏览器而是NodeMCU开发板了。而读取这些响应请求的也将是NodeMCU开发板。那么，究竟如何让NodeMCU发出HTTP请求，而NodeMCU又是如何解读HTTP响应呢？这些都依赖于我们为NodeMCU开发的控制程序。这些内容会在后续的教程里给大家详细介绍。</p>\n<h4 id=\"DNS（Domain-Name-System-x2F-域名系统）\"><a href=\"#DNS（Domain-Name-System-x2F-域名系统）\" class=\"headerlink\" title=\"DNS（Domain Name System&#x2F;域名系统）\"></a><strong>DNS（Domain Name System&#x2F;域名系统）</strong></h4><p>在之前的教程中，我曾经给大家讲过网络中的所有设备都具有独立的IP地址。这一点对于网站服务器来说也不例外。当我们使用浏览器访问某一个网站时，实际上我们是通过浏览器向网站服务器发送HTTP请求。然而网站服务器的IP地址很难记忆，比如太极创客网站的域名由两个单词组成，taichi是太极，maker是创客。这很好记，但是要想记住太极创客服务器的IP就没那么容易了。因为那是4个毫无规律的数字。</p>\n<p>为了解决IP地址不好记这一问题，DNS被派上了用场。</p>\n<p>我们可以把DNS看作是一个巨型电话本。电话本中的联系人一栏就是网站的域名，而电话本中的电话号码一栏则是这些网站的IP地址。有了DNS我们就可以使用简单易记的域名来访问网站了。</p>\n<p>还是用太极创客网站来举例吧，每当我们在浏览器中输入域名<a href=\"www.taichi-maker.com\">www.taichi-maker.com</a>并按下回车后，这时浏览器首先会向DNS服务器发送请求，请求的内容大致如下：“亲爱的DNS服务器，我那个明明可以靠脸吃饭却偏偏要学物联网的主人想访问一个域名是<a href=\"www.taichi-maker.com\">www.taichi-maker.com</a>的网站。麻烦您把这个域名的网站服务器IP地址告诉我好吗？” DNS服务器在接收到这一请求后，会做出以下应答：“亲爱的浏览器，您要的网站服务器ip地址是 12 . 34 . 56 . 78。” 浏览器在接收到这一IP地址后，就开始向这个IP地址所对应的网站服务器正式发出HTTP GET请求了。</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"安装文, 档快速开始","link":"https://butterfly.js.org/posts/21cfbf15/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"Butterfly主题 帮助文档"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"TCP-x2F-IP协议簇（TCP-x2F-IP-Stack）\"><a href=\"#TCP-x2F-IP协议簇（TCP-x2F-IP-Stack）\" class=\"headerlink\" title=\"TCP&#x2F;IP协议簇（TCP&#x2F;IP Stack）\"></a><a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/internet-basics/tcp-ip-stack/\">TCP&#x2F;IP协议簇（TCP&#x2F;IP Stack）</a></h1><p>在网络系统中，为了保证通信设备之间能正确地进行通信，必须使用一种双方都能够理解的语言，这种语言被称为“协议”。</p>\n<p>TCP&#x2F;IP协议簇是Internet的基础，也是当今最流行的组网形式。TCP&#x2F;IP是一组协议的代名词。</p>\n<p>TCP&#x2F;IP协议被划分为4层，分别是：</p>\n<table>\n<thead>\n<tr>\n<th>分层名称</th>\n<th>包含协议</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>应用层</td>\n<td>HTTP, FTP, mDNS, WebSocket, OSC …</td>\n</tr>\n<tr>\n<td>传输层</td>\n<td>TCP, UDP</td>\n</tr>\n<tr>\n<td>网络层</td>\n<td>IP</td>\n</tr>\n<tr>\n<td>链路层（也称网络接口层）</td>\n<td>Ethernet, Wi-Fi …</td>\n</tr>\n</tbody></table>\n<h1 id=\"链路层（Link-Layer）\"><a href=\"#链路层（Link-Layer）\" class=\"headerlink\" title=\"链路层（Link Layer）\"></a><a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/internet-basics/link-layer/\">链路层（Link Layer）</a></h1><p>链路层的主要作用是实现设备之间的物理链接。举例来说，我们日常使用的WiFi就是链路层的一种。</p>\n<h2 id=\"ESP8266利用WiFi联网时有三种工作模式。\"><a href=\"#ESP8266利用WiFi联网时有三种工作模式。\" class=\"headerlink\" title=\"ESP8266利用WiFi联网时有三种工作模式。\"></a>ESP8266利用WiFi联网时有三种工作模式。</h2><p><strong>模式1 – 无线终端模式（Wireless Station）</strong></p>\n<p>如下图所示，ESP8266可通过WiFi连接无线路由器。这与用您的手机通过WiFi连接无线路由器的模式相同。</p>\n<p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/NodeMCU-Station.png\" alt=\"ESP8266-NodeMCU无线终端(Wireless Station)工作模式\"></p>\n<p><strong>模式2 – 接入点模式（Access Point, 也称 AP）</strong></p>\n<p>ESP8266也可以建立WiFi网络供其它设备连接。当ESP8266以此模式运行时，我们可以使用手机搜索ESP8266所发出的WiFi网络并进行连接。</p>\n<p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/NodeMCU-Access-Point.png\" alt=\"ESP8266-NodeMCU接入点(Access Point)工作模式\"></p>\n<p><strong>模式3 – 混合模式（Wireless Station + AP）</strong></p>\n<p>混合模式即以上两种模式的混合。</p>\n<h1 id=\"网络层（Internet-Layer）\"><a href=\"#网络层（Internet-Layer）\" class=\"headerlink\" title=\"网络层（Internet Layer）\"></a><a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/internet-basics/internet-layer/\">网络层（Internet Layer）</a></h1><h5 id=\"网络层与IP协议\"><a href=\"#网络层与IP协议\" class=\"headerlink\" title=\"网络层与IP协议\"></a>网络层与IP协议</h5><p>尽管设备可以通过链路层联网，但是光有链路层还无法实现设备之间的数据通讯。因为网络设备没有明确的标识。网络设备无从知晓要向谁传输数据，也无法确定从何处获取数据。</p>\n<p>网络层主要作用是通过IP协议为联网设备提供IP地址。</p>\n<p>有了IP地址还不够，因为要确保网络中所有设备IP地址不重复，还需要DHCP (Dynamic Host Configuration Protocol) 服务器来实现这一功能。</p>\n<p>当网络中所有设备都有了独立的IP地址后，设备之间就可以收发数据了。</p>\n<h1 id=\"传输层（Transportation-Layer）\"><a href=\"#传输层（Transportation-Layer）\" class=\"headerlink\" title=\"传输层（Transportation Layer）\"></a><a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/internet-basics/transportation-layer/\">传输层（Transportation Layer）</a></h1><p>网络设备通讯时，数据丢失和数据受损的情况经常出现。传输层的<br>TCP（Transmission Control Protocol）和UDP（User Datagram Protocol）协议可以用来解决这一问题。通常我们会选择这两种协议中的一种来保证数据传输的准确性。具体选择哪一种协议要看我们使用的是何种网络应用。因为不同的网络应用对于数据的传输要求是不同的。</p>\n<p>TCP协议可以更好的保证数据传输的准确性，但是传输速度比UDP协议而言要慢一些。TCP协议的特点是可以保证所有数据都能被接收端接收，数据的传输顺序也不会被打乱，而且如有数据损坏则重发受损数据。基于以上功能特点，TCP通常用于电子邮件及文件上传等。</p>\n<p>UDP协议并不能保证所有数据都被接收端所接受。一旦出现数据受损的情况，UDP协议将会抛弃受损的数据。这些数据一旦被抛弃将会永久性的消失，发送端不会因为数据受损而重新发送。因此UDP协议远不如TCP协议可靠。</p>\n<p>但是既然是这样，为何还有人会选择UDP协议呢？这是因为UDP比TCP速度快。因此UDP协议通常用于网络游戏以及语音聊天或视频聊天应用。</p>\n<h1 id=\"应用层（Application-Layer）\"><a href=\"#应用层（Application-Layer）\" class=\"headerlink\" title=\"应用层（Application Layer）\"></a><a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/internet-basics/application-layer/\">应用层（Application Layer）</a></h1><p>传输层可以实现设备间的数据传输。但发送端和接收端还需要一种协议来理解这些传输信息的含义。这就引出了即将给您介绍的应用层。</p>\n<h4 id=\"HTTP协议\"><a href=\"#HTTP协议\" class=\"headerlink\" title=\"HTTP协议\"></a><strong>HTTP协议</strong></h4><p>应用层中有很多种协议，最常见是HTTP协议。它常被用来传输网页数据。我们这篇教程也将着重介绍HTTP协议。</p>\n<p>HTTP协议由<strong>请求</strong>和<strong>响应</strong>构成。也就是说，HTTP的工作模式很像是一问一答。</p>\n<h4 id=\"HTTP请求\"><a href=\"#HTTP请求\" class=\"headerlink\" title=\"HTTP请求\"></a><strong>HTTP请求</strong></h4><p>举例来说，当您在浏览器输入<a href=\"http://www.taichi-maker.com这一网址并按下回车,这时候浏览器会把这一操作转换成一个http请求./\">www.taichi-maker.com这一网址并按下回车，这时候浏览器会把这一操作转换成一个HTTP请求。</a></p>\n<p>这个HTTP请求主要分为两大部分。一部分是请求头（Request Header）一部分是请求体（Request Body）。对于我们学习物联网知识来说，请求头是我们重点要关注的内容。而请求体的知识已经超越这篇教程的范围，抱歉我就不在这里详述了。</p>\n<p>请看以下是简化后的请求头内容：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GET</span> <span class=\"string\">/</span> <span class=\"meta\">HTTP/1.1</span></span><br><span class=\"line\"><span class=\"attribute\">Host</span><span class=\"punctuation\">: </span>www.taichi-maker.com</span><br></pre></td></tr></table></figure>\n\n<p>在以上的HTTP请求中:</p>\n<p>“GET” 是一个<strong>读取</strong>请求。也就是请求网站服务器把网页数据发送过来。</p>\n<p>“&#x2F;” 的作用就是要告诉网站服务器，我这个读取请求的内容是网站根目录下的内容。换句话说，就是请求服务器把网站首页的网页数据发过来。</p>\n<p>“HTTP&#x2F;1.1” 是指请求所采用的HTTP协议版本是1.1。</p>\n<p>“Host: <a href=\"http://www.taichi-maker.com”表示请求的域名是/\">www.taichi-maker.com”表示请求的域名是</a> <a href=\"http://www.taichi-maker.com/\">www.taichi-maker.com</a> 也就是太极创客网站的域名。</p>\n<p>以上是HTTP协议的 GET 请求中最关键的内容。在 HTTP 协议中，GET只是诸多请求方法中的一种。以下是HTTP协议中的其它请求方法：</p>\n<p><strong>HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。</strong><br><strong>HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。</strong></p>\n<p>关于请求方法，我们这里主要介绍的只有GET。其它的请求方法已经超越了我们这个教程的范围，就不在这里继续深入讲下去了。感兴趣的话，您可以通过互联网找到这方面的教程资源。</p>\n<h4 id=\"HTTP响应\"><a href=\"#HTTP响应\" class=\"headerlink\" title=\"HTTP响应\"></a><strong>HTTP响应</strong></h4><p>接下来我们再看一看浏览器发送以上HTTP请求后，接收到的服务器HTTP响应。HTTP响应内容也是分为两个部分，一部分是响应头（Response Header）一部分是响应体（Response Body）。其中响应体部分是可选项，也就是说有些HTTP响应只有响应头，而响应体是空的。</p>\n<p>我们先来给大家介绍响应头部分。</p>\n<p>由于响应头信息量比较大，我们还是选出主要内容给大家讲解。如下所示：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">HTTP/1.1</span> <span class=\"number\">200</span> OK</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span><span class=\"punctuation\">: </span>text/html; charset=UTF-8</span><br></pre></td></tr></table></figure>\n\n<p>“HTTP&#x2F;1.1”这个信息我们刚刚在HTTP请求部分中介绍过。它的含义就是此HTTP响应所采用的协议版本是1.1。</p>\n<p>“200”这个代码可能有些朋友会感觉陌生。但是如果我说起“404”这个数字可能大家会感到更熟悉吧？无论是200也好还是404也好，这些都是HTTP响应状态码。它的作用是以代码的形式表达服务器在接到请求后的状态。“200”代表服务器成功找到了请求的网页资源（这一点大家在后面的OK中也已经体现出来了）。 “404”代表服务器无法找到请求的网页资源。：</p>\n<p>以下是常见的服务器状态码：</p>\n<p>100~199：成功接收请求，要求客户端继续提交下一次请求才能完成整个处理过程。</p>\n<p>200~299：成功接收请求并已完成整个处理过程。常用200</p>\n<p>300~399：完成请求，客户需进一步细化请求。</p>\n<p>400~499：客户端的请求有错误，常用404和403(403的含义是权限不够，服务器拒绝访问。)</p>\n<p>500~599：服务器端出现错误，常用500</p>\n<p><strong>“Content-Type”</strong> 指示响应体的内容是什么类型。这里的响应体内容类型是<strong>“text&#x2F;htm”</strong>，即网页HTML代码。通过这一行响应头信息，我们的浏览器将会知道，在这一个响应中的响应体部分都是HTML网页代码。于是浏览器将会做好准备，将网页代码翻译成我们人类容易读懂的格式并且呈现在浏览器中。<strong>charset&#x3D;UTF-8</strong>是字符集。</p>\n<p>我们再举一个例子，假设某一个响应头中“Content-Type” 类型是”image&#x2F;jpeg”。这就意味着该响应体中的信息是一个jpeg格式的图片，那么浏览器也就会按照jpeg的解码方式将图片呈现在我们的面前。</p>\n<p>在以上示例中，我们使用互联网浏览器来讲解HTTP的请求和响应。当我们使用NodeMCU来开发物联网项目时，发出HTTP请求的就不再是浏览器而是NodeMCU开发板了。而读取这些响应请求的也将是NodeMCU开发板。那么，究竟如何让NodeMCU发出HTTP请求，而NodeMCU又是如何解读HTTP响应呢？这些都依赖于我们为NodeMCU开发的控制程序。这些内容会在后续的教程里给大家详细介绍。</p>\n<h4 id=\"DNS（Domain-Name-System-x2F-域名系统）\"><a href=\"#DNS（Domain-Name-System-x2F-域名系统）\" class=\"headerlink\" title=\"DNS（Domain Name System&#x2F;域名系统）\"></a><strong>DNS（Domain Name System&#x2F;域名系统）</strong></h4><p>在之前的教程中，我曾经给大家讲过网络中的所有设备都具有独立的IP地址。这一点对于网站服务器来说也不例外。当我们使用浏览器访问某一个网站时，实际上我们是通过浏览器向网站服务器发送HTTP请求。然而网站服务器的IP地址很难记忆，比如太极创客网站的域名由两个单词组成，taichi是太极，maker是创客。这很好记，但是要想记住太极创客服务器的IP就没那么容易了。因为那是4个毫无规律的数字。</p>\n<p>为了解决IP地址不好记这一问题，DNS被派上了用场。</p>\n<p>我们可以把DNS看作是一个巨型电话本。电话本中的联系人一栏就是网站的域名，而电话本中的电话号码一栏则是这些网站的IP地址。有了DNS我们就可以使用简单易记的域名来访问网站了。</p>\n<p>还是用太极创客网站来举例吧，每当我们在浏览器中输入域名<a href=\"www.taichi-maker.com\">www.taichi-maker.com</a>并按下回车后，这时浏览器首先会向DNS服务器发送请求，请求的内容大致如下：“亲爱的DNS服务器，我那个明明可以靠脸吃饭却偏偏要学物联网的主人想访问一个域名是<a href=\"www.taichi-maker.com\">www.taichi-maker.com</a>的网站。麻烦您把这个域名的网站服务器IP地址告诉我好吗？” DNS服务器在接收到这一请求后，会做出以下应答：“亲爱的浏览器，您要的网站服务器ip地址是 12 . 34 . 56 . 78。” 浏览器在接收到这一IP地址后，就开始向这个IP地址所对应的网站服务器正式发出HTTP GET请求了。</p>\n"},{"title":"学物联网之ESP8266NodeMCU（五）","description":"ESP8266 NodeMCU 闪存文件系统（SPIFFS）","copyright":false,"abbrlink":"e2f4da2","date":"2022-09-02T07:23:18.000Z","keywords":null,"password":null,"abstract":null,"message":null,"cover":"http://qiniu.hanvon.top/blog_cover/esp8266-nodemcu-flash-file-system_cover.png","_content":"\n# 一、[ESP8266闪存文件系统基本操作](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-operation/)\n\n当我们上传程序给ESP8266时，我们的程序具体存放在什么地方呢？\n\n每一个ESP8266都配有一个闪存，这个闪存很像是一个小硬盘，我们上传的文件就被存放在这个闪存里。这个闪存的全称是Serial Peripheral Interface Flash File System（SPIFFS）。\n\n除了可以存放上传的程序以外，我们还可以将网页文件或者系统配置文件存放在ESP8266的闪存中。在这节课里，我们将学习如何利用程序对闪存文件系统（SPIFFS）进行文件读取和修改。\n\n## 1、通过程序向闪存文件系统写入信息\n\n```c\n/**********************************************************************\n项目名称/Project           : 零基础入门学用物联网\n程序名称/Program name      : esp8266-flash-write\n团队/Team                 : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)\n\n\n程序目的/Purpose           : 此程序用于演示如何向NodeMCU的SPIFFS中建立名为\n                            notes.txt的文件，程序还将向该文件写入信息。\n-----------------------------------------------------------------------\n函数说明：\nSPIFFS.open(file_name, \"w\"); \n以上函数有两个参数：\n第一个参数是被操作的文件名称，本示例中该文件为/notes.txt\n第二个参数\"w\" 代表写入文件信息。（如需了解如何读取信息，请参阅示例程序esp8266-flash-read）\n***********************************************************************/\n \n \n#include <FS.h>  //★★★\n \nString file_name = \"/taichi-maker/notes.txt\"; //被读取的文件位置和名称★★★\n \nvoid setup() {\n  Serial.begin(9600);\n  Serial.println(\"\");\n  \n  Serial.println(\"SPIFFS format start\");\n  SPIFFS.format();    \t\t\t// 格式化SPIFFS★★★\n  Serial.println(\"SPIFFS format finish\");\n  \n  if(SPIFFS.begin()){ \t\t\t// 启动SPIFFS★★★\n    Serial.println(\"SPIFFS Started.\");\n  } else {\n    Serial.println(\"SPIFFS Failed to Start.\");\n  }\n  \n  File dataFile = SPIFFS.open(file_name, \"w\");// 建立File对象用于向SPIFFS中的file对象（即/notes.txt）写入信息★★★\n  dataFile.println(\"Hello IOT World.\");       // 向dataFile写入字符串信息★★★\n  dataFile.close();                           // 完成文件写入后关闭文件★★★\n  Serial.println(\"Finished Writing data to SPIFFS\");\n}\n \nvoid loop() {\n}\n```\n\n在使用SPIFFS存储文件以前，我们必须使用`#include \"FS.h\"`,如以上程序第18行所示。\n\n程序第20行，我们建立了一个字符串变量。该变量用于存储文件位置和文件名。其中`/`代表根目录。`/taichi-maker/`代表根目录下的`taichi-maker`目录。`notes.txt`代表着文件名称。\n\n程序第27行`SPIFFS.format();`是对闪存文件系统进行格式化。这很想是我们对u盘进行格式化的操作。您无需每次使用闪存文件系统都对它进行格式化操作。这里仅仅是为了演示如何使用`SPIFFS.format();`。\n\n程序第30行，`SPIFFS.begin()`用于启动闪存文件系统。在每次使用闪存文件系统以前都需要执行这一操作。如果闪存文件系统成功启动，该函数的返回值为布尔型，如果成功启动闪存文件形同，则返回真。否则将返回假。\n\n程序第36行，`File dataFile = SPIFFS.open(file_name, \"w\");`这条语句中，open函数可用于对SPIFFS进行操作。该函数共有两个参数。第一个参数`file_name`是被操作的文件名称，本示例中该文件为/taichi-maker/notes.txt\n第二个参数`\"w\"`代表此操作为向SPIFFS写入文件信息。请注意：如果文件系统没有/taichi-maker/notes.txt文件，此操作将会在文件系统中建立该文件。如果文件系统有该文件，则程序将会重新建立该文件，即原有文件信息将会被覆盖。\n\n程序第37行`dataFile.println(\"Hello IOT World.\");`用于向dataFile文件写入信息。信息内容为“Hello IOT World.”。\n\n程序第38行`dataFile.close();`用于关闭dataFile文件。结束文件操作后，应执行此操作。\n\n\n\n## 2、通过程序从闪存文件系统读取信息\n\n```c\n/**********************************************************************\n项目名称/Project           : 零基础入门学用物联网\n程序名称/Program name      : esp8266-flash-read\n团队/Team                 : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)\n\n\n程序目的/Purpose           : 此程序用于演示如何从NodeMCU的内置SPIFFS中存储的文件notes.txt读取数据。\n                           notes.txt 文件内容将会通过串口监视器显示出来供用户确认。\n                           注意在使用本程序以前需要先将notes.txt 文件上传到NodeMCU开发板的SPIFFS中\n\n-----------------------------------------------------------------------\n\n函数说明：\nSPIFFS.open(file_name, \"r\"); \n以上SPIFFS函数有两个参数：\n第一个参数是被操作的文件名称，本示例中该文件为/notes.txt\n第二个参数\"r\" 代表读取文件信息。（如需了解如何写入信息，请参阅示例程序esp8266-flash-write）\n\n***********************************************************************/\n \n#include <FS.h>\n \nString file_name = \"/taichi-maker/notes.txt\";              //被读取的文件位置和名称\n \nvoid setup() {\n  Serial.begin(9600);\n  Serial.println(\"\");\n  \n  if(SPIFFS.begin()){ // 启动闪存文件系统\n    Serial.println(\"SPIFFS Started.\");\n  } else {\n    Serial.println(\"SPIFFS Failed to Start.\");\n  }\n \n  //确认闪存中是否有file_name文件★★★\n  if (SPIFFS.exists(file_name)){\n    Serial.print(file_name);\n    Serial.println(\" FOUND.\");\n  } else {\n    Serial.print(file_name);\n    Serial.print(\" NOT FOUND.\");\n  }\n \n  //建立File对象用于从SPIFFS中读取文件★★★\n  File dataFile = SPIFFS.open(file_name, \"r\"); \n \n  //读取文件内容并且通过串口监视器输出文件信息★★★\n  for(int i=0; i<dataFile.size(); i++){\n    Serial.print((char)dataFile.read());       \n  }\n \n  //完成文件读取后关闭文件\n  dataFile.close();                           \n}\n \nvoid loop() {\n}\n```\n\n以上程序第36行，`SPIFFS.exists(file_name)`用于检查闪存文件系统中有file_name文件（注：file_name变量具体信息在本程序第23行）。该函数返回值为布尔型。如果文件存在则返回真，否则将返回假。\n\n以上程序第45行，`File dataFile = SPIFFS.open(file_name, \"r\");`这条语句中，open函数可用于对SPIFFS进行操作。该函数共有两个参数。第一个参数`file_name`是被操作的文件名称，本示例中该文件为/taichi-maker/notes.txt\n第二个参数`\"r\"`代表此操作为读取文件信息。\n\n以上程序第48行的for循环语句中，循环条件使用了函数`dataFile.size()`。该函数将会返回dataFile的大小。循环语句体中，`dataFile.read()`将会读取dataFile文件内容。每调用一次该含税都会返回dataFile文件中一个字符。再次调用，将会返回下一个字符。以此类推，直到dataFile结尾。通过for循环语句，程序将会依次读取dataFile文件内容，并且将文件内容逐字符输出于串口监视器中。\n\n\n\n## 3、通过程序向闪存文件系统文件添加信息\n\n```c\n/**********************************************************************\n项目名称/Project           : 零基础入门学用物联网\n程序名称/Program name      : esp8266-flash-append\n团队/Team                 : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)\n\n程序目的/Purpose           : 此程序用于演示如何向NodeMCU的内置SPIFFS中存储的文件\n                            notes.txt添加数据。                      \n-----------------------------------------------------------------------  \n\n函数说明：\nSPIFFS.open(file_name, \"a\"); \n以上SPIFFS函数有两个参数：\n第一个参数是被操作的文件名称，本示例中该文件为/notes.txt\n第二个参数\"a\" 代表添加文件信息。（如需了解如何读取信息，请参阅示例程序esp8266-flash-read）\n此示例程序所演示的是向SPIFFS中的文件里添加信息。这一操作写入信息有所区别。\n添加信息是不会删除文件内原有信息，而是在原有信息后面添加新的信息。\n但写入操作（示例 esp8266-flash-write.ino）是将文件内容完全清除，重新写入新信息。    \n***********************************************************************/\n \n#include <FS.h>\n \nString file_name = \"/taichi-maker/notes.txt\";              //被读取的文件位置和名称\n \nvoid setup() {\n  Serial.begin(9600);\n  Serial.println(\"\");\n  \n  if(SPIFFS.begin()){ // 启动闪存文件系统\n    Serial.println(\"SPIFFS Started.\");\n  } else {\n    Serial.println(\"SPIFFS Failed to Start.\");\n  }\n \n  //确认闪存中是否有file_name文件\n  if (SPIFFS.exists(file_name)){\n    \n    Serial.print(file_name);\n    Serial.println(\" FOUND.\");\n \n    File dataFile = SPIFFS.open(file_name, \"a\");// 建立File对象用于向SPIFFS中的file对象（即/notes.txt）写入信息★★★\n    dataFile.println(\"This is Appended Info.\"); // 向dataFile添加字符串信息★★★\n    dataFile.close();                           // 完成文件操作后关闭文件★★★   \n    Serial.println(\"Finished Appending data to SPIFFS\");\n    \n  } else {\n    Serial.print(file_name);\n    Serial.print(\" NOT FOUND.\");\n  }\n                        \n}\n \nvoid loop() {\n}\n```\n\n在以上程序的第40行里，`File dataFile = SPIFFS.open(file_name, \"a\");`这条语句中，open函数可用于对SPIFFS进行操作。该函数共有两个参数。第一个参数`file_name`是被操作的文件名称,第二个参数`\"a\"`代表向该文件添加信息。请留意，此处的添加信息是不会删除文件内原有信息，而是在原有信息后面添加新的信息。这与但写入操作是有所区别的。写入操作是将文件内容完全清除，重新写入新信息。\n,\n程序的第41行，`dataFile.println(\"This is Appended Info.\")`，此语句作用将会向dataFile文件尾部添加双引号中的信息内容，也就是在文件尾部添加“This is Appended Info.”。\n\n## 4、通过程序读取目录内容\n\n```c\n/**********************************************************************\n项目名称/Project           : 零基础入门学用物联网\n程序名称/Program name      : esp8266-flash-folder-read\n团队/Team                 : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)\n\n\n程序目的/Purpose           : 此程序用于演示如何从NodeMCU的内置SPIFFS中文件夹里读取文件信息\n                           文件夹内容将会通过串口监视器显示出来。\n\n-----------------------------------------------------------------------\n\n\n函数说明：\nSPIFFS.openDir(folder_name);\n以上函数打开指定目录并返回一个目录对象实例。\n\n***********************************************************************/\n \n \n#include <FS.h>\n \nString file_name = \"/taichi-maker/myFile.txt\"; //被读取的文件位置和名称\nString folder_name = \"/taichi-maker\";         //被读取的文件夹★★★\n \nvoid setup() {\n  Serial.begin(9600);\n  Serial.println(\"\");\n  \n  if(SPIFFS.begin()){ // 启动闪存文件系统\n    Serial.println(\"SPIFFS Started.\");\n  } else {\n    Serial.println(\"SPIFFS Failed to Start.\");\n  }\n \n  File dataFile = SPIFFS.open(file_name, \"w\");// 建立File对象用于向SPIFFS中的file对象（即myFile.txt）写入信息\n  dataFile.println(\"Hello Taichi-Maker.\");    // 向dataFile写入字符串信息\n  dataFile.close();                           // 完成文件写入后关闭文件\n  Serial.println(F(\"Finished Writing data to SPIFFS\"));\n \n  // 显示目录中文件内容以及文件大小\n  Dir dir = SPIFFS.openDir(folder_name);  // 建立“目录”对象★★★\n  \n  while (dir.next()) {  // dir.next()用于检查目录中是否还有“下一个文件”★★★\n    Serial.println(dir.fileName()); // 输出文件名★★★\n  }\n}\n \nvoid loop() {\n}\n```\n\n本程序第23行建立了一个字符串变量。该变量用于存储文件夹名。其中`/`代表根目录。`/taichi-maker/`代表根目录下的`taichi-maker`目录。\n\n本程序第41行`SPIFFS.openDir(folder_name)`中的openDir函数函将返回一个“目录”对象并且赋值给dir。此”目录”对象正是folder_name所存储的`/taichi-maker/`目录。后续程序对dir的所有操作都是针对`/taichi-maker/`所执行的。\n\n本程序第43行while循环语句的循环条件是`dir.next()`的返回值。`dir.next()`函数用于检查dir文件夹内的文件。我们可以想象dir文件夹里有一个指针，每一次调用next函数都会让指针向下挪动一格。每一次挪动一格，如果下一个位置有文件，则返回真。否则将会返回假。因此，`while (dir.next())`循环语句中的内容会依次显示dir文件夹中的每一个文件的文件名。\n\n## 5、从闪存文件系统中删除文件\n\n```c\n/**********************************************************************\n项目名称/Project           : 零基础入门学用物联网\n程序名称/Program name      : esp8266-flash-remove\n团队/Team                 : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)\n\n\n程序目的/Purpose           : 此程序用于演示如何删除SPIFFS中存储的文件       \n***********************************************************************/\n \n#include <FS.h>\n \nString file_name = \"/taichi-maker/notes.txt\";              //被读取的文件位置和名称\n \nvoid setup() {\n  Serial.begin(9600);\n  Serial.println(\"\");\n  \n  if(SPIFFS.begin()){ // 启动闪存文件系统\n    Serial.println(\"SPIFFS Started.\");\n  } else {\n    Serial.println(\"SPIFFS Failed to Start.\");\n  }\n  \n  //从闪存中删除file_name文件★★★\n  if (SPIFFS.remove(file_name)){\n    \n    Serial.print(file_name);\n    Serial.println(\" remove sucess\");\n    \n  } else {\n    Serial.print(file_name);\n    Serial.println(\" remove fail\");\n  }                       \n}\n \nvoid loop() {\n}\n```\n\n以上程序中第25行，通过使用`SPIFFS.remove(file_name)`将`file_name`所指代的文件进行了删除操作。另外，`SPIFFS.remove(file_name)`的返回值为布尔型。如果文件删除执行成功则返回真，否则返回假。\n\n## 6、显示闪存文件系统信息\n\n```c\n/**********************************************************************\n项目名称/Project           : 零基础入门学用物联网\n程序名称/Program name      : esp8266-flash-info\n团队/Team                 : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)\n\n\n程序目的/Purpose           : 此程序用于演示如何使用FSInfo对象来显示闪存文件系统状态\n-----------------------------------------------------------------------\n\n\n***********************************************************************/\n \n \n#include <FS.h>\n \nFSInfo fs_info;\n \nvoid setup() {\n  Serial.begin(9600);\n \n  SPIFFS.begin();       //启动SPIFFS\n  Serial.println(\"\");\n  Serial.println(\"SPIFFS Started.\");\n \n  // 闪存文件系统信息\n  SPIFFS.info(fs_info);\n \n  // 可用空间总和（单位：字节）\n  Serial.print(\"totalBytes: \");     \n  Serial.print(fs_info.totalBytes); \n  Serial.println(\" Bytes\"); \n \n  // 已用空间（单位：字节）\n  Serial.print(\"usedBytes: \"); \n  Serial.print(fs_info.usedBytes);\n  Serial.println(\" Bytes\"); \n \n  // 最大文件名字符限制（含路径和'\\0'）\n  Serial.print(\"maxPathLength: \"); \n  Serial.println(fs_info.maxPathLength);\n \n  // 最多允许打开文件数量\n  Serial.print(\"maxOpenFiles: \"); \n  Serial.println(fs_info.maxOpenFiles);\n \n  // 存储块大小\n  Serial.print(\"blockSize: \"); \n  Serial.println(fs_info.blockSize);\n \n  // 存储页大小\n  Serial.print(\"pageSize: \");\n  Serial.println(fs_info.pageSize);\n}\n \nvoid loop() {\n}\n```\n\n以上程序第16行语句`FSInfo fs_info;`建立了FSInfo 对象，用于存储闪存状态信息。\n\n以上程序第26行语句`SPIFFS.info(fs_info);`。通过info函数将闪存状态信息赋给fs_info。后续的程序中，通过一系列语句将闪存状态信息通过串口监视器输出。具体信息内容可参考程序注释部分。\n\n以上是关于ESP8266闪存文件系统的常用功能介绍。关于ESP8266闪存文件系统的更多操作介绍，请参考Arduino ESP8266官方页面中的介绍部分。该页面可点击以下链接前往。\n\nhttps://arduino-esp8266.readthedocs.io/en/latest/filesystem.html\n\n# 二、[通过Arduino IDE向闪存文件系统上传文件](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/upload-files/)\n\n\n\n## 1、下载 Arduino-ESP8266闪存文件插件程序\n\n您有两种方法可以下载该插件程序。\n\n**第一种**方法是通过[点击此链接进入 Arduino-ESP8266官方GitHub页面下载](https://github.com/esp8266/arduino-esp8266fs-plugin/releases)。详情请见以下截图：\n\n![esp8266fs下载页面](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266fs-download.jpg)\n\n由于GitHub网站服务器在国外，有些朋友登录该网站会有些困难。如果是这样的话，那么您也可以[点击此链接进入太极创客网站下载页面去下载该插件](http://www.taichi-maker.com/homepage/download/#esp8266fs)。\n\n## 2、确定Arduino IDE项目文件夹位置\n\n![Arduino-ide-首选项菜单项](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/Arduino-ide-preferences.jpg)\n\n![Arduino-IDE-项目文件夹位置](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/Arduino-Project-Folder.jpg)\n\n## 3、通过资源管理器打开Arduino IDE项目文件夹并建立tools文件夹\n\n![在项目文件夹中建立名称为tools的文件夹](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266fs-tools-folder.jpg)\n\n## 4、解压缩esp8266fs插件压缩包，并将解压缩后的文件内容粘贴到项目文件夹中\n\n![esp8266fs解压缩](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266fs-unzip.jpg)\n\n![解压缩后可找到esp8266fs文件夹](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266fs-unzipped.jpg)\n\n![将esp8266fs文件夹粘贴到tools文件夹里](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266fs-paste.jpg)\n\n## 5、重新启动Arduino IDE\n\n## 检查“工具”菜单确认插件安装\n\n![ESP8266 data upload 菜单项](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266-data-upload-menu.jpg)\n\n## 6、根据上传的文件总大小来设置闪存大小\n\n![设置esp8266闪存大小](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266-flash-size-settings.jpg)\n\n##  7、将需要上传的文件保存在程序路径下的data文件夹中\n\n![将需要上传到esp8266闪存文件系统的文件保存在data目录中](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266-flash-data-storage.jpg)\n\n## 8、将需要上传的文件保存在程序路径下的data文件夹中\n\n![通过ESP8266 Sketch Data Upload可以将data文件夹里的文件上传](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266-flash-data-upload.jpg)\n\n假如您不确定具体文件如何存储，请点击以下链接下载示例程序压缩包。\n[文件上传示例程序](http://www.taichi-maker.com/wp-content/uploads/2020/02/esp8266-data-upload.zip)\n\n# 三、[使用闪存文件系统建立功能丰富的网络服务器](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-web-server/)\n\n掌握了如何向ESP8266开发板的闪存文件上传文件，我们就有了更多的空间来存储更加丰富的网页资源，从而让我们实现功能更加丰富的物联网项目。\n\n本节教程里，我们将向您介绍一系列ESP8266开发板搭建的网页服务示例。通过这些示例，您可以通过物联网控制ESP8266开发板的引脚以及获取引脚状态。这些示例的功能相对单一，这是因为这些示例的目的是为您提供项目搭建的启发。在后续的教程中里，我们和为您提供一系列完整的物联网项目示例，供您学习参考。\n\n- ## [在网页中加载闪存文件系统中的图片、CSS和JavaScript](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-web-server/load-imagecsss-javascript/)\n\n- ## [通过网页控制ESP8266开发板的引脚](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-web-server/esp8266-pin-control/)\n\n- ## [通过网页文本框控制ESP8266开发板的PWM引脚](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-web-server/text-pwm-pin-control/)\n\n- ## [(Ajax)控制LED引脚并将A0引脚读数实时显示于网页中](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-web-server/a0-pin-control/)\n\n- ## [(JavaScript)通过网页图形界面控制ESP8266的PWM引脚](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-web-server/javascript-know-pwm-control/)\n\n- ## [(JavaScript)使用指针表显示模拟输入引脚数值](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-web-server/javascript-analog-input-gauge/)\n\n- ## [通过网页将文件上传到ESP8266开发板闪存文件系统](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-web-server/file-upload-server/)\n\n\n\n","source":"_posts/学物联网-NodeMCU-五.md","raw":"---\ntitle: 学物联网之ESP8266NodeMCU（五）\ndescription: ESP8266 NodeMCU 闪存文件系统（SPIFFS）\ncopyright: false\nabbrlink: e2f4da2\ndate: 2022-09-02 15:23:18\ntags:\n  - esp8266\n  - 物联网\nkeywords:\npassword:\nabstract:\nmessage: \ncover: >-\n  http://qiniu.hanvon.top/blog_cover/esp8266-nodemcu-flash-file-system_cover.png\n---\n\n# 一、[ESP8266闪存文件系统基本操作](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-operation/)\n\n当我们上传程序给ESP8266时，我们的程序具体存放在什么地方呢？\n\n每一个ESP8266都配有一个闪存，这个闪存很像是一个小硬盘，我们上传的文件就被存放在这个闪存里。这个闪存的全称是Serial Peripheral Interface Flash File System（SPIFFS）。\n\n除了可以存放上传的程序以外，我们还可以将网页文件或者系统配置文件存放在ESP8266的闪存中。在这节课里，我们将学习如何利用程序对闪存文件系统（SPIFFS）进行文件读取和修改。\n\n## 1、通过程序向闪存文件系统写入信息\n\n```c\n/**********************************************************************\n项目名称/Project           : 零基础入门学用物联网\n程序名称/Program name      : esp8266-flash-write\n团队/Team                 : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)\n\n\n程序目的/Purpose           : 此程序用于演示如何向NodeMCU的SPIFFS中建立名为\n                            notes.txt的文件，程序还将向该文件写入信息。\n-----------------------------------------------------------------------\n函数说明：\nSPIFFS.open(file_name, \"w\"); \n以上函数有两个参数：\n第一个参数是被操作的文件名称，本示例中该文件为/notes.txt\n第二个参数\"w\" 代表写入文件信息。（如需了解如何读取信息，请参阅示例程序esp8266-flash-read）\n***********************************************************************/\n \n \n#include <FS.h>  //★★★\n \nString file_name = \"/taichi-maker/notes.txt\"; //被读取的文件位置和名称★★★\n \nvoid setup() {\n  Serial.begin(9600);\n  Serial.println(\"\");\n  \n  Serial.println(\"SPIFFS format start\");\n  SPIFFS.format();    \t\t\t// 格式化SPIFFS★★★\n  Serial.println(\"SPIFFS format finish\");\n  \n  if(SPIFFS.begin()){ \t\t\t// 启动SPIFFS★★★\n    Serial.println(\"SPIFFS Started.\");\n  } else {\n    Serial.println(\"SPIFFS Failed to Start.\");\n  }\n  \n  File dataFile = SPIFFS.open(file_name, \"w\");// 建立File对象用于向SPIFFS中的file对象（即/notes.txt）写入信息★★★\n  dataFile.println(\"Hello IOT World.\");       // 向dataFile写入字符串信息★★★\n  dataFile.close();                           // 完成文件写入后关闭文件★★★\n  Serial.println(\"Finished Writing data to SPIFFS\");\n}\n \nvoid loop() {\n}\n```\n\n在使用SPIFFS存储文件以前，我们必须使用`#include \"FS.h\"`,如以上程序第18行所示。\n\n程序第20行，我们建立了一个字符串变量。该变量用于存储文件位置和文件名。其中`/`代表根目录。`/taichi-maker/`代表根目录下的`taichi-maker`目录。`notes.txt`代表着文件名称。\n\n程序第27行`SPIFFS.format();`是对闪存文件系统进行格式化。这很想是我们对u盘进行格式化的操作。您无需每次使用闪存文件系统都对它进行格式化操作。这里仅仅是为了演示如何使用`SPIFFS.format();`。\n\n程序第30行，`SPIFFS.begin()`用于启动闪存文件系统。在每次使用闪存文件系统以前都需要执行这一操作。如果闪存文件系统成功启动，该函数的返回值为布尔型，如果成功启动闪存文件形同，则返回真。否则将返回假。\n\n程序第36行，`File dataFile = SPIFFS.open(file_name, \"w\");`这条语句中，open函数可用于对SPIFFS进行操作。该函数共有两个参数。第一个参数`file_name`是被操作的文件名称，本示例中该文件为/taichi-maker/notes.txt\n第二个参数`\"w\"`代表此操作为向SPIFFS写入文件信息。请注意：如果文件系统没有/taichi-maker/notes.txt文件，此操作将会在文件系统中建立该文件。如果文件系统有该文件，则程序将会重新建立该文件，即原有文件信息将会被覆盖。\n\n程序第37行`dataFile.println(\"Hello IOT World.\");`用于向dataFile文件写入信息。信息内容为“Hello IOT World.”。\n\n程序第38行`dataFile.close();`用于关闭dataFile文件。结束文件操作后，应执行此操作。\n\n\n\n## 2、通过程序从闪存文件系统读取信息\n\n```c\n/**********************************************************************\n项目名称/Project           : 零基础入门学用物联网\n程序名称/Program name      : esp8266-flash-read\n团队/Team                 : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)\n\n\n程序目的/Purpose           : 此程序用于演示如何从NodeMCU的内置SPIFFS中存储的文件notes.txt读取数据。\n                           notes.txt 文件内容将会通过串口监视器显示出来供用户确认。\n                           注意在使用本程序以前需要先将notes.txt 文件上传到NodeMCU开发板的SPIFFS中\n\n-----------------------------------------------------------------------\n\n函数说明：\nSPIFFS.open(file_name, \"r\"); \n以上SPIFFS函数有两个参数：\n第一个参数是被操作的文件名称，本示例中该文件为/notes.txt\n第二个参数\"r\" 代表读取文件信息。（如需了解如何写入信息，请参阅示例程序esp8266-flash-write）\n\n***********************************************************************/\n \n#include <FS.h>\n \nString file_name = \"/taichi-maker/notes.txt\";              //被读取的文件位置和名称\n \nvoid setup() {\n  Serial.begin(9600);\n  Serial.println(\"\");\n  \n  if(SPIFFS.begin()){ // 启动闪存文件系统\n    Serial.println(\"SPIFFS Started.\");\n  } else {\n    Serial.println(\"SPIFFS Failed to Start.\");\n  }\n \n  //确认闪存中是否有file_name文件★★★\n  if (SPIFFS.exists(file_name)){\n    Serial.print(file_name);\n    Serial.println(\" FOUND.\");\n  } else {\n    Serial.print(file_name);\n    Serial.print(\" NOT FOUND.\");\n  }\n \n  //建立File对象用于从SPIFFS中读取文件★★★\n  File dataFile = SPIFFS.open(file_name, \"r\"); \n \n  //读取文件内容并且通过串口监视器输出文件信息★★★\n  for(int i=0; i<dataFile.size(); i++){\n    Serial.print((char)dataFile.read());       \n  }\n \n  //完成文件读取后关闭文件\n  dataFile.close();                           \n}\n \nvoid loop() {\n}\n```\n\n以上程序第36行，`SPIFFS.exists(file_name)`用于检查闪存文件系统中有file_name文件（注：file_name变量具体信息在本程序第23行）。该函数返回值为布尔型。如果文件存在则返回真，否则将返回假。\n\n以上程序第45行，`File dataFile = SPIFFS.open(file_name, \"r\");`这条语句中，open函数可用于对SPIFFS进行操作。该函数共有两个参数。第一个参数`file_name`是被操作的文件名称，本示例中该文件为/taichi-maker/notes.txt\n第二个参数`\"r\"`代表此操作为读取文件信息。\n\n以上程序第48行的for循环语句中，循环条件使用了函数`dataFile.size()`。该函数将会返回dataFile的大小。循环语句体中，`dataFile.read()`将会读取dataFile文件内容。每调用一次该含税都会返回dataFile文件中一个字符。再次调用，将会返回下一个字符。以此类推，直到dataFile结尾。通过for循环语句，程序将会依次读取dataFile文件内容，并且将文件内容逐字符输出于串口监视器中。\n\n\n\n## 3、通过程序向闪存文件系统文件添加信息\n\n```c\n/**********************************************************************\n项目名称/Project           : 零基础入门学用物联网\n程序名称/Program name      : esp8266-flash-append\n团队/Team                 : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)\n\n程序目的/Purpose           : 此程序用于演示如何向NodeMCU的内置SPIFFS中存储的文件\n                            notes.txt添加数据。                      \n-----------------------------------------------------------------------  \n\n函数说明：\nSPIFFS.open(file_name, \"a\"); \n以上SPIFFS函数有两个参数：\n第一个参数是被操作的文件名称，本示例中该文件为/notes.txt\n第二个参数\"a\" 代表添加文件信息。（如需了解如何读取信息，请参阅示例程序esp8266-flash-read）\n此示例程序所演示的是向SPIFFS中的文件里添加信息。这一操作写入信息有所区别。\n添加信息是不会删除文件内原有信息，而是在原有信息后面添加新的信息。\n但写入操作（示例 esp8266-flash-write.ino）是将文件内容完全清除，重新写入新信息。    \n***********************************************************************/\n \n#include <FS.h>\n \nString file_name = \"/taichi-maker/notes.txt\";              //被读取的文件位置和名称\n \nvoid setup() {\n  Serial.begin(9600);\n  Serial.println(\"\");\n  \n  if(SPIFFS.begin()){ // 启动闪存文件系统\n    Serial.println(\"SPIFFS Started.\");\n  } else {\n    Serial.println(\"SPIFFS Failed to Start.\");\n  }\n \n  //确认闪存中是否有file_name文件\n  if (SPIFFS.exists(file_name)){\n    \n    Serial.print(file_name);\n    Serial.println(\" FOUND.\");\n \n    File dataFile = SPIFFS.open(file_name, \"a\");// 建立File对象用于向SPIFFS中的file对象（即/notes.txt）写入信息★★★\n    dataFile.println(\"This is Appended Info.\"); // 向dataFile添加字符串信息★★★\n    dataFile.close();                           // 完成文件操作后关闭文件★★★   \n    Serial.println(\"Finished Appending data to SPIFFS\");\n    \n  } else {\n    Serial.print(file_name);\n    Serial.print(\" NOT FOUND.\");\n  }\n                        \n}\n \nvoid loop() {\n}\n```\n\n在以上程序的第40行里，`File dataFile = SPIFFS.open(file_name, \"a\");`这条语句中，open函数可用于对SPIFFS进行操作。该函数共有两个参数。第一个参数`file_name`是被操作的文件名称,第二个参数`\"a\"`代表向该文件添加信息。请留意，此处的添加信息是不会删除文件内原有信息，而是在原有信息后面添加新的信息。这与但写入操作是有所区别的。写入操作是将文件内容完全清除，重新写入新信息。\n,\n程序的第41行，`dataFile.println(\"This is Appended Info.\")`，此语句作用将会向dataFile文件尾部添加双引号中的信息内容，也就是在文件尾部添加“This is Appended Info.”。\n\n## 4、通过程序读取目录内容\n\n```c\n/**********************************************************************\n项目名称/Project           : 零基础入门学用物联网\n程序名称/Program name      : esp8266-flash-folder-read\n团队/Team                 : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)\n\n\n程序目的/Purpose           : 此程序用于演示如何从NodeMCU的内置SPIFFS中文件夹里读取文件信息\n                           文件夹内容将会通过串口监视器显示出来。\n\n-----------------------------------------------------------------------\n\n\n函数说明：\nSPIFFS.openDir(folder_name);\n以上函数打开指定目录并返回一个目录对象实例。\n\n***********************************************************************/\n \n \n#include <FS.h>\n \nString file_name = \"/taichi-maker/myFile.txt\"; //被读取的文件位置和名称\nString folder_name = \"/taichi-maker\";         //被读取的文件夹★★★\n \nvoid setup() {\n  Serial.begin(9600);\n  Serial.println(\"\");\n  \n  if(SPIFFS.begin()){ // 启动闪存文件系统\n    Serial.println(\"SPIFFS Started.\");\n  } else {\n    Serial.println(\"SPIFFS Failed to Start.\");\n  }\n \n  File dataFile = SPIFFS.open(file_name, \"w\");// 建立File对象用于向SPIFFS中的file对象（即myFile.txt）写入信息\n  dataFile.println(\"Hello Taichi-Maker.\");    // 向dataFile写入字符串信息\n  dataFile.close();                           // 完成文件写入后关闭文件\n  Serial.println(F(\"Finished Writing data to SPIFFS\"));\n \n  // 显示目录中文件内容以及文件大小\n  Dir dir = SPIFFS.openDir(folder_name);  // 建立“目录”对象★★★\n  \n  while (dir.next()) {  // dir.next()用于检查目录中是否还有“下一个文件”★★★\n    Serial.println(dir.fileName()); // 输出文件名★★★\n  }\n}\n \nvoid loop() {\n}\n```\n\n本程序第23行建立了一个字符串变量。该变量用于存储文件夹名。其中`/`代表根目录。`/taichi-maker/`代表根目录下的`taichi-maker`目录。\n\n本程序第41行`SPIFFS.openDir(folder_name)`中的openDir函数函将返回一个“目录”对象并且赋值给dir。此”目录”对象正是folder_name所存储的`/taichi-maker/`目录。后续程序对dir的所有操作都是针对`/taichi-maker/`所执行的。\n\n本程序第43行while循环语句的循环条件是`dir.next()`的返回值。`dir.next()`函数用于检查dir文件夹内的文件。我们可以想象dir文件夹里有一个指针，每一次调用next函数都会让指针向下挪动一格。每一次挪动一格，如果下一个位置有文件，则返回真。否则将会返回假。因此，`while (dir.next())`循环语句中的内容会依次显示dir文件夹中的每一个文件的文件名。\n\n## 5、从闪存文件系统中删除文件\n\n```c\n/**********************************************************************\n项目名称/Project           : 零基础入门学用物联网\n程序名称/Program name      : esp8266-flash-remove\n团队/Team                 : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)\n\n\n程序目的/Purpose           : 此程序用于演示如何删除SPIFFS中存储的文件       \n***********************************************************************/\n \n#include <FS.h>\n \nString file_name = \"/taichi-maker/notes.txt\";              //被读取的文件位置和名称\n \nvoid setup() {\n  Serial.begin(9600);\n  Serial.println(\"\");\n  \n  if(SPIFFS.begin()){ // 启动闪存文件系统\n    Serial.println(\"SPIFFS Started.\");\n  } else {\n    Serial.println(\"SPIFFS Failed to Start.\");\n  }\n  \n  //从闪存中删除file_name文件★★★\n  if (SPIFFS.remove(file_name)){\n    \n    Serial.print(file_name);\n    Serial.println(\" remove sucess\");\n    \n  } else {\n    Serial.print(file_name);\n    Serial.println(\" remove fail\");\n  }                       \n}\n \nvoid loop() {\n}\n```\n\n以上程序中第25行，通过使用`SPIFFS.remove(file_name)`将`file_name`所指代的文件进行了删除操作。另外，`SPIFFS.remove(file_name)`的返回值为布尔型。如果文件删除执行成功则返回真，否则返回假。\n\n## 6、显示闪存文件系统信息\n\n```c\n/**********************************************************************\n项目名称/Project           : 零基础入门学用物联网\n程序名称/Program name      : esp8266-flash-info\n团队/Team                 : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)\n\n\n程序目的/Purpose           : 此程序用于演示如何使用FSInfo对象来显示闪存文件系统状态\n-----------------------------------------------------------------------\n\n\n***********************************************************************/\n \n \n#include <FS.h>\n \nFSInfo fs_info;\n \nvoid setup() {\n  Serial.begin(9600);\n \n  SPIFFS.begin();       //启动SPIFFS\n  Serial.println(\"\");\n  Serial.println(\"SPIFFS Started.\");\n \n  // 闪存文件系统信息\n  SPIFFS.info(fs_info);\n \n  // 可用空间总和（单位：字节）\n  Serial.print(\"totalBytes: \");     \n  Serial.print(fs_info.totalBytes); \n  Serial.println(\" Bytes\"); \n \n  // 已用空间（单位：字节）\n  Serial.print(\"usedBytes: \"); \n  Serial.print(fs_info.usedBytes);\n  Serial.println(\" Bytes\"); \n \n  // 最大文件名字符限制（含路径和'\\0'）\n  Serial.print(\"maxPathLength: \"); \n  Serial.println(fs_info.maxPathLength);\n \n  // 最多允许打开文件数量\n  Serial.print(\"maxOpenFiles: \"); \n  Serial.println(fs_info.maxOpenFiles);\n \n  // 存储块大小\n  Serial.print(\"blockSize: \"); \n  Serial.println(fs_info.blockSize);\n \n  // 存储页大小\n  Serial.print(\"pageSize: \");\n  Serial.println(fs_info.pageSize);\n}\n \nvoid loop() {\n}\n```\n\n以上程序第16行语句`FSInfo fs_info;`建立了FSInfo 对象，用于存储闪存状态信息。\n\n以上程序第26行语句`SPIFFS.info(fs_info);`。通过info函数将闪存状态信息赋给fs_info。后续的程序中，通过一系列语句将闪存状态信息通过串口监视器输出。具体信息内容可参考程序注释部分。\n\n以上是关于ESP8266闪存文件系统的常用功能介绍。关于ESP8266闪存文件系统的更多操作介绍，请参考Arduino ESP8266官方页面中的介绍部分。该页面可点击以下链接前往。\n\nhttps://arduino-esp8266.readthedocs.io/en/latest/filesystem.html\n\n# 二、[通过Arduino IDE向闪存文件系统上传文件](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/upload-files/)\n\n\n\n## 1、下载 Arduino-ESP8266闪存文件插件程序\n\n您有两种方法可以下载该插件程序。\n\n**第一种**方法是通过[点击此链接进入 Arduino-ESP8266官方GitHub页面下载](https://github.com/esp8266/arduino-esp8266fs-plugin/releases)。详情请见以下截图：\n\n![esp8266fs下载页面](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266fs-download.jpg)\n\n由于GitHub网站服务器在国外，有些朋友登录该网站会有些困难。如果是这样的话，那么您也可以[点击此链接进入太极创客网站下载页面去下载该插件](http://www.taichi-maker.com/homepage/download/#esp8266fs)。\n\n## 2、确定Arduino IDE项目文件夹位置\n\n![Arduino-ide-首选项菜单项](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/Arduino-ide-preferences.jpg)\n\n![Arduino-IDE-项目文件夹位置](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/Arduino-Project-Folder.jpg)\n\n## 3、通过资源管理器打开Arduino IDE项目文件夹并建立tools文件夹\n\n![在项目文件夹中建立名称为tools的文件夹](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266fs-tools-folder.jpg)\n\n## 4、解压缩esp8266fs插件压缩包，并将解压缩后的文件内容粘贴到项目文件夹中\n\n![esp8266fs解压缩](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266fs-unzip.jpg)\n\n![解压缩后可找到esp8266fs文件夹](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266fs-unzipped.jpg)\n\n![将esp8266fs文件夹粘贴到tools文件夹里](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266fs-paste.jpg)\n\n## 5、重新启动Arduino IDE\n\n## 检查“工具”菜单确认插件安装\n\n![ESP8266 data upload 菜单项](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266-data-upload-menu.jpg)\n\n## 6、根据上传的文件总大小来设置闪存大小\n\n![设置esp8266闪存大小](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266-flash-size-settings.jpg)\n\n##  7、将需要上传的文件保存在程序路径下的data文件夹中\n\n![将需要上传到esp8266闪存文件系统的文件保存在data目录中](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266-flash-data-storage.jpg)\n\n## 8、将需要上传的文件保存在程序路径下的data文件夹中\n\n![通过ESP8266 Sketch Data Upload可以将data文件夹里的文件上传](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266-flash-data-upload.jpg)\n\n假如您不确定具体文件如何存储，请点击以下链接下载示例程序压缩包。\n[文件上传示例程序](http://www.taichi-maker.com/wp-content/uploads/2020/02/esp8266-data-upload.zip)\n\n# 三、[使用闪存文件系统建立功能丰富的网络服务器](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-web-server/)\n\n掌握了如何向ESP8266开发板的闪存文件上传文件，我们就有了更多的空间来存储更加丰富的网页资源，从而让我们实现功能更加丰富的物联网项目。\n\n本节教程里，我们将向您介绍一系列ESP8266开发板搭建的网页服务示例。通过这些示例，您可以通过物联网控制ESP8266开发板的引脚以及获取引脚状态。这些示例的功能相对单一，这是因为这些示例的目的是为您提供项目搭建的启发。在后续的教程中里，我们和为您提供一系列完整的物联网项目示例，供您学习参考。\n\n- ## [在网页中加载闪存文件系统中的图片、CSS和JavaScript](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-web-server/load-imagecsss-javascript/)\n\n- ## [通过网页控制ESP8266开发板的引脚](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-web-server/esp8266-pin-control/)\n\n- ## [通过网页文本框控制ESP8266开发板的PWM引脚](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-web-server/text-pwm-pin-control/)\n\n- ## [(Ajax)控制LED引脚并将A0引脚读数实时显示于网页中](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-web-server/a0-pin-control/)\n\n- ## [(JavaScript)通过网页图形界面控制ESP8266的PWM引脚](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-web-server/javascript-know-pwm-control/)\n\n- ## [(JavaScript)使用指针表显示模拟输入引脚数值](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-web-server/javascript-analog-input-gauge/)\n\n- ## [通过网页将文件上传到ESP8266开发板闪存文件系统](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-web-server/file-upload-server/)\n\n\n\n","slug":"学物联网-NodeMCU-五","published":1,"updated":"2023-11-01T04:10:18.018Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clofj2tc60010oot3hwf0cpyv","content":"<h1 id=\"一、ESP8266闪存文件系统基本操作\"><a href=\"#一、ESP8266闪存文件系统基本操作\" class=\"headerlink\" title=\"一、ESP8266闪存文件系统基本操作\"></a>一、<a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-operation/\">ESP8266闪存文件系统基本操作</a></h1><p>当我们上传程序给ESP8266时，我们的程序具体存放在什么地方呢？</p>\n<p>每一个ESP8266都配有一个闪存，这个闪存很像是一个小硬盘，我们上传的文件就被存放在这个闪存里。这个闪存的全称是Serial Peripheral Interface Flash File System（SPIFFS）。</p>\n<p>除了可以存放上传的程序以外，我们还可以将网页文件或者系统配置文件存放在ESP8266的闪存中。在这节课里，我们将学习如何利用程序对闪存文件系统（SPIFFS）进行文件读取和修改。</p>\n<h2 id=\"1、通过程序向闪存文件系统写入信息\"><a href=\"#1、通过程序向闪存文件系统写入信息\" class=\"headerlink\" title=\"1、通过程序向闪存文件系统写入信息\"></a>1、通过程序向闪存文件系统写入信息</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**********************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">项目名称/Project           : 零基础入门学用物联网</span></span><br><span class=\"line\"><span class=\"comment\">程序名称/Program name      : esp8266-flash-write</span></span><br><span class=\"line\"><span class=\"comment\">团队/Team                 : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">程序目的/Purpose           : 此程序用于演示如何向NodeMCU的SPIFFS中建立名为</span></span><br><span class=\"line\"><span class=\"comment\">                            notes.txt的文件，程序还将向该文件写入信息。</span></span><br><span class=\"line\"><span class=\"comment\">-----------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">函数说明：</span></span><br><span class=\"line\"><span class=\"comment\">SPIFFS.open(file_name, &quot;w&quot;); </span></span><br><span class=\"line\"><span class=\"comment\">以上函数有两个参数：</span></span><br><span class=\"line\"><span class=\"comment\">第一个参数是被操作的文件名称，本示例中该文件为/notes.txt</span></span><br><span class=\"line\"><span class=\"comment\">第二个参数&quot;w&quot; 代表写入文件信息。（如需了解如何读取信息，请参阅示例程序esp8266-flash-read）</span></span><br><span class=\"line\"><span class=\"comment\">***********************************************************************/</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;FS.h&gt;</span>  <span class=\"comment\">//★★★</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\">String file_name = <span class=\"string\">&quot;/taichi-maker/notes.txt&quot;</span>; <span class=\"comment\">//被读取的文件位置和名称★★★</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">setup</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  Serial.begin(<span class=\"number\">9600</span>);</span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot;SPIFFS format start&quot;</span>);</span><br><span class=\"line\">  SPIFFS.format();    \t\t\t<span class=\"comment\">// 格式化SPIFFS★★★</span></span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot;SPIFFS format finish&quot;</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(SPIFFS.begin())&#123; \t\t\t<span class=\"comment\">// 启动SPIFFS★★★</span></span><br><span class=\"line\">    Serial.println(<span class=\"string\">&quot;SPIFFS Started.&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    Serial.println(<span class=\"string\">&quot;SPIFFS Failed to Start.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  File dataFile = SPIFFS.open(file_name, <span class=\"string\">&quot;w&quot;</span>);<span class=\"comment\">// 建立File对象用于向SPIFFS中的file对象（即/notes.txt）写入信息★★★</span></span><br><span class=\"line\">  dataFile.println(<span class=\"string\">&quot;Hello IOT World.&quot;</span>);       <span class=\"comment\">// 向dataFile写入字符串信息★★★</span></span><br><span class=\"line\">  dataFile.close();                           <span class=\"comment\">// 完成文件写入后关闭文件★★★</span></span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot;Finished Writing data to SPIFFS&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">loop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在使用SPIFFS存储文件以前，我们必须使用<code>#include &quot;FS.h&quot;</code>,如以上程序第18行所示。</p>\n<p>程序第20行，我们建立了一个字符串变量。该变量用于存储文件位置和文件名。其中<code>/</code>代表根目录。<code>/taichi-maker/</code>代表根目录下的<code>taichi-maker</code>目录。<code>notes.txt</code>代表着文件名称。</p>\n<p>程序第27行<code>SPIFFS.format();</code>是对闪存文件系统进行格式化。这很想是我们对u盘进行格式化的操作。您无需每次使用闪存文件系统都对它进行格式化操作。这里仅仅是为了演示如何使用<code>SPIFFS.format();</code>。</p>\n<p>程序第30行，<code>SPIFFS.begin()</code>用于启动闪存文件系统。在每次使用闪存文件系统以前都需要执行这一操作。如果闪存文件系统成功启动，该函数的返回值为布尔型，如果成功启动闪存文件形同，则返回真。否则将返回假。</p>\n<p>程序第36行，<code>File dataFile = SPIFFS.open(file_name, &quot;w&quot;);</code>这条语句中，open函数可用于对SPIFFS进行操作。该函数共有两个参数。第一个参数<code>file_name</code>是被操作的文件名称，本示例中该文件为&#x2F;taichi-maker&#x2F;notes.txt<br>第二个参数<code>&quot;w&quot;</code>代表此操作为向SPIFFS写入文件信息。请注意：如果文件系统没有&#x2F;taichi-maker&#x2F;notes.txt文件，此操作将会在文件系统中建立该文件。如果文件系统有该文件，则程序将会重新建立该文件，即原有文件信息将会被覆盖。</p>\n<p>程序第37行<code>dataFile.println(&quot;Hello IOT World.&quot;);</code>用于向dataFile文件写入信息。信息内容为“Hello IOT World.”。</p>\n<p>程序第38行<code>dataFile.close();</code>用于关闭dataFile文件。结束文件操作后，应执行此操作。</p>\n<h2 id=\"2、通过程序从闪存文件系统读取信息\"><a href=\"#2、通过程序从闪存文件系统读取信息\" class=\"headerlink\" title=\"2、通过程序从闪存文件系统读取信息\"></a>2、通过程序从闪存文件系统读取信息</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**********************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">项目名称/Project           : 零基础入门学用物联网</span></span><br><span class=\"line\"><span class=\"comment\">程序名称/Program name      : esp8266-flash-read</span></span><br><span class=\"line\"><span class=\"comment\">团队/Team                 : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">程序目的/Purpose           : 此程序用于演示如何从NodeMCU的内置SPIFFS中存储的文件notes.txt读取数据。</span></span><br><span class=\"line\"><span class=\"comment\">                           notes.txt 文件内容将会通过串口监视器显示出来供用户确认。</span></span><br><span class=\"line\"><span class=\"comment\">                           注意在使用本程序以前需要先将notes.txt 文件上传到NodeMCU开发板的SPIFFS中</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">-----------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">函数说明：</span></span><br><span class=\"line\"><span class=\"comment\">SPIFFS.open(file_name, &quot;r&quot;); </span></span><br><span class=\"line\"><span class=\"comment\">以上SPIFFS函数有两个参数：</span></span><br><span class=\"line\"><span class=\"comment\">第一个参数是被操作的文件名称，本示例中该文件为/notes.txt</span></span><br><span class=\"line\"><span class=\"comment\">第二个参数&quot;r&quot; 代表读取文件信息。（如需了解如何写入信息，请参阅示例程序esp8266-flash-write）</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">***********************************************************************/</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;FS.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\">String file_name = <span class=\"string\">&quot;/taichi-maker/notes.txt&quot;</span>;              <span class=\"comment\">//被读取的文件位置和名称</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">setup</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  Serial.begin(<span class=\"number\">9600</span>);</span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(SPIFFS.begin())&#123; <span class=\"comment\">// 启动闪存文件系统</span></span><br><span class=\"line\">    Serial.println(<span class=\"string\">&quot;SPIFFS Started.&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    Serial.println(<span class=\"string\">&quot;SPIFFS Failed to Start.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">//确认闪存中是否有file_name文件★★★</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (SPIFFS.exists(file_name))&#123;</span><br><span class=\"line\">    Serial.print(file_name);</span><br><span class=\"line\">    Serial.println(<span class=\"string\">&quot; FOUND.&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    Serial.print(file_name);</span><br><span class=\"line\">    Serial.print(<span class=\"string\">&quot; NOT FOUND.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">//建立File对象用于从SPIFFS中读取文件★★★</span></span><br><span class=\"line\">  File dataFile = SPIFFS.open(file_name, <span class=\"string\">&quot;r&quot;</span>); </span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">//读取文件内容并且通过串口监视器输出文件信息★★★</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;dataFile.size(); i++)&#123;</span><br><span class=\"line\">    Serial.print((<span class=\"type\">char</span>)dataFile.read());       </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">//完成文件读取后关闭文件</span></span><br><span class=\"line\">  dataFile.close();                           </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">loop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上程序第36行，<code>SPIFFS.exists(file_name)</code>用于检查闪存文件系统中有file_name文件（注：file_name变量具体信息在本程序第23行）。该函数返回值为布尔型。如果文件存在则返回真，否则将返回假。</p>\n<p>以上程序第45行，<code>File dataFile = SPIFFS.open(file_name, &quot;r&quot;);</code>这条语句中，open函数可用于对SPIFFS进行操作。该函数共有两个参数。第一个参数<code>file_name</code>是被操作的文件名称，本示例中该文件为&#x2F;taichi-maker&#x2F;notes.txt<br>第二个参数<code>&quot;r&quot;</code>代表此操作为读取文件信息。</p>\n<p>以上程序第48行的for循环语句中，循环条件使用了函数<code>dataFile.size()</code>。该函数将会返回dataFile的大小。循环语句体中，<code>dataFile.read()</code>将会读取dataFile文件内容。每调用一次该含税都会返回dataFile文件中一个字符。再次调用，将会返回下一个字符。以此类推，直到dataFile结尾。通过for循环语句，程序将会依次读取dataFile文件内容，并且将文件内容逐字符输出于串口监视器中。</p>\n<h2 id=\"3、通过程序向闪存文件系统文件添加信息\"><a href=\"#3、通过程序向闪存文件系统文件添加信息\" class=\"headerlink\" title=\"3、通过程序向闪存文件系统文件添加信息\"></a>3、通过程序向闪存文件系统文件添加信息</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**********************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">项目名称/Project           : 零基础入门学用物联网</span></span><br><span class=\"line\"><span class=\"comment\">程序名称/Program name      : esp8266-flash-append</span></span><br><span class=\"line\"><span class=\"comment\">团队/Team                 : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">程序目的/Purpose           : 此程序用于演示如何向NodeMCU的内置SPIFFS中存储的文件</span></span><br><span class=\"line\"><span class=\"comment\">                            notes.txt添加数据。                      </span></span><br><span class=\"line\"><span class=\"comment\">-----------------------------------------------------------------------  </span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">函数说明：</span></span><br><span class=\"line\"><span class=\"comment\">SPIFFS.open(file_name, &quot;a&quot;); </span></span><br><span class=\"line\"><span class=\"comment\">以上SPIFFS函数有两个参数：</span></span><br><span class=\"line\"><span class=\"comment\">第一个参数是被操作的文件名称，本示例中该文件为/notes.txt</span></span><br><span class=\"line\"><span class=\"comment\">第二个参数&quot;a&quot; 代表添加文件信息。（如需了解如何读取信息，请参阅示例程序esp8266-flash-read）</span></span><br><span class=\"line\"><span class=\"comment\">此示例程序所演示的是向SPIFFS中的文件里添加信息。这一操作写入信息有所区别。</span></span><br><span class=\"line\"><span class=\"comment\">添加信息是不会删除文件内原有信息，而是在原有信息后面添加新的信息。</span></span><br><span class=\"line\"><span class=\"comment\">但写入操作（示例 esp8266-flash-write.ino）是将文件内容完全清除，重新写入新信息。    </span></span><br><span class=\"line\"><span class=\"comment\">***********************************************************************/</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;FS.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\">String file_name = <span class=\"string\">&quot;/taichi-maker/notes.txt&quot;</span>;              <span class=\"comment\">//被读取的文件位置和名称</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">setup</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  Serial.begin(<span class=\"number\">9600</span>);</span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(SPIFFS.begin())&#123; <span class=\"comment\">// 启动闪存文件系统</span></span><br><span class=\"line\">    Serial.println(<span class=\"string\">&quot;SPIFFS Started.&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    Serial.println(<span class=\"string\">&quot;SPIFFS Failed to Start.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">//确认闪存中是否有file_name文件</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (SPIFFS.exists(file_name))&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Serial.print(file_name);</span><br><span class=\"line\">    Serial.println(<span class=\"string\">&quot; FOUND.&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    File dataFile = SPIFFS.open(file_name, <span class=\"string\">&quot;a&quot;</span>);<span class=\"comment\">// 建立File对象用于向SPIFFS中的file对象（即/notes.txt）写入信息★★★</span></span><br><span class=\"line\">    dataFile.println(<span class=\"string\">&quot;This is Appended Info.&quot;</span>); <span class=\"comment\">// 向dataFile添加字符串信息★★★</span></span><br><span class=\"line\">    dataFile.close();                           <span class=\"comment\">// 完成文件操作后关闭文件★★★   </span></span><br><span class=\"line\">    Serial.println(<span class=\"string\">&quot;Finished Appending data to SPIFFS&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    Serial.print(file_name);</span><br><span class=\"line\">    Serial.print(<span class=\"string\">&quot; NOT FOUND.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">                        </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">loop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在以上程序的第40行里，<code>File dataFile = SPIFFS.open(file_name, &quot;a&quot;);</code>这条语句中，open函数可用于对SPIFFS进行操作。该函数共有两个参数。第一个参数<code>file_name</code>是被操作的文件名称,第二个参数<code>&quot;a&quot;</code>代表向该文件添加信息。请留意，此处的添加信息是不会删除文件内原有信息，而是在原有信息后面添加新的信息。这与但写入操作是有所区别的。写入操作是将文件内容完全清除，重新写入新信息。<br>,<br>程序的第41行，<code>dataFile.println(&quot;This is Appended Info.&quot;)</code>，此语句作用将会向dataFile文件尾部添加双引号中的信息内容，也就是在文件尾部添加“This is Appended Info.”。</p>\n<h2 id=\"4、通过程序读取目录内容\"><a href=\"#4、通过程序读取目录内容\" class=\"headerlink\" title=\"4、通过程序读取目录内容\"></a>4、通过程序读取目录内容</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**********************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">项目名称/Project           : 零基础入门学用物联网</span></span><br><span class=\"line\"><span class=\"comment\">程序名称/Program name      : esp8266-flash-folder-read</span></span><br><span class=\"line\"><span class=\"comment\">团队/Team                 : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">程序目的/Purpose           : 此程序用于演示如何从NodeMCU的内置SPIFFS中文件夹里读取文件信息</span></span><br><span class=\"line\"><span class=\"comment\">                           文件夹内容将会通过串口监视器显示出来。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">-----------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">函数说明：</span></span><br><span class=\"line\"><span class=\"comment\">SPIFFS.openDir(folder_name);</span></span><br><span class=\"line\"><span class=\"comment\">以上函数打开指定目录并返回一个目录对象实例。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">***********************************************************************/</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;FS.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\">String file_name = <span class=\"string\">&quot;/taichi-maker/myFile.txt&quot;</span>; <span class=\"comment\">//被读取的文件位置和名称</span></span><br><span class=\"line\">String folder_name = <span class=\"string\">&quot;/taichi-maker&quot;</span>;         <span class=\"comment\">//被读取的文件夹★★★</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">setup</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  Serial.begin(<span class=\"number\">9600</span>);</span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(SPIFFS.begin())&#123; <span class=\"comment\">// 启动闪存文件系统</span></span><br><span class=\"line\">    Serial.println(<span class=\"string\">&quot;SPIFFS Started.&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    Serial.println(<span class=\"string\">&quot;SPIFFS Failed to Start.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  File dataFile = SPIFFS.open(file_name, <span class=\"string\">&quot;w&quot;</span>);<span class=\"comment\">// 建立File对象用于向SPIFFS中的file对象（即myFile.txt）写入信息</span></span><br><span class=\"line\">  dataFile.println(<span class=\"string\">&quot;Hello Taichi-Maker.&quot;</span>);    <span class=\"comment\">// 向dataFile写入字符串信息</span></span><br><span class=\"line\">  dataFile.close();                           <span class=\"comment\">// 完成文件写入后关闭文件</span></span><br><span class=\"line\">  Serial.println(F(<span class=\"string\">&quot;Finished Writing data to SPIFFS&quot;</span>));</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 显示目录中文件内容以及文件大小</span></span><br><span class=\"line\">  Dir dir = SPIFFS.openDir(folder_name);  <span class=\"comment\">// 建立“目录”对象★★★</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">while</span> (dir.next()) &#123;  <span class=\"comment\">// dir.next()用于检查目录中是否还有“下一个文件”★★★</span></span><br><span class=\"line\">    Serial.println(dir.fileName()); <span class=\"comment\">// 输出文件名★★★</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">loop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>本程序第23行建立了一个字符串变量。该变量用于存储文件夹名。其中<code>/</code>代表根目录。<code>/taichi-maker/</code>代表根目录下的<code>taichi-maker</code>目录。</p>\n<p>本程序第41行<code>SPIFFS.openDir(folder_name)</code>中的openDir函数函将返回一个“目录”对象并且赋值给dir。此”目录”对象正是folder_name所存储的<code>/taichi-maker/</code>目录。后续程序对dir的所有操作都是针对<code>/taichi-maker/</code>所执行的。</p>\n<p>本程序第43行while循环语句的循环条件是<code>dir.next()</code>的返回值。<code>dir.next()</code>函数用于检查dir文件夹内的文件。我们可以想象dir文件夹里有一个指针，每一次调用next函数都会让指针向下挪动一格。每一次挪动一格，如果下一个位置有文件，则返回真。否则将会返回假。因此，<code>while (dir.next())</code>循环语句中的内容会依次显示dir文件夹中的每一个文件的文件名。</p>\n<h2 id=\"5、从闪存文件系统中删除文件\"><a href=\"#5、从闪存文件系统中删除文件\" class=\"headerlink\" title=\"5、从闪存文件系统中删除文件\"></a>5、从闪存文件系统中删除文件</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**********************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">项目名称/Project           : 零基础入门学用物联网</span></span><br><span class=\"line\"><span class=\"comment\">程序名称/Program name      : esp8266-flash-remove</span></span><br><span class=\"line\"><span class=\"comment\">团队/Team                 : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">程序目的/Purpose           : 此程序用于演示如何删除SPIFFS中存储的文件       </span></span><br><span class=\"line\"><span class=\"comment\">***********************************************************************/</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;FS.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\">String file_name = <span class=\"string\">&quot;/taichi-maker/notes.txt&quot;</span>;              <span class=\"comment\">//被读取的文件位置和名称</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">setup</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  Serial.begin(<span class=\"number\">9600</span>);</span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(SPIFFS.begin())&#123; <span class=\"comment\">// 启动闪存文件系统</span></span><br><span class=\"line\">    Serial.println(<span class=\"string\">&quot;SPIFFS Started.&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    Serial.println(<span class=\"string\">&quot;SPIFFS Failed to Start.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//从闪存中删除file_name文件★★★</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (SPIFFS.remove(file_name))&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Serial.print(file_name);</span><br><span class=\"line\">    Serial.println(<span class=\"string\">&quot; remove sucess&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    Serial.print(file_name);</span><br><span class=\"line\">    Serial.println(<span class=\"string\">&quot; remove fail&quot;</span>);</span><br><span class=\"line\">  &#125;                       </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">loop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上程序中第25行，通过使用<code>SPIFFS.remove(file_name)</code>将<code>file_name</code>所指代的文件进行了删除操作。另外，<code>SPIFFS.remove(file_name)</code>的返回值为布尔型。如果文件删除执行成功则返回真，否则返回假。</p>\n<h2 id=\"6、显示闪存文件系统信息\"><a href=\"#6、显示闪存文件系统信息\" class=\"headerlink\" title=\"6、显示闪存文件系统信息\"></a>6、显示闪存文件系统信息</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**********************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">项目名称/Project           : 零基础入门学用物联网</span></span><br><span class=\"line\"><span class=\"comment\">程序名称/Program name      : esp8266-flash-info</span></span><br><span class=\"line\"><span class=\"comment\">团队/Team                 : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">程序目的/Purpose           : 此程序用于演示如何使用FSInfo对象来显示闪存文件系统状态</span></span><br><span class=\"line\"><span class=\"comment\">-----------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">***********************************************************************/</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;FS.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\">FSInfo fs_info;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">setup</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  Serial.begin(<span class=\"number\">9600</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">  SPIFFS.begin();       <span class=\"comment\">//启动SPIFFS</span></span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot;SPIFFS Started.&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 闪存文件系统信息</span></span><br><span class=\"line\">  SPIFFS.info(fs_info);</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 可用空间总和（单位：字节）</span></span><br><span class=\"line\">  Serial.print(<span class=\"string\">&quot;totalBytes: &quot;</span>);     </span><br><span class=\"line\">  Serial.print(fs_info.totalBytes); </span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot; Bytes&quot;</span>); </span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 已用空间（单位：字节）</span></span><br><span class=\"line\">  Serial.print(<span class=\"string\">&quot;usedBytes: &quot;</span>); </span><br><span class=\"line\">  Serial.print(fs_info.usedBytes);</span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot; Bytes&quot;</span>); </span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 最大文件名字符限制（含路径和&#x27;\\0&#x27;）</span></span><br><span class=\"line\">  Serial.print(<span class=\"string\">&quot;maxPathLength: &quot;</span>); </span><br><span class=\"line\">  Serial.println(fs_info.maxPathLength);</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 最多允许打开文件数量</span></span><br><span class=\"line\">  Serial.print(<span class=\"string\">&quot;maxOpenFiles: &quot;</span>); </span><br><span class=\"line\">  Serial.println(fs_info.maxOpenFiles);</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 存储块大小</span></span><br><span class=\"line\">  Serial.print(<span class=\"string\">&quot;blockSize: &quot;</span>); </span><br><span class=\"line\">  Serial.println(fs_info.blockSize);</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 存储页大小</span></span><br><span class=\"line\">  Serial.print(<span class=\"string\">&quot;pageSize: &quot;</span>);</span><br><span class=\"line\">  Serial.println(fs_info.pageSize);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">loop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上程序第16行语句<code>FSInfo fs_info;</code>建立了FSInfo 对象，用于存储闪存状态信息。</p>\n<p>以上程序第26行语句<code>SPIFFS.info(fs_info);</code>。通过info函数将闪存状态信息赋给fs_info。后续的程序中，通过一系列语句将闪存状态信息通过串口监视器输出。具体信息内容可参考程序注释部分。</p>\n<p>以上是关于ESP8266闪存文件系统的常用功能介绍。关于ESP8266闪存文件系统的更多操作介绍，请参考Arduino ESP8266官方页面中的介绍部分。该页面可点击以下链接前往。</p>\n<p><a href=\"https://arduino-esp8266.readthedocs.io/en/latest/filesystem.html\">https://arduino-esp8266.readthedocs.io/en/latest/filesystem.html</a></p>\n<h1 id=\"二、通过Arduino-IDE向闪存文件系统上传文件\"><a href=\"#二、通过Arduino-IDE向闪存文件系统上传文件\" class=\"headerlink\" title=\"二、通过Arduino IDE向闪存文件系统上传文件\"></a>二、<a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/upload-files/\">通过Arduino IDE向闪存文件系统上传文件</a></h1><h2 id=\"1、下载-Arduino-ESP8266闪存文件插件程序\"><a href=\"#1、下载-Arduino-ESP8266闪存文件插件程序\" class=\"headerlink\" title=\"1、下载 Arduino-ESP8266闪存文件插件程序\"></a>1、下载 Arduino-ESP8266闪存文件插件程序</h2><p>您有两种方法可以下载该插件程序。</p>\n<p><strong>第一种</strong>方法是通过<a href=\"https://github.com/esp8266/arduino-esp8266fs-plugin/releases\">点击此链接进入 Arduino-ESP8266官方GitHub页面下载</a>。详情请见以下截图：</p>\n<p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266fs-download.jpg\" alt=\"esp8266fs下载页面\"></p>\n<p>由于GitHub网站服务器在国外，有些朋友登录该网站会有些困难。如果是这样的话，那么您也可以<a href=\"http://www.taichi-maker.com/homepage/download/#esp8266fs\">点击此链接进入太极创客网站下载页面去下载该插件</a>。</p>\n<h2 id=\"2、确定Arduino-IDE项目文件夹位置\"><a href=\"#2、确定Arduino-IDE项目文件夹位置\" class=\"headerlink\" title=\"2、确定Arduino IDE项目文件夹位置\"></a>2、确定Arduino IDE项目文件夹位置</h2><p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/Arduino-ide-preferences.jpg\" alt=\"Arduino-ide-首选项菜单项\"></p>\n<p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/Arduino-Project-Folder.jpg\" alt=\"Arduino-IDE-项目文件夹位置\"></p>\n<h2 id=\"3、通过资源管理器打开Arduino-IDE项目文件夹并建立tools文件夹\"><a href=\"#3、通过资源管理器打开Arduino-IDE项目文件夹并建立tools文件夹\" class=\"headerlink\" title=\"3、通过资源管理器打开Arduino IDE项目文件夹并建立tools文件夹\"></a>3、通过资源管理器打开Arduino IDE项目文件夹并建立tools文件夹</h2><p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266fs-tools-folder.jpg\" alt=\"在项目文件夹中建立名称为tools的文件夹\"></p>\n<h2 id=\"4、解压缩esp8266fs插件压缩包，并将解压缩后的文件内容粘贴到项目文件夹中\"><a href=\"#4、解压缩esp8266fs插件压缩包，并将解压缩后的文件内容粘贴到项目文件夹中\" class=\"headerlink\" title=\"4、解压缩esp8266fs插件压缩包，并将解压缩后的文件内容粘贴到项目文件夹中\"></a>4、解压缩esp8266fs插件压缩包，并将解压缩后的文件内容粘贴到项目文件夹中</h2><p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266fs-unzip.jpg\" alt=\"esp8266fs解压缩\"></p>\n<p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266fs-unzipped.jpg\" alt=\"解压缩后可找到esp8266fs文件夹\"></p>\n<p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266fs-paste.jpg\" alt=\"将esp8266fs文件夹粘贴到tools文件夹里\"></p>\n<h2 id=\"5、重新启动Arduino-IDE\"><a href=\"#5、重新启动Arduino-IDE\" class=\"headerlink\" title=\"5、重新启动Arduino IDE\"></a>5、重新启动Arduino IDE</h2><h2 id=\"检查“工具”菜单确认插件安装\"><a href=\"#检查“工具”菜单确认插件安装\" class=\"headerlink\" title=\"检查“工具”菜单确认插件安装\"></a>检查“工具”菜单确认插件安装</h2><p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266-data-upload-menu.jpg\" alt=\"ESP8266 data upload 菜单项\"></p>\n<h2 id=\"6、根据上传的文件总大小来设置闪存大小\"><a href=\"#6、根据上传的文件总大小来设置闪存大小\" class=\"headerlink\" title=\"6、根据上传的文件总大小来设置闪存大小\"></a>6、根据上传的文件总大小来设置闪存大小</h2><p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266-flash-size-settings.jpg\" alt=\"设置esp8266闪存大小\"></p>\n<h2 id=\"7、将需要上传的文件保存在程序路径下的data文件夹中\"><a href=\"#7、将需要上传的文件保存在程序路径下的data文件夹中\" class=\"headerlink\" title=\"7、将需要上传的文件保存在程序路径下的data文件夹中\"></a>7、将需要上传的文件保存在程序路径下的data文件夹中</h2><p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266-flash-data-storage.jpg\" alt=\"将需要上传到esp8266闪存文件系统的文件保存在data目录中\"></p>\n<h2 id=\"8、将需要上传的文件保存在程序路径下的data文件夹中\"><a href=\"#8、将需要上传的文件保存在程序路径下的data文件夹中\" class=\"headerlink\" title=\"8、将需要上传的文件保存在程序路径下的data文件夹中\"></a>8、将需要上传的文件保存在程序路径下的data文件夹中</h2><p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266-flash-data-upload.jpg\" alt=\"通过ESP8266 Sketch Data Upload可以将data文件夹里的文件上传\"></p>\n<p>假如您不确定具体文件如何存储，请点击以下链接下载示例程序压缩包。<br><a href=\"http://www.taichi-maker.com/wp-content/uploads/2020/02/esp8266-data-upload.zip\">文件上传示例程序</a></p>\n<h1 id=\"三、使用闪存文件系统建立功能丰富的网络服务器\"><a href=\"#三、使用闪存文件系统建立功能丰富的网络服务器\" class=\"headerlink\" title=\"三、使用闪存文件系统建立功能丰富的网络服务器\"></a>三、<a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-web-server/\">使用闪存文件系统建立功能丰富的网络服务器</a></h1><p>掌握了如何向ESP8266开发板的闪存文件上传文件，我们就有了更多的空间来存储更加丰富的网页资源，从而让我们实现功能更加丰富的物联网项目。</p>\n<p>本节教程里，我们将向您介绍一系列ESP8266开发板搭建的网页服务示例。通过这些示例，您可以通过物联网控制ESP8266开发板的引脚以及获取引脚状态。这些示例的功能相对单一，这是因为这些示例的目的是为您提供项目搭建的启发。在后续的教程中里，我们和为您提供一系列完整的物联网项目示例，供您学习参考。</p>\n<ul>\n<li><h2 id=\"在网页中加载闪存文件系统中的图片、CSS和JavaScript\"><a href=\"#在网页中加载闪存文件系统中的图片、CSS和JavaScript\" class=\"headerlink\" title=\"在网页中加载闪存文件系统中的图片、CSS和JavaScript\"></a><a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-web-server/load-imagecsss-javascript/\">在网页中加载闪存文件系统中的图片、CSS和JavaScript</a></h2></li>\n<li><h2 id=\"通过网页控制ESP8266开发板的引脚\"><a href=\"#通过网页控制ESP8266开发板的引脚\" class=\"headerlink\" title=\"通过网页控制ESP8266开发板的引脚\"></a><a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-web-server/esp8266-pin-control/\">通过网页控制ESP8266开发板的引脚</a></h2></li>\n<li><h2 id=\"通过网页文本框控制ESP8266开发板的PWM引脚\"><a href=\"#通过网页文本框控制ESP8266开发板的PWM引脚\" class=\"headerlink\" title=\"通过网页文本框控制ESP8266开发板的PWM引脚\"></a><a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-web-server/text-pwm-pin-control/\">通过网页文本框控制ESP8266开发板的PWM引脚</a></h2></li>\n<li><h2 id=\"Ajax-控制LED引脚并将A0引脚读数实时显示于网页中\"><a href=\"#Ajax-控制LED引脚并将A0引脚读数实时显示于网页中\" class=\"headerlink\" title=\"(Ajax)控制LED引脚并将A0引脚读数实时显示于网页中\"></a><a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-web-server/a0-pin-control/\">(Ajax)控制LED引脚并将A0引脚读数实时显示于网页中</a></h2></li>\n<li><h2 id=\"JavaScript-通过网页图形界面控制ESP8266的PWM引脚\"><a href=\"#JavaScript-通过网页图形界面控制ESP8266的PWM引脚\" class=\"headerlink\" title=\"(JavaScript)通过网页图形界面控制ESP8266的PWM引脚\"></a><a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-web-server/javascript-know-pwm-control/\">(JavaScript)通过网页图形界面控制ESP8266的PWM引脚</a></h2></li>\n<li><h2 id=\"JavaScript-使用指针表显示模拟输入引脚数值\"><a href=\"#JavaScript-使用指针表显示模拟输入引脚数值\" class=\"headerlink\" title=\"(JavaScript)使用指针表显示模拟输入引脚数值\"></a><a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-web-server/javascript-analog-input-gauge/\">(JavaScript)使用指针表显示模拟输入引脚数值</a></h2></li>\n<li><h2 id=\"通过网页将文件上传到ESP8266开发板闪存文件系统\"><a href=\"#通过网页将文件上传到ESP8266开发板闪存文件系统\" class=\"headerlink\" title=\"通过网页将文件上传到ESP8266开发板闪存文件系统\"></a><a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-web-server/file-upload-server/\">通过网页将文件上传到ESP8266开发板闪存文件系统</a></h2></li>\n</ul>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"安装文, 档快速开始","link":"https://butterfly.js.org/posts/21cfbf15/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"Butterfly主题 帮助文档"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"一、ESP8266闪存文件系统基本操作\"><a href=\"#一、ESP8266闪存文件系统基本操作\" class=\"headerlink\" title=\"一、ESP8266闪存文件系统基本操作\"></a>一、<a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-operation/\">ESP8266闪存文件系统基本操作</a></h1><p>当我们上传程序给ESP8266时，我们的程序具体存放在什么地方呢？</p>\n<p>每一个ESP8266都配有一个闪存，这个闪存很像是一个小硬盘，我们上传的文件就被存放在这个闪存里。这个闪存的全称是Serial Peripheral Interface Flash File System（SPIFFS）。</p>\n<p>除了可以存放上传的程序以外，我们还可以将网页文件或者系统配置文件存放在ESP8266的闪存中。在这节课里，我们将学习如何利用程序对闪存文件系统（SPIFFS）进行文件读取和修改。</p>\n<h2 id=\"1、通过程序向闪存文件系统写入信息\"><a href=\"#1、通过程序向闪存文件系统写入信息\" class=\"headerlink\" title=\"1、通过程序向闪存文件系统写入信息\"></a>1、通过程序向闪存文件系统写入信息</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**********************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">项目名称/Project           : 零基础入门学用物联网</span></span><br><span class=\"line\"><span class=\"comment\">程序名称/Program name      : esp8266-flash-write</span></span><br><span class=\"line\"><span class=\"comment\">团队/Team                 : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">程序目的/Purpose           : 此程序用于演示如何向NodeMCU的SPIFFS中建立名为</span></span><br><span class=\"line\"><span class=\"comment\">                            notes.txt的文件，程序还将向该文件写入信息。</span></span><br><span class=\"line\"><span class=\"comment\">-----------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">函数说明：</span></span><br><span class=\"line\"><span class=\"comment\">SPIFFS.open(file_name, &quot;w&quot;); </span></span><br><span class=\"line\"><span class=\"comment\">以上函数有两个参数：</span></span><br><span class=\"line\"><span class=\"comment\">第一个参数是被操作的文件名称，本示例中该文件为/notes.txt</span></span><br><span class=\"line\"><span class=\"comment\">第二个参数&quot;w&quot; 代表写入文件信息。（如需了解如何读取信息，请参阅示例程序esp8266-flash-read）</span></span><br><span class=\"line\"><span class=\"comment\">***********************************************************************/</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;FS.h&gt;</span>  <span class=\"comment\">//★★★</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\">String file_name = <span class=\"string\">&quot;/taichi-maker/notes.txt&quot;</span>; <span class=\"comment\">//被读取的文件位置和名称★★★</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">setup</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  Serial.begin(<span class=\"number\">9600</span>);</span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot;SPIFFS format start&quot;</span>);</span><br><span class=\"line\">  SPIFFS.format();    \t\t\t<span class=\"comment\">// 格式化SPIFFS★★★</span></span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot;SPIFFS format finish&quot;</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(SPIFFS.begin())&#123; \t\t\t<span class=\"comment\">// 启动SPIFFS★★★</span></span><br><span class=\"line\">    Serial.println(<span class=\"string\">&quot;SPIFFS Started.&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    Serial.println(<span class=\"string\">&quot;SPIFFS Failed to Start.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  File dataFile = SPIFFS.open(file_name, <span class=\"string\">&quot;w&quot;</span>);<span class=\"comment\">// 建立File对象用于向SPIFFS中的file对象（即/notes.txt）写入信息★★★</span></span><br><span class=\"line\">  dataFile.println(<span class=\"string\">&quot;Hello IOT World.&quot;</span>);       <span class=\"comment\">// 向dataFile写入字符串信息★★★</span></span><br><span class=\"line\">  dataFile.close();                           <span class=\"comment\">// 完成文件写入后关闭文件★★★</span></span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot;Finished Writing data to SPIFFS&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">loop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在使用SPIFFS存储文件以前，我们必须使用<code>#include &quot;FS.h&quot;</code>,如以上程序第18行所示。</p>\n<p>程序第20行，我们建立了一个字符串变量。该变量用于存储文件位置和文件名。其中<code>/</code>代表根目录。<code>/taichi-maker/</code>代表根目录下的<code>taichi-maker</code>目录。<code>notes.txt</code>代表着文件名称。</p>\n<p>程序第27行<code>SPIFFS.format();</code>是对闪存文件系统进行格式化。这很想是我们对u盘进行格式化的操作。您无需每次使用闪存文件系统都对它进行格式化操作。这里仅仅是为了演示如何使用<code>SPIFFS.format();</code>。</p>\n<p>程序第30行，<code>SPIFFS.begin()</code>用于启动闪存文件系统。在每次使用闪存文件系统以前都需要执行这一操作。如果闪存文件系统成功启动，该函数的返回值为布尔型，如果成功启动闪存文件形同，则返回真。否则将返回假。</p>\n<p>程序第36行，<code>File dataFile = SPIFFS.open(file_name, &quot;w&quot;);</code>这条语句中，open函数可用于对SPIFFS进行操作。该函数共有两个参数。第一个参数<code>file_name</code>是被操作的文件名称，本示例中该文件为&#x2F;taichi-maker&#x2F;notes.txt<br>第二个参数<code>&quot;w&quot;</code>代表此操作为向SPIFFS写入文件信息。请注意：如果文件系统没有&#x2F;taichi-maker&#x2F;notes.txt文件，此操作将会在文件系统中建立该文件。如果文件系统有该文件，则程序将会重新建立该文件，即原有文件信息将会被覆盖。</p>\n<p>程序第37行<code>dataFile.println(&quot;Hello IOT World.&quot;);</code>用于向dataFile文件写入信息。信息内容为“Hello IOT World.”。</p>\n<p>程序第38行<code>dataFile.close();</code>用于关闭dataFile文件。结束文件操作后，应执行此操作。</p>\n<h2 id=\"2、通过程序从闪存文件系统读取信息\"><a href=\"#2、通过程序从闪存文件系统读取信息\" class=\"headerlink\" title=\"2、通过程序从闪存文件系统读取信息\"></a>2、通过程序从闪存文件系统读取信息</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**********************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">项目名称/Project           : 零基础入门学用物联网</span></span><br><span class=\"line\"><span class=\"comment\">程序名称/Program name      : esp8266-flash-read</span></span><br><span class=\"line\"><span class=\"comment\">团队/Team                 : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">程序目的/Purpose           : 此程序用于演示如何从NodeMCU的内置SPIFFS中存储的文件notes.txt读取数据。</span></span><br><span class=\"line\"><span class=\"comment\">                           notes.txt 文件内容将会通过串口监视器显示出来供用户确认。</span></span><br><span class=\"line\"><span class=\"comment\">                           注意在使用本程序以前需要先将notes.txt 文件上传到NodeMCU开发板的SPIFFS中</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">-----------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">函数说明：</span></span><br><span class=\"line\"><span class=\"comment\">SPIFFS.open(file_name, &quot;r&quot;); </span></span><br><span class=\"line\"><span class=\"comment\">以上SPIFFS函数有两个参数：</span></span><br><span class=\"line\"><span class=\"comment\">第一个参数是被操作的文件名称，本示例中该文件为/notes.txt</span></span><br><span class=\"line\"><span class=\"comment\">第二个参数&quot;r&quot; 代表读取文件信息。（如需了解如何写入信息，请参阅示例程序esp8266-flash-write）</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">***********************************************************************/</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;FS.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\">String file_name = <span class=\"string\">&quot;/taichi-maker/notes.txt&quot;</span>;              <span class=\"comment\">//被读取的文件位置和名称</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">setup</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  Serial.begin(<span class=\"number\">9600</span>);</span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(SPIFFS.begin())&#123; <span class=\"comment\">// 启动闪存文件系统</span></span><br><span class=\"line\">    Serial.println(<span class=\"string\">&quot;SPIFFS Started.&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    Serial.println(<span class=\"string\">&quot;SPIFFS Failed to Start.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">//确认闪存中是否有file_name文件★★★</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (SPIFFS.exists(file_name))&#123;</span><br><span class=\"line\">    Serial.print(file_name);</span><br><span class=\"line\">    Serial.println(<span class=\"string\">&quot; FOUND.&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    Serial.print(file_name);</span><br><span class=\"line\">    Serial.print(<span class=\"string\">&quot; NOT FOUND.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">//建立File对象用于从SPIFFS中读取文件★★★</span></span><br><span class=\"line\">  File dataFile = SPIFFS.open(file_name, <span class=\"string\">&quot;r&quot;</span>); </span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">//读取文件内容并且通过串口监视器输出文件信息★★★</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;dataFile.size(); i++)&#123;</span><br><span class=\"line\">    Serial.print((<span class=\"type\">char</span>)dataFile.read());       </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">//完成文件读取后关闭文件</span></span><br><span class=\"line\">  dataFile.close();                           </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">loop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上程序第36行，<code>SPIFFS.exists(file_name)</code>用于检查闪存文件系统中有file_name文件（注：file_name变量具体信息在本程序第23行）。该函数返回值为布尔型。如果文件存在则返回真，否则将返回假。</p>\n<p>以上程序第45行，<code>File dataFile = SPIFFS.open(file_name, &quot;r&quot;);</code>这条语句中，open函数可用于对SPIFFS进行操作。该函数共有两个参数。第一个参数<code>file_name</code>是被操作的文件名称，本示例中该文件为&#x2F;taichi-maker&#x2F;notes.txt<br>第二个参数<code>&quot;r&quot;</code>代表此操作为读取文件信息。</p>\n<p>以上程序第48行的for循环语句中，循环条件使用了函数<code>dataFile.size()</code>。该函数将会返回dataFile的大小。循环语句体中，<code>dataFile.read()</code>将会读取dataFile文件内容。每调用一次该含税都会返回dataFile文件中一个字符。再次调用，将会返回下一个字符。以此类推，直到dataFile结尾。通过for循环语句，程序将会依次读取dataFile文件内容，并且将文件内容逐字符输出于串口监视器中。</p>\n<h2 id=\"3、通过程序向闪存文件系统文件添加信息\"><a href=\"#3、通过程序向闪存文件系统文件添加信息\" class=\"headerlink\" title=\"3、通过程序向闪存文件系统文件添加信息\"></a>3、通过程序向闪存文件系统文件添加信息</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**********************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">项目名称/Project           : 零基础入门学用物联网</span></span><br><span class=\"line\"><span class=\"comment\">程序名称/Program name      : esp8266-flash-append</span></span><br><span class=\"line\"><span class=\"comment\">团队/Team                 : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">程序目的/Purpose           : 此程序用于演示如何向NodeMCU的内置SPIFFS中存储的文件</span></span><br><span class=\"line\"><span class=\"comment\">                            notes.txt添加数据。                      </span></span><br><span class=\"line\"><span class=\"comment\">-----------------------------------------------------------------------  </span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">函数说明：</span></span><br><span class=\"line\"><span class=\"comment\">SPIFFS.open(file_name, &quot;a&quot;); </span></span><br><span class=\"line\"><span class=\"comment\">以上SPIFFS函数有两个参数：</span></span><br><span class=\"line\"><span class=\"comment\">第一个参数是被操作的文件名称，本示例中该文件为/notes.txt</span></span><br><span class=\"line\"><span class=\"comment\">第二个参数&quot;a&quot; 代表添加文件信息。（如需了解如何读取信息，请参阅示例程序esp8266-flash-read）</span></span><br><span class=\"line\"><span class=\"comment\">此示例程序所演示的是向SPIFFS中的文件里添加信息。这一操作写入信息有所区别。</span></span><br><span class=\"line\"><span class=\"comment\">添加信息是不会删除文件内原有信息，而是在原有信息后面添加新的信息。</span></span><br><span class=\"line\"><span class=\"comment\">但写入操作（示例 esp8266-flash-write.ino）是将文件内容完全清除，重新写入新信息。    </span></span><br><span class=\"line\"><span class=\"comment\">***********************************************************************/</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;FS.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\">String file_name = <span class=\"string\">&quot;/taichi-maker/notes.txt&quot;</span>;              <span class=\"comment\">//被读取的文件位置和名称</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">setup</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  Serial.begin(<span class=\"number\">9600</span>);</span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(SPIFFS.begin())&#123; <span class=\"comment\">// 启动闪存文件系统</span></span><br><span class=\"line\">    Serial.println(<span class=\"string\">&quot;SPIFFS Started.&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    Serial.println(<span class=\"string\">&quot;SPIFFS Failed to Start.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">//确认闪存中是否有file_name文件</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (SPIFFS.exists(file_name))&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Serial.print(file_name);</span><br><span class=\"line\">    Serial.println(<span class=\"string\">&quot; FOUND.&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    File dataFile = SPIFFS.open(file_name, <span class=\"string\">&quot;a&quot;</span>);<span class=\"comment\">// 建立File对象用于向SPIFFS中的file对象（即/notes.txt）写入信息★★★</span></span><br><span class=\"line\">    dataFile.println(<span class=\"string\">&quot;This is Appended Info.&quot;</span>); <span class=\"comment\">// 向dataFile添加字符串信息★★★</span></span><br><span class=\"line\">    dataFile.close();                           <span class=\"comment\">// 完成文件操作后关闭文件★★★   </span></span><br><span class=\"line\">    Serial.println(<span class=\"string\">&quot;Finished Appending data to SPIFFS&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    Serial.print(file_name);</span><br><span class=\"line\">    Serial.print(<span class=\"string\">&quot; NOT FOUND.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">                        </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">loop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在以上程序的第40行里，<code>File dataFile = SPIFFS.open(file_name, &quot;a&quot;);</code>这条语句中，open函数可用于对SPIFFS进行操作。该函数共有两个参数。第一个参数<code>file_name</code>是被操作的文件名称,第二个参数<code>&quot;a&quot;</code>代表向该文件添加信息。请留意，此处的添加信息是不会删除文件内原有信息，而是在原有信息后面添加新的信息。这与但写入操作是有所区别的。写入操作是将文件内容完全清除，重新写入新信息。<br>,<br>程序的第41行，<code>dataFile.println(&quot;This is Appended Info.&quot;)</code>，此语句作用将会向dataFile文件尾部添加双引号中的信息内容，也就是在文件尾部添加“This is Appended Info.”。</p>\n<h2 id=\"4、通过程序读取目录内容\"><a href=\"#4、通过程序读取目录内容\" class=\"headerlink\" title=\"4、通过程序读取目录内容\"></a>4、通过程序读取目录内容</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**********************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">项目名称/Project           : 零基础入门学用物联网</span></span><br><span class=\"line\"><span class=\"comment\">程序名称/Program name      : esp8266-flash-folder-read</span></span><br><span class=\"line\"><span class=\"comment\">团队/Team                 : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">程序目的/Purpose           : 此程序用于演示如何从NodeMCU的内置SPIFFS中文件夹里读取文件信息</span></span><br><span class=\"line\"><span class=\"comment\">                           文件夹内容将会通过串口监视器显示出来。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">-----------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">函数说明：</span></span><br><span class=\"line\"><span class=\"comment\">SPIFFS.openDir(folder_name);</span></span><br><span class=\"line\"><span class=\"comment\">以上函数打开指定目录并返回一个目录对象实例。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">***********************************************************************/</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;FS.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\">String file_name = <span class=\"string\">&quot;/taichi-maker/myFile.txt&quot;</span>; <span class=\"comment\">//被读取的文件位置和名称</span></span><br><span class=\"line\">String folder_name = <span class=\"string\">&quot;/taichi-maker&quot;</span>;         <span class=\"comment\">//被读取的文件夹★★★</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">setup</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  Serial.begin(<span class=\"number\">9600</span>);</span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(SPIFFS.begin())&#123; <span class=\"comment\">// 启动闪存文件系统</span></span><br><span class=\"line\">    Serial.println(<span class=\"string\">&quot;SPIFFS Started.&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    Serial.println(<span class=\"string\">&quot;SPIFFS Failed to Start.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  File dataFile = SPIFFS.open(file_name, <span class=\"string\">&quot;w&quot;</span>);<span class=\"comment\">// 建立File对象用于向SPIFFS中的file对象（即myFile.txt）写入信息</span></span><br><span class=\"line\">  dataFile.println(<span class=\"string\">&quot;Hello Taichi-Maker.&quot;</span>);    <span class=\"comment\">// 向dataFile写入字符串信息</span></span><br><span class=\"line\">  dataFile.close();                           <span class=\"comment\">// 完成文件写入后关闭文件</span></span><br><span class=\"line\">  Serial.println(F(<span class=\"string\">&quot;Finished Writing data to SPIFFS&quot;</span>));</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 显示目录中文件内容以及文件大小</span></span><br><span class=\"line\">  Dir dir = SPIFFS.openDir(folder_name);  <span class=\"comment\">// 建立“目录”对象★★★</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">while</span> (dir.next()) &#123;  <span class=\"comment\">// dir.next()用于检查目录中是否还有“下一个文件”★★★</span></span><br><span class=\"line\">    Serial.println(dir.fileName()); <span class=\"comment\">// 输出文件名★★★</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">loop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>本程序第23行建立了一个字符串变量。该变量用于存储文件夹名。其中<code>/</code>代表根目录。<code>/taichi-maker/</code>代表根目录下的<code>taichi-maker</code>目录。</p>\n<p>本程序第41行<code>SPIFFS.openDir(folder_name)</code>中的openDir函数函将返回一个“目录”对象并且赋值给dir。此”目录”对象正是folder_name所存储的<code>/taichi-maker/</code>目录。后续程序对dir的所有操作都是针对<code>/taichi-maker/</code>所执行的。</p>\n<p>本程序第43行while循环语句的循环条件是<code>dir.next()</code>的返回值。<code>dir.next()</code>函数用于检查dir文件夹内的文件。我们可以想象dir文件夹里有一个指针，每一次调用next函数都会让指针向下挪动一格。每一次挪动一格，如果下一个位置有文件，则返回真。否则将会返回假。因此，<code>while (dir.next())</code>循环语句中的内容会依次显示dir文件夹中的每一个文件的文件名。</p>\n<h2 id=\"5、从闪存文件系统中删除文件\"><a href=\"#5、从闪存文件系统中删除文件\" class=\"headerlink\" title=\"5、从闪存文件系统中删除文件\"></a>5、从闪存文件系统中删除文件</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**********************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">项目名称/Project           : 零基础入门学用物联网</span></span><br><span class=\"line\"><span class=\"comment\">程序名称/Program name      : esp8266-flash-remove</span></span><br><span class=\"line\"><span class=\"comment\">团队/Team                 : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">程序目的/Purpose           : 此程序用于演示如何删除SPIFFS中存储的文件       </span></span><br><span class=\"line\"><span class=\"comment\">***********************************************************************/</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;FS.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\">String file_name = <span class=\"string\">&quot;/taichi-maker/notes.txt&quot;</span>;              <span class=\"comment\">//被读取的文件位置和名称</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">setup</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  Serial.begin(<span class=\"number\">9600</span>);</span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(SPIFFS.begin())&#123; <span class=\"comment\">// 启动闪存文件系统</span></span><br><span class=\"line\">    Serial.println(<span class=\"string\">&quot;SPIFFS Started.&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    Serial.println(<span class=\"string\">&quot;SPIFFS Failed to Start.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//从闪存中删除file_name文件★★★</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (SPIFFS.remove(file_name))&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Serial.print(file_name);</span><br><span class=\"line\">    Serial.println(<span class=\"string\">&quot; remove sucess&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    Serial.print(file_name);</span><br><span class=\"line\">    Serial.println(<span class=\"string\">&quot; remove fail&quot;</span>);</span><br><span class=\"line\">  &#125;                       </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">loop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上程序中第25行，通过使用<code>SPIFFS.remove(file_name)</code>将<code>file_name</code>所指代的文件进行了删除操作。另外，<code>SPIFFS.remove(file_name)</code>的返回值为布尔型。如果文件删除执行成功则返回真，否则返回假。</p>\n<h2 id=\"6、显示闪存文件系统信息\"><a href=\"#6、显示闪存文件系统信息\" class=\"headerlink\" title=\"6、显示闪存文件系统信息\"></a>6、显示闪存文件系统信息</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**********************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">项目名称/Project           : 零基础入门学用物联网</span></span><br><span class=\"line\"><span class=\"comment\">程序名称/Program name      : esp8266-flash-info</span></span><br><span class=\"line\"><span class=\"comment\">团队/Team                 : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">程序目的/Purpose           : 此程序用于演示如何使用FSInfo对象来显示闪存文件系统状态</span></span><br><span class=\"line\"><span class=\"comment\">-----------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">***********************************************************************/</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;FS.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\">FSInfo fs_info;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">setup</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  Serial.begin(<span class=\"number\">9600</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">  SPIFFS.begin();       <span class=\"comment\">//启动SPIFFS</span></span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot;SPIFFS Started.&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 闪存文件系统信息</span></span><br><span class=\"line\">  SPIFFS.info(fs_info);</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 可用空间总和（单位：字节）</span></span><br><span class=\"line\">  Serial.print(<span class=\"string\">&quot;totalBytes: &quot;</span>);     </span><br><span class=\"line\">  Serial.print(fs_info.totalBytes); </span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot; Bytes&quot;</span>); </span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 已用空间（单位：字节）</span></span><br><span class=\"line\">  Serial.print(<span class=\"string\">&quot;usedBytes: &quot;</span>); </span><br><span class=\"line\">  Serial.print(fs_info.usedBytes);</span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot; Bytes&quot;</span>); </span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 最大文件名字符限制（含路径和&#x27;\\0&#x27;）</span></span><br><span class=\"line\">  Serial.print(<span class=\"string\">&quot;maxPathLength: &quot;</span>); </span><br><span class=\"line\">  Serial.println(fs_info.maxPathLength);</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 最多允许打开文件数量</span></span><br><span class=\"line\">  Serial.print(<span class=\"string\">&quot;maxOpenFiles: &quot;</span>); </span><br><span class=\"line\">  Serial.println(fs_info.maxOpenFiles);</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 存储块大小</span></span><br><span class=\"line\">  Serial.print(<span class=\"string\">&quot;blockSize: &quot;</span>); </span><br><span class=\"line\">  Serial.println(fs_info.blockSize);</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 存储页大小</span></span><br><span class=\"line\">  Serial.print(<span class=\"string\">&quot;pageSize: &quot;</span>);</span><br><span class=\"line\">  Serial.println(fs_info.pageSize);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">loop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上程序第16行语句<code>FSInfo fs_info;</code>建立了FSInfo 对象，用于存储闪存状态信息。</p>\n<p>以上程序第26行语句<code>SPIFFS.info(fs_info);</code>。通过info函数将闪存状态信息赋给fs_info。后续的程序中，通过一系列语句将闪存状态信息通过串口监视器输出。具体信息内容可参考程序注释部分。</p>\n<p>以上是关于ESP8266闪存文件系统的常用功能介绍。关于ESP8266闪存文件系统的更多操作介绍，请参考Arduino ESP8266官方页面中的介绍部分。该页面可点击以下链接前往。</p>\n<p><a href=\"https://arduino-esp8266.readthedocs.io/en/latest/filesystem.html\">https://arduino-esp8266.readthedocs.io/en/latest/filesystem.html</a></p>\n<h1 id=\"二、通过Arduino-IDE向闪存文件系统上传文件\"><a href=\"#二、通过Arduino-IDE向闪存文件系统上传文件\" class=\"headerlink\" title=\"二、通过Arduino IDE向闪存文件系统上传文件\"></a>二、<a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/upload-files/\">通过Arduino IDE向闪存文件系统上传文件</a></h1><h2 id=\"1、下载-Arduino-ESP8266闪存文件插件程序\"><a href=\"#1、下载-Arduino-ESP8266闪存文件插件程序\" class=\"headerlink\" title=\"1、下载 Arduino-ESP8266闪存文件插件程序\"></a>1、下载 Arduino-ESP8266闪存文件插件程序</h2><p>您有两种方法可以下载该插件程序。</p>\n<p><strong>第一种</strong>方法是通过<a href=\"https://github.com/esp8266/arduino-esp8266fs-plugin/releases\">点击此链接进入 Arduino-ESP8266官方GitHub页面下载</a>。详情请见以下截图：</p>\n<p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266fs-download.jpg\" alt=\"esp8266fs下载页面\"></p>\n<p>由于GitHub网站服务器在国外，有些朋友登录该网站会有些困难。如果是这样的话，那么您也可以<a href=\"http://www.taichi-maker.com/homepage/download/#esp8266fs\">点击此链接进入太极创客网站下载页面去下载该插件</a>。</p>\n<h2 id=\"2、确定Arduino-IDE项目文件夹位置\"><a href=\"#2、确定Arduino-IDE项目文件夹位置\" class=\"headerlink\" title=\"2、确定Arduino IDE项目文件夹位置\"></a>2、确定Arduino IDE项目文件夹位置</h2><p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/Arduino-ide-preferences.jpg\" alt=\"Arduino-ide-首选项菜单项\"></p>\n<p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/Arduino-Project-Folder.jpg\" alt=\"Arduino-IDE-项目文件夹位置\"></p>\n<h2 id=\"3、通过资源管理器打开Arduino-IDE项目文件夹并建立tools文件夹\"><a href=\"#3、通过资源管理器打开Arduino-IDE项目文件夹并建立tools文件夹\" class=\"headerlink\" title=\"3、通过资源管理器打开Arduino IDE项目文件夹并建立tools文件夹\"></a>3、通过资源管理器打开Arduino IDE项目文件夹并建立tools文件夹</h2><p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266fs-tools-folder.jpg\" alt=\"在项目文件夹中建立名称为tools的文件夹\"></p>\n<h2 id=\"4、解压缩esp8266fs插件压缩包，并将解压缩后的文件内容粘贴到项目文件夹中\"><a href=\"#4、解压缩esp8266fs插件压缩包，并将解压缩后的文件内容粘贴到项目文件夹中\" class=\"headerlink\" title=\"4、解压缩esp8266fs插件压缩包，并将解压缩后的文件内容粘贴到项目文件夹中\"></a>4、解压缩esp8266fs插件压缩包，并将解压缩后的文件内容粘贴到项目文件夹中</h2><p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266fs-unzip.jpg\" alt=\"esp8266fs解压缩\"></p>\n<p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266fs-unzipped.jpg\" alt=\"解压缩后可找到esp8266fs文件夹\"></p>\n<p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266fs-paste.jpg\" alt=\"将esp8266fs文件夹粘贴到tools文件夹里\"></p>\n<h2 id=\"5、重新启动Arduino-IDE\"><a href=\"#5、重新启动Arduino-IDE\" class=\"headerlink\" title=\"5、重新启动Arduino IDE\"></a>5、重新启动Arduino IDE</h2><h2 id=\"检查“工具”菜单确认插件安装\"><a href=\"#检查“工具”菜单确认插件安装\" class=\"headerlink\" title=\"检查“工具”菜单确认插件安装\"></a>检查“工具”菜单确认插件安装</h2><p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266-data-upload-menu.jpg\" alt=\"ESP8266 data upload 菜单项\"></p>\n<h2 id=\"6、根据上传的文件总大小来设置闪存大小\"><a href=\"#6、根据上传的文件总大小来设置闪存大小\" class=\"headerlink\" title=\"6、根据上传的文件总大小来设置闪存大小\"></a>6、根据上传的文件总大小来设置闪存大小</h2><p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266-flash-size-settings.jpg\" alt=\"设置esp8266闪存大小\"></p>\n<h2 id=\"7、将需要上传的文件保存在程序路径下的data文件夹中\"><a href=\"#7、将需要上传的文件保存在程序路径下的data文件夹中\" class=\"headerlink\" title=\"7、将需要上传的文件保存在程序路径下的data文件夹中\"></a>7、将需要上传的文件保存在程序路径下的data文件夹中</h2><p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266-flash-data-storage.jpg\" alt=\"将需要上传到esp8266闪存文件系统的文件保存在data目录中\"></p>\n<h2 id=\"8、将需要上传的文件保存在程序路径下的data文件夹中\"><a href=\"#8、将需要上传的文件保存在程序路径下的data文件夹中\" class=\"headerlink\" title=\"8、将需要上传的文件保存在程序路径下的data文件夹中\"></a>8、将需要上传的文件保存在程序路径下的data文件夹中</h2><p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/esp8266-flash-data-upload.jpg\" alt=\"通过ESP8266 Sketch Data Upload可以将data文件夹里的文件上传\"></p>\n<p>假如您不确定具体文件如何存储，请点击以下链接下载示例程序压缩包。<br><a href=\"http://www.taichi-maker.com/wp-content/uploads/2020/02/esp8266-data-upload.zip\">文件上传示例程序</a></p>\n<h1 id=\"三、使用闪存文件系统建立功能丰富的网络服务器\"><a href=\"#三、使用闪存文件系统建立功能丰富的网络服务器\" class=\"headerlink\" title=\"三、使用闪存文件系统建立功能丰富的网络服务器\"></a>三、<a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-web-server/\">使用闪存文件系统建立功能丰富的网络服务器</a></h1><p>掌握了如何向ESP8266开发板的闪存文件上传文件，我们就有了更多的空间来存储更加丰富的网页资源，从而让我们实现功能更加丰富的物联网项目。</p>\n<p>本节教程里，我们将向您介绍一系列ESP8266开发板搭建的网页服务示例。通过这些示例，您可以通过物联网控制ESP8266开发板的引脚以及获取引脚状态。这些示例的功能相对单一，这是因为这些示例的目的是为您提供项目搭建的启发。在后续的教程中里，我们和为您提供一系列完整的物联网项目示例，供您学习参考。</p>\n<ul>\n<li><h2 id=\"在网页中加载闪存文件系统中的图片、CSS和JavaScript\"><a href=\"#在网页中加载闪存文件系统中的图片、CSS和JavaScript\" class=\"headerlink\" title=\"在网页中加载闪存文件系统中的图片、CSS和JavaScript\"></a><a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-web-server/load-imagecsss-javascript/\">在网页中加载闪存文件系统中的图片、CSS和JavaScript</a></h2></li>\n<li><h2 id=\"通过网页控制ESP8266开发板的引脚\"><a href=\"#通过网页控制ESP8266开发板的引脚\" class=\"headerlink\" title=\"通过网页控制ESP8266开发板的引脚\"></a><a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-web-server/esp8266-pin-control/\">通过网页控制ESP8266开发板的引脚</a></h2></li>\n<li><h2 id=\"通过网页文本框控制ESP8266开发板的PWM引脚\"><a href=\"#通过网页文本框控制ESP8266开发板的PWM引脚\" class=\"headerlink\" title=\"通过网页文本框控制ESP8266开发板的PWM引脚\"></a><a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-web-server/text-pwm-pin-control/\">通过网页文本框控制ESP8266开发板的PWM引脚</a></h2></li>\n<li><h2 id=\"Ajax-控制LED引脚并将A0引脚读数实时显示于网页中\"><a href=\"#Ajax-控制LED引脚并将A0引脚读数实时显示于网页中\" class=\"headerlink\" title=\"(Ajax)控制LED引脚并将A0引脚读数实时显示于网页中\"></a><a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-web-server/a0-pin-control/\">(Ajax)控制LED引脚并将A0引脚读数实时显示于网页中</a></h2></li>\n<li><h2 id=\"JavaScript-通过网页图形界面控制ESP8266的PWM引脚\"><a href=\"#JavaScript-通过网页图形界面控制ESP8266的PWM引脚\" class=\"headerlink\" title=\"(JavaScript)通过网页图形界面控制ESP8266的PWM引脚\"></a><a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-web-server/javascript-know-pwm-control/\">(JavaScript)通过网页图形界面控制ESP8266的PWM引脚</a></h2></li>\n<li><h2 id=\"JavaScript-使用指针表显示模拟输入引脚数值\"><a href=\"#JavaScript-使用指针表显示模拟输入引脚数值\" class=\"headerlink\" title=\"(JavaScript)使用指针表显示模拟输入引脚数值\"></a><a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-web-server/javascript-analog-input-gauge/\">(JavaScript)使用指针表显示模拟输入引脚数值</a></h2></li>\n<li><h2 id=\"通过网页将文件上传到ESP8266开发板闪存文件系统\"><a href=\"#通过网页将文件上传到ESP8266开发板闪存文件系统\" class=\"headerlink\" title=\"通过网页将文件上传到ESP8266开发板闪存文件系统\"></a><a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/spiffs-web-server/file-upload-server/\">通过网页将文件上传到ESP8266开发板闪存文件系统</a></h2></li>\n</ul>\n"},{"title":"磨刀不误砍柴工","abbrlink":"f73586b","date":"2023-10-29T14:52:49.000Z","keywords":null,"description":"一些办公小操作","password":null,"abstract":null,"message":null,"cover":"http://qiniu.hanvon.top/blog_backgounnd/praire.jpg","_content":"\n2023-10-29 早上上班 磨了磨刀：\n# word批量转pdf\n## 法一：\n#### 1.在桌面随意新建一个doc文档，然后打开后同时按alt和F11，双击下图方框。\n![Double ThisDocument](https://raw.githubusercontent.com/wild-civil/typora_img/main/%E7%A3%A8%E5%88%80%E4%B8%8D%E8%AF%AF%E7%A0%8D%E6%9F%B4%E5%B7%A5/202310301033846.png)\n#### 2.将代码复制\n![copy&paste](https://raw.githubusercontent.com/wild-civil/typora_img/main/%E7%A3%A8%E5%88%80%E4%B8%8D%E8%AF%AF%E7%A0%8D%E6%9F%B4%E5%B7%A5/202310301033052.png)\n```text\nSub BatchConvertToPDF()\n    Dim destFolderPath As String\n    destFolderPath = GetFolderPath\n    If destFolderPath <> Empty Then\n        Dim path As Variant\n        For Each path In GetFilePaths()\n            Dim indexOfSlash, indexOfDot As Integer\n            indexOfSlash = InStrRev(path, \"\\\")\n            indexOfDot = InStrRev(path, \".\")\n             \n            Dim destFilePath As String\n            destFilePath = destFolderPath + Mid(path, indexOfSlash, indexOfDot - indexOfSlash) + \".pdf\"\n             \n            ConvertToPDF path, destFilePath\n        Next path\n    End If\nEnd Sub\n \nFunction GetFilePaths()\n    Dim folderPath As String\n    With Application.FileDialog(msoFileDialogFilePicker)\n        .Filters.Add \"word文件\", \"*.doc; *.docx; *.docm\"\n        .Title = \"请择要转换的word文件\"\n        If .Show = -1 Then\n            Set GetFilePaths = .SelectedItems\n        End If\n    End With\nEnd Function\n \nFunction GetFolderPath()\n    Dim folderPath As String\n    With Application.FileDialog(msoFileDialogFolderPicker)\n        .AllowMultiSelect = False\n        .Title = \"请选择要存放的目录\"\n        If .Show = -1 Then\n            GetFolderPath = .SelectedItems(1)\n        End If\n    End With\nEnd Function\n \nSub ConvertToPDF(srcPath As Variant, destPath As String)\n    Documents.Open FileName:=srcPath, ConfirmConversions:=False, _\n        ReadOnly:=False, AddToRecentFiles:=False, PasswordDocument:=\"\", _\n        PasswordTemplate:=\"\", Revert:=False, WritePasswordDocument:=\"\", _\n        WritePasswordTemplate:=\"\", Format:=wdOpenFormatAuto, XMLTransform:=\"\"\n    ActiveDocument.ExportAsFixedFormat OutputFileName:= _\n        destPath, ExportFormat:= _\n        wdExportFormatPDF, OpenAfterExport:=False, OptimizeFor:= _\n        wdExportOptimizeForOnScreen, Range:=wdExportAllDocument, From:=1, To:=1, _\n        Item:=wdExportDocumentContent, IncludeDocProps:=True, KeepIRM:=True, _\n        CreateBookmarks:=wdExportCreateNoBookmarks, DocStructureTags:=True, _\n        BitmapMissingFonts:=True, UseISO19005_1:=False\n    ActiveDocument.Close\nEnd Sub\n```\n#### 3.按F5运行代码，选择pdf要保存的位置，需要转换的word（word文件可多选），等待转换成功。\n\n## 法二：\n（有福昕的前提下）\n#### 非常简单 也很好用啊\n![fuxin](https://raw.githubusercontent.com/wild-civil/typora_img/main/%E7%A3%A8%E5%88%80%E4%B8%8D%E8%AF%AF%E7%A0%8D%E6%9F%B4%E5%B7%A5/202310301033987.png)\n福昕高级PDF编辑器 https://www.aliyundrive.com/s/Ye8gpyiSSiC 提取码: iz27 点击链接保存，或者复制本段内容，打开「阿里云盘」APP ，无需下载极速在线查看，视频原画倍速播放。\n\n# 批量复制文件名称\n\n#### 非常简单：选中要复制的文件，按住Shift再右键，复制文件地址\n![copy_adrres](https://raw.githubusercontent.com/wild-civil/typora_img/main/%E7%A3%A8%E5%88%80%E4%B8%8D%E8%AF%AF%E7%A0%8D%E6%9F%B4%E5%B7%A5/202310301033572.png)\n#### 可以先复制到记事本，然后 Ctrl+H 替换多余的部分为空\n![replace](https://raw.githubusercontent.com/wild-civil/typora_img/main/%E7%A3%A8%E5%88%80%E4%B8%8D%E8%AF%AF%E7%A0%8D%E6%9F%B4%E5%B7%A5/202310301033924.png)\n\n\n# 文件批量重命名\n#### 不必多说，上链接\n\nReNamer Pro 7.3.exe https://www.aliyundrive.com/s/17KLzJbQMAm 点击链接保存，或者复制本段内容，打开「阿里云盘」APP ，无需下载极速在线查看，视频原画倍速播放。\n\n阿里云超过200文件数目则无法分享（我没开会员），因此大家拿到手后双击exe文件可以选择安装便携版\n![portable_v](https://raw.githubusercontent.com/wild-civil/typora_img/main/%E7%A3%A8%E5%88%80%E4%B8%8D%E8%AF%AF%E7%A0%8D%E6%9F%B4%E5%B7%A5/202310301033157.png)\n\n然后选中文即可\n![simple_chinese](https://raw.githubusercontent.com/wild-civil/typora_img/main/%E7%A3%A8%E5%88%80%E4%B8%8D%E8%AF%AF%E7%A0%8D%E6%9F%B4%E5%B7%A5/202310301033412.png)\n\n![on_your_way](https://raw.githubusercontent.com/wild-civil/typora_img/main/%E7%A3%A8%E5%88%80%E4%B8%8D%E8%AF%AF%E7%A0%8D%E6%9F%B4%E5%B7%A5/202310301035291.png)\n非常简单，非常方便\n","source":"_posts/磨刀不误砍柴工.md","raw":"---\ntitle: 磨刀不误砍柴工\nabbrlink: f73586b\ndate: 2023-10-29 22:52:49\ntags:\nkeywords:\ndescription: 一些办公小操作\npassword:\nabstract:\nmessage:\ncover:\n---\n\n2023-10-29 早上上班 磨了磨刀：\n# word批量转pdf\n## 法一：\n#### 1.在桌面随意新建一个doc文档，然后打开后同时按alt和F11，双击下图方框。\n![Double ThisDocument](https://raw.githubusercontent.com/wild-civil/typora_img/main/%E7%A3%A8%E5%88%80%E4%B8%8D%E8%AF%AF%E7%A0%8D%E6%9F%B4%E5%B7%A5/202310301033846.png)\n#### 2.将代码复制\n![copy&paste](https://raw.githubusercontent.com/wild-civil/typora_img/main/%E7%A3%A8%E5%88%80%E4%B8%8D%E8%AF%AF%E7%A0%8D%E6%9F%B4%E5%B7%A5/202310301033052.png)\n```text\nSub BatchConvertToPDF()\n    Dim destFolderPath As String\n    destFolderPath = GetFolderPath\n    If destFolderPath <> Empty Then\n        Dim path As Variant\n        For Each path In GetFilePaths()\n            Dim indexOfSlash, indexOfDot As Integer\n            indexOfSlash = InStrRev(path, \"\\\")\n            indexOfDot = InStrRev(path, \".\")\n             \n            Dim destFilePath As String\n            destFilePath = destFolderPath + Mid(path, indexOfSlash, indexOfDot - indexOfSlash) + \".pdf\"\n             \n            ConvertToPDF path, destFilePath\n        Next path\n    End If\nEnd Sub\n \nFunction GetFilePaths()\n    Dim folderPath As String\n    With Application.FileDialog(msoFileDialogFilePicker)\n        .Filters.Add \"word文件\", \"*.doc; *.docx; *.docm\"\n        .Title = \"请择要转换的word文件\"\n        If .Show = -1 Then\n            Set GetFilePaths = .SelectedItems\n        End If\n    End With\nEnd Function\n \nFunction GetFolderPath()\n    Dim folderPath As String\n    With Application.FileDialog(msoFileDialogFolderPicker)\n        .AllowMultiSelect = False\n        .Title = \"请选择要存放的目录\"\n        If .Show = -1 Then\n            GetFolderPath = .SelectedItems(1)\n        End If\n    End With\nEnd Function\n \nSub ConvertToPDF(srcPath As Variant, destPath As String)\n    Documents.Open FileName:=srcPath, ConfirmConversions:=False, _\n        ReadOnly:=False, AddToRecentFiles:=False, PasswordDocument:=\"\", _\n        PasswordTemplate:=\"\", Revert:=False, WritePasswordDocument:=\"\", _\n        WritePasswordTemplate:=\"\", Format:=wdOpenFormatAuto, XMLTransform:=\"\"\n    ActiveDocument.ExportAsFixedFormat OutputFileName:= _\n        destPath, ExportFormat:= _\n        wdExportFormatPDF, OpenAfterExport:=False, OptimizeFor:= _\n        wdExportOptimizeForOnScreen, Range:=wdExportAllDocument, From:=1, To:=1, _\n        Item:=wdExportDocumentContent, IncludeDocProps:=True, KeepIRM:=True, _\n        CreateBookmarks:=wdExportCreateNoBookmarks, DocStructureTags:=True, _\n        BitmapMissingFonts:=True, UseISO19005_1:=False\n    ActiveDocument.Close\nEnd Sub\n```\n#### 3.按F5运行代码，选择pdf要保存的位置，需要转换的word（word文件可多选），等待转换成功。\n\n## 法二：\n（有福昕的前提下）\n#### 非常简单 也很好用啊\n![fuxin](https://raw.githubusercontent.com/wild-civil/typora_img/main/%E7%A3%A8%E5%88%80%E4%B8%8D%E8%AF%AF%E7%A0%8D%E6%9F%B4%E5%B7%A5/202310301033987.png)\n福昕高级PDF编辑器 https://www.aliyundrive.com/s/Ye8gpyiSSiC 提取码: iz27 点击链接保存，或者复制本段内容，打开「阿里云盘」APP ，无需下载极速在线查看，视频原画倍速播放。\n\n# 批量复制文件名称\n\n#### 非常简单：选中要复制的文件，按住Shift再右键，复制文件地址\n![copy_adrres](https://raw.githubusercontent.com/wild-civil/typora_img/main/%E7%A3%A8%E5%88%80%E4%B8%8D%E8%AF%AF%E7%A0%8D%E6%9F%B4%E5%B7%A5/202310301033572.png)\n#### 可以先复制到记事本，然后 Ctrl+H 替换多余的部分为空\n![replace](https://raw.githubusercontent.com/wild-civil/typora_img/main/%E7%A3%A8%E5%88%80%E4%B8%8D%E8%AF%AF%E7%A0%8D%E6%9F%B4%E5%B7%A5/202310301033924.png)\n\n\n# 文件批量重命名\n#### 不必多说，上链接\n\nReNamer Pro 7.3.exe https://www.aliyundrive.com/s/17KLzJbQMAm 点击链接保存，或者复制本段内容，打开「阿里云盘」APP ，无需下载极速在线查看，视频原画倍速播放。\n\n阿里云超过200文件数目则无法分享（我没开会员），因此大家拿到手后双击exe文件可以选择安装便携版\n![portable_v](https://raw.githubusercontent.com/wild-civil/typora_img/main/%E7%A3%A8%E5%88%80%E4%B8%8D%E8%AF%AF%E7%A0%8D%E6%9F%B4%E5%B7%A5/202310301033157.png)\n\n然后选中文即可\n![simple_chinese](https://raw.githubusercontent.com/wild-civil/typora_img/main/%E7%A3%A8%E5%88%80%E4%B8%8D%E8%AF%AF%E7%A0%8D%E6%9F%B4%E5%B7%A5/202310301033412.png)\n\n![on_your_way](https://raw.githubusercontent.com/wild-civil/typora_img/main/%E7%A3%A8%E5%88%80%E4%B8%8D%E8%AF%AF%E7%A0%8D%E6%9F%B4%E5%B7%A5/202310301035291.png)\n非常简单，非常方便\n","slug":"磨刀不误砍柴工","published":1,"updated":"2023-10-30T02:46:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clofj2tc60012oot34ocg404o","content":"<p>2023-10-29 早上上班 磨了磨刀：</p>\n<h1 id=\"word批量转pdf\"><a href=\"#word批量转pdf\" class=\"headerlink\" title=\"word批量转pdf\"></a>word批量转pdf</h1><h2 id=\"法一：\"><a href=\"#法一：\" class=\"headerlink\" title=\"法一：\"></a>法一：</h2><h4 id=\"1-在桌面随意新建一个doc文档，然后打开后同时按alt和F11，双击下图方框。\"><a href=\"#1-在桌面随意新建一个doc文档，然后打开后同时按alt和F11，双击下图方框。\" class=\"headerlink\" title=\"1.在桌面随意新建一个doc文档，然后打开后同时按alt和F11，双击下图方框。\"></a>1.在桌面随意新建一个doc文档，然后打开后同时按alt和F11，双击下图方框。</h4><p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/%E7%A3%A8%E5%88%80%E4%B8%8D%E8%AF%AF%E7%A0%8D%E6%9F%B4%E5%B7%A5/202310301033846.png\" alt=\"Double ThisDocument\"></p>\n<h4 id=\"2-将代码复制\"><a href=\"#2-将代码复制\" class=\"headerlink\" title=\"2.将代码复制\"></a>2.将代码复制</h4><p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/%E7%A3%A8%E5%88%80%E4%B8%8D%E8%AF%AF%E7%A0%8D%E6%9F%B4%E5%B7%A5/202310301033052.png\" alt=\"copy&amp;paste\"></p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sub BatchConvertToPDF()</span><br><span class=\"line\">    Dim destFolderPath As String</span><br><span class=\"line\">    destFolderPath = GetFolderPath</span><br><span class=\"line\">    If destFolderPath &lt;&gt; Empty Then</span><br><span class=\"line\">        Dim path As Variant</span><br><span class=\"line\">        For Each path In GetFilePaths()</span><br><span class=\"line\">            Dim indexOfSlash, indexOfDot As Integer</span><br><span class=\"line\">            indexOfSlash = InStrRev(path, &quot;\\&quot;)</span><br><span class=\"line\">            indexOfDot = InStrRev(path, &quot;.&quot;)</span><br><span class=\"line\">             </span><br><span class=\"line\">            Dim destFilePath As String</span><br><span class=\"line\">            destFilePath = destFolderPath + Mid(path, indexOfSlash, indexOfDot - indexOfSlash) + &quot;.pdf&quot;</span><br><span class=\"line\">             </span><br><span class=\"line\">            ConvertToPDF path, destFilePath</span><br><span class=\"line\">        Next path</span><br><span class=\"line\">    End If</span><br><span class=\"line\">End Sub</span><br><span class=\"line\"> </span><br><span class=\"line\">Function GetFilePaths()</span><br><span class=\"line\">    Dim folderPath As String</span><br><span class=\"line\">    With Application.FileDialog(msoFileDialogFilePicker)</span><br><span class=\"line\">        .Filters.Add &quot;word文件&quot;, &quot;*.doc; *.docx; *.docm&quot;</span><br><span class=\"line\">        .Title = &quot;请择要转换的word文件&quot;</span><br><span class=\"line\">        If .Show = -1 Then</span><br><span class=\"line\">            Set GetFilePaths = .SelectedItems</span><br><span class=\"line\">        End If</span><br><span class=\"line\">    End With</span><br><span class=\"line\">End Function</span><br><span class=\"line\"> </span><br><span class=\"line\">Function GetFolderPath()</span><br><span class=\"line\">    Dim folderPath As String</span><br><span class=\"line\">    With Application.FileDialog(msoFileDialogFolderPicker)</span><br><span class=\"line\">        .AllowMultiSelect = False</span><br><span class=\"line\">        .Title = &quot;请选择要存放的目录&quot;</span><br><span class=\"line\">        If .Show = -1 Then</span><br><span class=\"line\">            GetFolderPath = .SelectedItems(1)</span><br><span class=\"line\">        End If</span><br><span class=\"line\">    End With</span><br><span class=\"line\">End Function</span><br><span class=\"line\"> </span><br><span class=\"line\">Sub ConvertToPDF(srcPath As Variant, destPath As String)</span><br><span class=\"line\">    Documents.Open FileName:=srcPath, ConfirmConversions:=False, _</span><br><span class=\"line\">        ReadOnly:=False, AddToRecentFiles:=False, PasswordDocument:=&quot;&quot;, _</span><br><span class=\"line\">        PasswordTemplate:=&quot;&quot;, Revert:=False, WritePasswordDocument:=&quot;&quot;, _</span><br><span class=\"line\">        WritePasswordTemplate:=&quot;&quot;, Format:=wdOpenFormatAuto, XMLTransform:=&quot;&quot;</span><br><span class=\"line\">    ActiveDocument.ExportAsFixedFormat OutputFileName:= _</span><br><span class=\"line\">        destPath, ExportFormat:= _</span><br><span class=\"line\">        wdExportFormatPDF, OpenAfterExport:=False, OptimizeFor:= _</span><br><span class=\"line\">        wdExportOptimizeForOnScreen, Range:=wdExportAllDocument, From:=1, To:=1, _</span><br><span class=\"line\">        Item:=wdExportDocumentContent, IncludeDocProps:=True, KeepIRM:=True, _</span><br><span class=\"line\">        CreateBookmarks:=wdExportCreateNoBookmarks, DocStructureTags:=True, _</span><br><span class=\"line\">        BitmapMissingFonts:=True, UseISO19005_1:=False</span><br><span class=\"line\">    ActiveDocument.Close</span><br><span class=\"line\">End Sub</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-按F5运行代码，选择pdf要保存的位置，需要转换的word（word文件可多选），等待转换成功。\"><a href=\"#3-按F5运行代码，选择pdf要保存的位置，需要转换的word（word文件可多选），等待转换成功。\" class=\"headerlink\" title=\"3.按F5运行代码，选择pdf要保存的位置，需要转换的word（word文件可多选），等待转换成功。\"></a>3.按F5运行代码，选择pdf要保存的位置，需要转换的word（word文件可多选），等待转换成功。</h4><h2 id=\"法二：\"><a href=\"#法二：\" class=\"headerlink\" title=\"法二：\"></a>法二：</h2><p>（有福昕的前提下）</p>\n<h4 id=\"非常简单-也很好用啊\"><a href=\"#非常简单-也很好用啊\" class=\"headerlink\" title=\"非常简单 也很好用啊\"></a>非常简单 也很好用啊</h4><p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/%E7%A3%A8%E5%88%80%E4%B8%8D%E8%AF%AF%E7%A0%8D%E6%9F%B4%E5%B7%A5/202310301033987.png\" alt=\"fuxin\"><br>福昕高级PDF编辑器 <a href=\"https://www.aliyundrive.com/s/Ye8gpyiSSiC\">https://www.aliyundrive.com/s/Ye8gpyiSSiC</a> 提取码: iz27 点击链接保存，或者复制本段内容，打开「阿里云盘」APP ，无需下载极速在线查看，视频原画倍速播放。</p>\n<h1 id=\"批量复制文件名称\"><a href=\"#批量复制文件名称\" class=\"headerlink\" title=\"批量复制文件名称\"></a>批量复制文件名称</h1><h4 id=\"非常简单：选中要复制的文件，按住Shift再右键，复制文件地址\"><a href=\"#非常简单：选中要复制的文件，按住Shift再右键，复制文件地址\" class=\"headerlink\" title=\"非常简单：选中要复制的文件，按住Shift再右键，复制文件地址\"></a>非常简单：选中要复制的文件，按住Shift再右键，复制文件地址</h4><p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/%E7%A3%A8%E5%88%80%E4%B8%8D%E8%AF%AF%E7%A0%8D%E6%9F%B4%E5%B7%A5/202310301033572.png\" alt=\"copy_adrres\"></p>\n<h4 id=\"可以先复制到记事本，然后-Ctrl-H-替换多余的部分为空\"><a href=\"#可以先复制到记事本，然后-Ctrl-H-替换多余的部分为空\" class=\"headerlink\" title=\"可以先复制到记事本，然后 Ctrl+H 替换多余的部分为空\"></a>可以先复制到记事本，然后 Ctrl+H 替换多余的部分为空</h4><p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/%E7%A3%A8%E5%88%80%E4%B8%8D%E8%AF%AF%E7%A0%8D%E6%9F%B4%E5%B7%A5/202310301033924.png\" alt=\"replace\"></p>\n<h1 id=\"文件批量重命名\"><a href=\"#文件批量重命名\" class=\"headerlink\" title=\"文件批量重命名\"></a>文件批量重命名</h1><h4 id=\"不必多说，上链接\"><a href=\"#不必多说，上链接\" class=\"headerlink\" title=\"不必多说，上链接\"></a>不必多说，上链接</h4><p>ReNamer Pro 7.3.exe <a href=\"https://www.aliyundrive.com/s/17KLzJbQMAm\">https://www.aliyundrive.com/s/17KLzJbQMAm</a> 点击链接保存，或者复制本段内容，打开「阿里云盘」APP ，无需下载极速在线查看，视频原画倍速播放。</p>\n<p>阿里云超过200文件数目则无法分享（我没开会员），因此大家拿到手后双击exe文件可以选择安装便携版<br><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/%E7%A3%A8%E5%88%80%E4%B8%8D%E8%AF%AF%E7%A0%8D%E6%9F%B4%E5%B7%A5/202310301033157.png\" alt=\"portable_v\"></p>\n<p>然后选中文即可<br><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/%E7%A3%A8%E5%88%80%E4%B8%8D%E8%AF%AF%E7%A0%8D%E6%9F%B4%E5%B7%A5/202310301033412.png\" alt=\"simple_chinese\"></p>\n<p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/%E7%A3%A8%E5%88%80%E4%B8%8D%E8%AF%AF%E7%A0%8D%E6%9F%B4%E5%B7%A5/202310301035291.png\" alt=\"on_your_way\"><br>非常简单，非常方便</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"安装文, 档快速开始","link":"https://butterfly.js.org/posts/21cfbf15/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"Butterfly主题 帮助文档"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<p>2023-10-29 早上上班 磨了磨刀：</p>\n<h1 id=\"word批量转pdf\"><a href=\"#word批量转pdf\" class=\"headerlink\" title=\"word批量转pdf\"></a>word批量转pdf</h1><h2 id=\"法一：\"><a href=\"#法一：\" class=\"headerlink\" title=\"法一：\"></a>法一：</h2><h4 id=\"1-在桌面随意新建一个doc文档，然后打开后同时按alt和F11，双击下图方框。\"><a href=\"#1-在桌面随意新建一个doc文档，然后打开后同时按alt和F11，双击下图方框。\" class=\"headerlink\" title=\"1.在桌面随意新建一个doc文档，然后打开后同时按alt和F11，双击下图方框。\"></a>1.在桌面随意新建一个doc文档，然后打开后同时按alt和F11，双击下图方框。</h4><p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/%E7%A3%A8%E5%88%80%E4%B8%8D%E8%AF%AF%E7%A0%8D%E6%9F%B4%E5%B7%A5/202310301033846.png\" alt=\"Double ThisDocument\"></p>\n<h4 id=\"2-将代码复制\"><a href=\"#2-将代码复制\" class=\"headerlink\" title=\"2.将代码复制\"></a>2.将代码复制</h4><p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/%E7%A3%A8%E5%88%80%E4%B8%8D%E8%AF%AF%E7%A0%8D%E6%9F%B4%E5%B7%A5/202310301033052.png\" alt=\"copy&amp;paste\"></p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sub BatchConvertToPDF()</span><br><span class=\"line\">    Dim destFolderPath As String</span><br><span class=\"line\">    destFolderPath = GetFolderPath</span><br><span class=\"line\">    If destFolderPath &lt;&gt; Empty Then</span><br><span class=\"line\">        Dim path As Variant</span><br><span class=\"line\">        For Each path In GetFilePaths()</span><br><span class=\"line\">            Dim indexOfSlash, indexOfDot As Integer</span><br><span class=\"line\">            indexOfSlash = InStrRev(path, &quot;\\&quot;)</span><br><span class=\"line\">            indexOfDot = InStrRev(path, &quot;.&quot;)</span><br><span class=\"line\">             </span><br><span class=\"line\">            Dim destFilePath As String</span><br><span class=\"line\">            destFilePath = destFolderPath + Mid(path, indexOfSlash, indexOfDot - indexOfSlash) + &quot;.pdf&quot;</span><br><span class=\"line\">             </span><br><span class=\"line\">            ConvertToPDF path, destFilePath</span><br><span class=\"line\">        Next path</span><br><span class=\"line\">    End If</span><br><span class=\"line\">End Sub</span><br><span class=\"line\"> </span><br><span class=\"line\">Function GetFilePaths()</span><br><span class=\"line\">    Dim folderPath As String</span><br><span class=\"line\">    With Application.FileDialog(msoFileDialogFilePicker)</span><br><span class=\"line\">        .Filters.Add &quot;word文件&quot;, &quot;*.doc; *.docx; *.docm&quot;</span><br><span class=\"line\">        .Title = &quot;请择要转换的word文件&quot;</span><br><span class=\"line\">        If .Show = -1 Then</span><br><span class=\"line\">            Set GetFilePaths = .SelectedItems</span><br><span class=\"line\">        End If</span><br><span class=\"line\">    End With</span><br><span class=\"line\">End Function</span><br><span class=\"line\"> </span><br><span class=\"line\">Function GetFolderPath()</span><br><span class=\"line\">    Dim folderPath As String</span><br><span class=\"line\">    With Application.FileDialog(msoFileDialogFolderPicker)</span><br><span class=\"line\">        .AllowMultiSelect = False</span><br><span class=\"line\">        .Title = &quot;请选择要存放的目录&quot;</span><br><span class=\"line\">        If .Show = -1 Then</span><br><span class=\"line\">            GetFolderPath = .SelectedItems(1)</span><br><span class=\"line\">        End If</span><br><span class=\"line\">    End With</span><br><span class=\"line\">End Function</span><br><span class=\"line\"> </span><br><span class=\"line\">Sub ConvertToPDF(srcPath As Variant, destPath As String)</span><br><span class=\"line\">    Documents.Open FileName:=srcPath, ConfirmConversions:=False, _</span><br><span class=\"line\">        ReadOnly:=False, AddToRecentFiles:=False, PasswordDocument:=&quot;&quot;, _</span><br><span class=\"line\">        PasswordTemplate:=&quot;&quot;, Revert:=False, WritePasswordDocument:=&quot;&quot;, _</span><br><span class=\"line\">        WritePasswordTemplate:=&quot;&quot;, Format:=wdOpenFormatAuto, XMLTransform:=&quot;&quot;</span><br><span class=\"line\">    ActiveDocument.ExportAsFixedFormat OutputFileName:= _</span><br><span class=\"line\">        destPath, ExportFormat:= _</span><br><span class=\"line\">        wdExportFormatPDF, OpenAfterExport:=False, OptimizeFor:= _</span><br><span class=\"line\">        wdExportOptimizeForOnScreen, Range:=wdExportAllDocument, From:=1, To:=1, _</span><br><span class=\"line\">        Item:=wdExportDocumentContent, IncludeDocProps:=True, KeepIRM:=True, _</span><br><span class=\"line\">        CreateBookmarks:=wdExportCreateNoBookmarks, DocStructureTags:=True, _</span><br><span class=\"line\">        BitmapMissingFonts:=True, UseISO19005_1:=False</span><br><span class=\"line\">    ActiveDocument.Close</span><br><span class=\"line\">End Sub</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-按F5运行代码，选择pdf要保存的位置，需要转换的word（word文件可多选），等待转换成功。\"><a href=\"#3-按F5运行代码，选择pdf要保存的位置，需要转换的word（word文件可多选），等待转换成功。\" class=\"headerlink\" title=\"3.按F5运行代码，选择pdf要保存的位置，需要转换的word（word文件可多选），等待转换成功。\"></a>3.按F5运行代码，选择pdf要保存的位置，需要转换的word（word文件可多选），等待转换成功。</h4><h2 id=\"法二：\"><a href=\"#法二：\" class=\"headerlink\" title=\"法二：\"></a>法二：</h2><p>（有福昕的前提下）</p>\n<h4 id=\"非常简单-也很好用啊\"><a href=\"#非常简单-也很好用啊\" class=\"headerlink\" title=\"非常简单 也很好用啊\"></a>非常简单 也很好用啊</h4><p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/%E7%A3%A8%E5%88%80%E4%B8%8D%E8%AF%AF%E7%A0%8D%E6%9F%B4%E5%B7%A5/202310301033987.png\" alt=\"fuxin\"><br>福昕高级PDF编辑器 <a href=\"https://www.aliyundrive.com/s/Ye8gpyiSSiC\">https://www.aliyundrive.com/s/Ye8gpyiSSiC</a> 提取码: iz27 点击链接保存，或者复制本段内容，打开「阿里云盘」APP ，无需下载极速在线查看，视频原画倍速播放。</p>\n<h1 id=\"批量复制文件名称\"><a href=\"#批量复制文件名称\" class=\"headerlink\" title=\"批量复制文件名称\"></a>批量复制文件名称</h1><h4 id=\"非常简单：选中要复制的文件，按住Shift再右键，复制文件地址\"><a href=\"#非常简单：选中要复制的文件，按住Shift再右键，复制文件地址\" class=\"headerlink\" title=\"非常简单：选中要复制的文件，按住Shift再右键，复制文件地址\"></a>非常简单：选中要复制的文件，按住Shift再右键，复制文件地址</h4><p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/%E7%A3%A8%E5%88%80%E4%B8%8D%E8%AF%AF%E7%A0%8D%E6%9F%B4%E5%B7%A5/202310301033572.png\" alt=\"copy_adrres\"></p>\n<h4 id=\"可以先复制到记事本，然后-Ctrl-H-替换多余的部分为空\"><a href=\"#可以先复制到记事本，然后-Ctrl-H-替换多余的部分为空\" class=\"headerlink\" title=\"可以先复制到记事本，然后 Ctrl+H 替换多余的部分为空\"></a>可以先复制到记事本，然后 Ctrl+H 替换多余的部分为空</h4><p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/%E7%A3%A8%E5%88%80%E4%B8%8D%E8%AF%AF%E7%A0%8D%E6%9F%B4%E5%B7%A5/202310301033924.png\" alt=\"replace\"></p>\n<h1 id=\"文件批量重命名\"><a href=\"#文件批量重命名\" class=\"headerlink\" title=\"文件批量重命名\"></a>文件批量重命名</h1><h4 id=\"不必多说，上链接\"><a href=\"#不必多说，上链接\" class=\"headerlink\" title=\"不必多说，上链接\"></a>不必多说，上链接</h4><p>ReNamer Pro 7.3.exe <a href=\"https://www.aliyundrive.com/s/17KLzJbQMAm\">https://www.aliyundrive.com/s/17KLzJbQMAm</a> 点击链接保存，或者复制本段内容，打开「阿里云盘」APP ，无需下载极速在线查看，视频原画倍速播放。</p>\n<p>阿里云超过200文件数目则无法分享（我没开会员），因此大家拿到手后双击exe文件可以选择安装便携版<br><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/%E7%A3%A8%E5%88%80%E4%B8%8D%E8%AF%AF%E7%A0%8D%E6%9F%B4%E5%B7%A5/202310301033157.png\" alt=\"portable_v\"></p>\n<p>然后选中文即可<br><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/%E7%A3%A8%E5%88%80%E4%B8%8D%E8%AF%AF%E7%A0%8D%E6%9F%B4%E5%B7%A5/202310301033412.png\" alt=\"simple_chinese\"></p>\n<p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/%E7%A3%A8%E5%88%80%E4%B8%8D%E8%AF%AF%E7%A0%8D%E6%9F%B4%E5%B7%A5/202310301035291.png\" alt=\"on_your_way\"><br>非常简单，非常方便</p>\n"},{"title":"粗学IIC","abbrlink":"11f9a402","date":"2022-09-12T09:34:47.000Z","keywords":null,"description":null,"password":null,"abstract":null,"message":null,"cover":"http://qiniu.hanvon.top/blog_cover/shixutu_cover.png","_content":"\n\n\n# 一、IIC简介\n\n**I2C（Inter-Integrated Circuit，集成线路总线） 总线**是由飞利浦(Philips)公司开发的一种简单、双向二线制同步串行总线。它只需要两根线即可在连接于总线上的器件之间传送信息。\n\nI2C 总线支持任何IC 生产过程(NMOS CMOS、 双极性)。两线――串行数据（SDA） 和串行时钟 （SCL） 线在连接到总线的器件间传递信息。 每个器件都有一个唯一的地址识别（无论是微控制器——MCU、 LCD 驱动器、 存储器或键盘接口） ， 而且都可以作为一个发送器或接收器（由器件的功能决定) 。\n在 `CPU 与被控 IC 之间`、 `IC 与 IC 之间进行双向传送`， 高速 IIC 总线一般<u>可达 400kbps 以上</u>。\nI2C 总线在传送数据过程中共有三种类型信号， 它们分别是：==开始信号、结束信号和应答信号==。\n\n# 二、I2C总线物理拓补结构（主从模式）\n\n![IIC总线物理拓扑](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/IIC%E6%80%BB%E7%BA%BF%E7%89%A9%E7%90%86%E6%8B%93%E6%89%91.jpg)\n\n一般情况下，数据线SDA和时钟线SCL都是处于上拉电阻状态。因为：在总线空闲状态时，这两根线一般被上面所接的上拉电阻拉高，保持着高电平。<font color=red>(上拉电阻一般在4.7k~10k之间，默认拉高)</font>\n\n数据的传输速率在标准模式下可达100kbit/s，在快速模式下可达400kbit/s，在高速模式（Hs模式）下可达3.4Mbit/s，各种被控器件均并联在总线上，通过器件地址（每个器件的地址在器件手册有些）识别。\n\n一般我们使用的I2C总线速度小于400Kbit/s。\n\n由于I2C器件一般采用开漏结构与总线连接，所以SCL和SDA线均接上拉电阻\n\n\n# 三、I2C时序\n\nIIC总线在传输数据的过程的信号中，**<u>起始信号</u>是必需的**，**结束信号和应答信号，都可以不要**。同时我们还要介绍其`空闲状态、数据的有效性、数据传输`。\n\nIIC总线的时序图：\n\n![iic时序](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/iic%E6%97%B6%E5%BA%8F.jpg)\n\n简化了的时序图\n\n![start_stop](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/start_stop.jpg)\n\n\n\n## 空闲状态\n\n**当IIC总线的数据线SDA和时钟线SCL两条信号线同时处于高电平时，规定为总线的空闲状态。**此时各个器件的输出级场效应管均处在截止状态，即释放总线，由两条信号线各自的上拉电阻把电平拉高。 \n\n## 起始信号与停止信号\n\n- **起始信号：**当时钟线SCL为高电平时，数据线SDA由高到低低电的跳变；(启动信号是一种电平跳变时序信号，而不是一个电平信号)\n\n- **停止信号：**当时钟线SCL为高电平时，数据线SDA由低到高低电的跳变；(停止信号也是一种电平跳变时序信号，而不是一个电平信号)\n\n## 应答信号\n\n发送器每发送一个字节（8个bit），就在时钟脉冲9期间释放数据线，由接收器反馈一个应答信号。 \n\n- 应答信号为低电平时，规定为有效应答位（ACK，简称应答位），表示接收器已经成功地接收了该字节；\n\n- 应答信号为高电平时，规定为非应答位（NACK），一般表示接收器接收该字节没有成功。 \n\n![ACK](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/ACK.jpg)\n\n对于反馈有效应答位ACK的要求是：接收器在第9个时钟脉冲之前的低电平期间将数据线SDA拉低，并且确保在该时钟的高电平期间为稳定的低电平。 **如果接收器是主控器，则在它收到最后一个字节后，发送一个NACK信号，以通知被控发送器结束数据发送，并释放数据线SDA，以便主控接收器发送一个停止信号P。**\n\n### 数据有效性\n\n**IIC总线进行数据传送时，时钟信号为高电平期间，数据线上的数据必须保持稳定；只有在时钟线上的信号为低电平期间，数据线上的高电平或低电平状态才允许变化。** \n\n即：**数据在时钟线SCL的上升沿到来之前就需准备好。并在在下降沿到来之前必须稳定。**\n\n![stable](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/stable.jpg)\n\n### 数据的传达\n\n在IIC总线上传送的每一位数据都有一个时钟脉冲相对应（或同步控制），即在SCL串行时钟的配合下，在SDA上逐位地串行传送每一位数据。数据位的传输是边沿触发。\n\n### 延时时间\n\n可以查手册，也可以直接浏览下方图：\n\n![delay_time](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/delay_time.jpg)\n\n## IIC总线的数据传送\n\n**IIC总线上的每一个设备都可以作为主设备或者从设备，而且每一个设备都会对应一个唯一的地址（地址通过物理接地或者拉高），主从设备之间就通过这个地址来确定与哪个器件进行通信**，在通常的应用中，我们把CPU带I2C总线接口的模块作为主设备，把挂接在总线上的其他设备都作为从设备。\n\n也就是说，**主设备在传输有效数据之前要先指定从设备的地址，地址指定的过程和上面数据传输的过程一样，只不过大多数从设备的地址是7位的，然后协议规定再给地址添加一个最低位用来表示接下来数据传输的方向，0表示主设备向从设备写数据，1表示主设备向从设备读数据。**\n\n![shixutu](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/shixutu.jpg)\n\n\n\n- **主设备往从设备中写数据。数据传输格式如下：**\n\n![w_data](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/w_data.jpg)\n\n\n\n淡蓝色部分表示数据由主机向从机传送，粉红色部分则表示数据由从机向主机传送。\n\n**写用0来表示（高电平），读用1来表示（低电平）。**\n\n- **主设备从从设备中读数据。数据传输格式如下：**\n\n![r_data](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/r_data.jpg)\n\n**在从机产生响应时，主机从发送变成接收，从机从接收变成发送。之后，数据由从机发送，主机接收，每个应答由主机产生，时钟信号仍由主机产生。若主机要终止本次传输，则发送一个非应答信号，接着主机产生停止条件。**\n\n- 主设备往从设备中写数据，然后重启起始条件，紧接着从从设备中读取数据；或者是主设备从从设备中读数据，然后重启起始条件，紧接着主设备往从设备中写数据。数据传输格式如下：\n\n\n\n![rw_data](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/rw_data.jpg)\n\n在多主的通信系统中，总线上有多个节点，它们都有自己的寻址地址，可以作为从节点被别的节点访问，同时它们都可以作为主节点向其它的节点发送控制字节和传送数据。但是如果有两个或两个以上的节点都向总线上发送启动信号并开始传送数据，这样就形成了冲突。要解决这种冲突，就要进行仲裁的判决，这就是I2C总线上的仲裁。\n\n\n**I2C总线上的仲裁分两部分：SCL线的同步和SDA线的仲裁。**\n\n这部分就暂时不介绍了，想要了解：可以参考链接[浅谈I2C总线](https://blog.csdn.net/bluewhaletech/article/details/37876111)或[I2C总线协议图解](http://www.cnblogs.com/aaronLinux/p/6218660.html)。\n\n\n\n\n\n\n\n","source":"_posts/粗学IIC.md","raw":"---\ntitle: 粗学IIC\ntags: \n  - iic\n  - 时序\nabbrlink: 11f9a402\ndate: 2022-09-12 17:34:47\nkeywords:\ndescription:\npassword:\nabstract:\nmessage:\ncover: http://qiniu.hanvon.top/blog_cover/shixutu_cover.png\n---\n\n\n\n# 一、IIC简介\n\n**I2C（Inter-Integrated Circuit，集成线路总线） 总线**是由飞利浦(Philips)公司开发的一种简单、双向二线制同步串行总线。它只需要两根线即可在连接于总线上的器件之间传送信息。\n\nI2C 总线支持任何IC 生产过程(NMOS CMOS、 双极性)。两线――串行数据（SDA） 和串行时钟 （SCL） 线在连接到总线的器件间传递信息。 每个器件都有一个唯一的地址识别（无论是微控制器——MCU、 LCD 驱动器、 存储器或键盘接口） ， 而且都可以作为一个发送器或接收器（由器件的功能决定) 。\n在 `CPU 与被控 IC 之间`、 `IC 与 IC 之间进行双向传送`， 高速 IIC 总线一般<u>可达 400kbps 以上</u>。\nI2C 总线在传送数据过程中共有三种类型信号， 它们分别是：==开始信号、结束信号和应答信号==。\n\n# 二、I2C总线物理拓补结构（主从模式）\n\n![IIC总线物理拓扑](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/IIC%E6%80%BB%E7%BA%BF%E7%89%A9%E7%90%86%E6%8B%93%E6%89%91.jpg)\n\n一般情况下，数据线SDA和时钟线SCL都是处于上拉电阻状态。因为：在总线空闲状态时，这两根线一般被上面所接的上拉电阻拉高，保持着高电平。<font color=red>(上拉电阻一般在4.7k~10k之间，默认拉高)</font>\n\n数据的传输速率在标准模式下可达100kbit/s，在快速模式下可达400kbit/s，在高速模式（Hs模式）下可达3.4Mbit/s，各种被控器件均并联在总线上，通过器件地址（每个器件的地址在器件手册有些）识别。\n\n一般我们使用的I2C总线速度小于400Kbit/s。\n\n由于I2C器件一般采用开漏结构与总线连接，所以SCL和SDA线均接上拉电阻\n\n\n# 三、I2C时序\n\nIIC总线在传输数据的过程的信号中，**<u>起始信号</u>是必需的**，**结束信号和应答信号，都可以不要**。同时我们还要介绍其`空闲状态、数据的有效性、数据传输`。\n\nIIC总线的时序图：\n\n![iic时序](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/iic%E6%97%B6%E5%BA%8F.jpg)\n\n简化了的时序图\n\n![start_stop](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/start_stop.jpg)\n\n\n\n## 空闲状态\n\n**当IIC总线的数据线SDA和时钟线SCL两条信号线同时处于高电平时，规定为总线的空闲状态。**此时各个器件的输出级场效应管均处在截止状态，即释放总线，由两条信号线各自的上拉电阻把电平拉高。 \n\n## 起始信号与停止信号\n\n- **起始信号：**当时钟线SCL为高电平时，数据线SDA由高到低低电的跳变；(启动信号是一种电平跳变时序信号，而不是一个电平信号)\n\n- **停止信号：**当时钟线SCL为高电平时，数据线SDA由低到高低电的跳变；(停止信号也是一种电平跳变时序信号，而不是一个电平信号)\n\n## 应答信号\n\n发送器每发送一个字节（8个bit），就在时钟脉冲9期间释放数据线，由接收器反馈一个应答信号。 \n\n- 应答信号为低电平时，规定为有效应答位（ACK，简称应答位），表示接收器已经成功地接收了该字节；\n\n- 应答信号为高电平时，规定为非应答位（NACK），一般表示接收器接收该字节没有成功。 \n\n![ACK](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/ACK.jpg)\n\n对于反馈有效应答位ACK的要求是：接收器在第9个时钟脉冲之前的低电平期间将数据线SDA拉低，并且确保在该时钟的高电平期间为稳定的低电平。 **如果接收器是主控器，则在它收到最后一个字节后，发送一个NACK信号，以通知被控发送器结束数据发送，并释放数据线SDA，以便主控接收器发送一个停止信号P。**\n\n### 数据有效性\n\n**IIC总线进行数据传送时，时钟信号为高电平期间，数据线上的数据必须保持稳定；只有在时钟线上的信号为低电平期间，数据线上的高电平或低电平状态才允许变化。** \n\n即：**数据在时钟线SCL的上升沿到来之前就需准备好。并在在下降沿到来之前必须稳定。**\n\n![stable](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/stable.jpg)\n\n### 数据的传达\n\n在IIC总线上传送的每一位数据都有一个时钟脉冲相对应（或同步控制），即在SCL串行时钟的配合下，在SDA上逐位地串行传送每一位数据。数据位的传输是边沿触发。\n\n### 延时时间\n\n可以查手册，也可以直接浏览下方图：\n\n![delay_time](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/delay_time.jpg)\n\n## IIC总线的数据传送\n\n**IIC总线上的每一个设备都可以作为主设备或者从设备，而且每一个设备都会对应一个唯一的地址（地址通过物理接地或者拉高），主从设备之间就通过这个地址来确定与哪个器件进行通信**，在通常的应用中，我们把CPU带I2C总线接口的模块作为主设备，把挂接在总线上的其他设备都作为从设备。\n\n也就是说，**主设备在传输有效数据之前要先指定从设备的地址，地址指定的过程和上面数据传输的过程一样，只不过大多数从设备的地址是7位的，然后协议规定再给地址添加一个最低位用来表示接下来数据传输的方向，0表示主设备向从设备写数据，1表示主设备向从设备读数据。**\n\n![shixutu](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/shixutu.jpg)\n\n\n\n- **主设备往从设备中写数据。数据传输格式如下：**\n\n![w_data](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/w_data.jpg)\n\n\n\n淡蓝色部分表示数据由主机向从机传送，粉红色部分则表示数据由从机向主机传送。\n\n**写用0来表示（高电平），读用1来表示（低电平）。**\n\n- **主设备从从设备中读数据。数据传输格式如下：**\n\n![r_data](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/r_data.jpg)\n\n**在从机产生响应时，主机从发送变成接收，从机从接收变成发送。之后，数据由从机发送，主机接收，每个应答由主机产生，时钟信号仍由主机产生。若主机要终止本次传输，则发送一个非应答信号，接着主机产生停止条件。**\n\n- 主设备往从设备中写数据，然后重启起始条件，紧接着从从设备中读取数据；或者是主设备从从设备中读数据，然后重启起始条件，紧接着主设备往从设备中写数据。数据传输格式如下：\n\n\n\n![rw_data](https://raw.githubusercontent.com/wild-civil/typora_img/main/images/rw_data.jpg)\n\n在多主的通信系统中，总线上有多个节点，它们都有自己的寻址地址，可以作为从节点被别的节点访问，同时它们都可以作为主节点向其它的节点发送控制字节和传送数据。但是如果有两个或两个以上的节点都向总线上发送启动信号并开始传送数据，这样就形成了冲突。要解决这种冲突，就要进行仲裁的判决，这就是I2C总线上的仲裁。\n\n\n**I2C总线上的仲裁分两部分：SCL线的同步和SDA线的仲裁。**\n\n这部分就暂时不介绍了，想要了解：可以参考链接[浅谈I2C总线](https://blog.csdn.net/bluewhaletech/article/details/37876111)或[I2C总线协议图解](http://www.cnblogs.com/aaronLinux/p/6218660.html)。\n\n\n\n\n\n\n\n","slug":"粗学IIC","published":1,"updated":"2023-11-01T06:53:13.940Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clofj2tc70014oot351w48fig","content":"<h1 id=\"一、IIC简介\"><a href=\"#一、IIC简介\" class=\"headerlink\" title=\"一、IIC简介\"></a>一、IIC简介</h1><p><strong>I2C（Inter-Integrated Circuit，集成线路总线） 总线</strong>是由飞利浦(Philips)公司开发的一种简单、双向二线制同步串行总线。它只需要两根线即可在连接于总线上的器件之间传送信息。</p>\n<p>I2C 总线支持任何IC 生产过程(NMOS CMOS、 双极性)。两线――串行数据（SDA） 和串行时钟 （SCL） 线在连接到总线的器件间传递信息。 每个器件都有一个唯一的地址识别（无论是微控制器——MCU、 LCD 驱动器、 存储器或键盘接口） ， 而且都可以作为一个发送器或接收器（由器件的功能决定) 。<br>在 <code>CPU 与被控 IC 之间</code>、 <code>IC 与 IC 之间进行双向传送</code>， 高速 IIC 总线一般<u>可达 400kbps 以上</u>。<br>I2C 总线在传送数据过程中共有三种类型信号， 它们分别是：&#x3D;&#x3D;开始信号、结束信号和应答信号&#x3D;&#x3D;。</p>\n<h1 id=\"二、I2C总线物理拓补结构（主从模式）\"><a href=\"#二、I2C总线物理拓补结构（主从模式）\" class=\"headerlink\" title=\"二、I2C总线物理拓补结构（主从模式）\"></a>二、I2C总线物理拓补结构（主从模式）</h1><p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/IIC%E6%80%BB%E7%BA%BF%E7%89%A9%E7%90%86%E6%8B%93%E6%89%91.jpg\" alt=\"IIC总线物理拓扑\"></p>\n<p>一般情况下，数据线SDA和时钟线SCL都是处于上拉电阻状态。因为：在总线空闲状态时，这两根线一般被上面所接的上拉电阻拉高，保持着高电平。<font color=red>(上拉电阻一般在4.7k~10k之间，默认拉高)</font></p>\n<p>数据的传输速率在标准模式下可达100kbit&#x2F;s，在快速模式下可达400kbit&#x2F;s，在高速模式（Hs模式）下可达3.4Mbit&#x2F;s，各种被控器件均并联在总线上，通过器件地址（每个器件的地址在器件手册有些）识别。</p>\n<p>一般我们使用的I2C总线速度小于400Kbit&#x2F;s。</p>\n<p>由于I2C器件一般采用开漏结构与总线连接，所以SCL和SDA线均接上拉电阻</p>\n<h1 id=\"三、I2C时序\"><a href=\"#三、I2C时序\" class=\"headerlink\" title=\"三、I2C时序\"></a>三、I2C时序</h1><p>IIC总线在传输数据的过程的信号中，**<u>起始信号</u>是必需的<strong>，</strong>结束信号和应答信号，都可以不要**。同时我们还要介绍其<code>空闲状态、数据的有效性、数据传输</code>。</p>\n<p>IIC总线的时序图：</p>\n<p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/iic%E6%97%B6%E5%BA%8F.jpg\" alt=\"iic时序\"></p>\n<p>简化了的时序图</p>\n<p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/start_stop.jpg\" alt=\"start_stop\"></p>\n<h2 id=\"空闲状态\"><a href=\"#空闲状态\" class=\"headerlink\" title=\"空闲状态\"></a>空闲状态</h2><p><strong>当IIC总线的数据线SDA和时钟线SCL两条信号线同时处于高电平时，规定为总线的空闲状态。</strong>此时各个器件的输出级场效应管均处在截止状态，即释放总线，由两条信号线各自的上拉电阻把电平拉高。 </p>\n<h2 id=\"起始信号与停止信号\"><a href=\"#起始信号与停止信号\" class=\"headerlink\" title=\"起始信号与停止信号\"></a>起始信号与停止信号</h2><ul>\n<li><p><strong>起始信号：</strong>当时钟线SCL为高电平时，数据线SDA由高到低低电的跳变；(启动信号是一种电平跳变时序信号，而不是一个电平信号)</p>\n</li>\n<li><p><strong>停止信号：</strong>当时钟线SCL为高电平时，数据线SDA由低到高低电的跳变；(停止信号也是一种电平跳变时序信号，而不是一个电平信号)</p>\n</li>\n</ul>\n<h2 id=\"应答信号\"><a href=\"#应答信号\" class=\"headerlink\" title=\"应答信号\"></a>应答信号</h2><p>发送器每发送一个字节（8个bit），就在时钟脉冲9期间释放数据线，由接收器反馈一个应答信号。 </p>\n<ul>\n<li><p>应答信号为低电平时，规定为有效应答位（ACK，简称应答位），表示接收器已经成功地接收了该字节；</p>\n</li>\n<li><p>应答信号为高电平时，规定为非应答位（NACK），一般表示接收器接收该字节没有成功。</p>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/ACK.jpg\" alt=\"ACK\"></p>\n<p>对于反馈有效应答位ACK的要求是：接收器在第9个时钟脉冲之前的低电平期间将数据线SDA拉低，并且确保在该时钟的高电平期间为稳定的低电平。 <strong>如果接收器是主控器，则在它收到最后一个字节后，发送一个NACK信号，以通知被控发送器结束数据发送，并释放数据线SDA，以便主控接收器发送一个停止信号P。</strong></p>\n<h3 id=\"数据有效性\"><a href=\"#数据有效性\" class=\"headerlink\" title=\"数据有效性\"></a>数据有效性</h3><p><strong>IIC总线进行数据传送时，时钟信号为高电平期间，数据线上的数据必须保持稳定；只有在时钟线上的信号为低电平期间，数据线上的高电平或低电平状态才允许变化。</strong> </p>\n<p>即：<strong>数据在时钟线SCL的上升沿到来之前就需准备好。并在在下降沿到来之前必须稳定。</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/stable.jpg\" alt=\"stable\"></p>\n<h3 id=\"数据的传达\"><a href=\"#数据的传达\" class=\"headerlink\" title=\"数据的传达\"></a>数据的传达</h3><p>在IIC总线上传送的每一位数据都有一个时钟脉冲相对应（或同步控制），即在SCL串行时钟的配合下，在SDA上逐位地串行传送每一位数据。数据位的传输是边沿触发。</p>\n<h3 id=\"延时时间\"><a href=\"#延时时间\" class=\"headerlink\" title=\"延时时间\"></a>延时时间</h3><p>可以查手册，也可以直接浏览下方图：</p>\n<p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/delay_time.jpg\" alt=\"delay_time\"></p>\n<h2 id=\"IIC总线的数据传送\"><a href=\"#IIC总线的数据传送\" class=\"headerlink\" title=\"IIC总线的数据传送\"></a>IIC总线的数据传送</h2><p><strong>IIC总线上的每一个设备都可以作为主设备或者从设备，而且每一个设备都会对应一个唯一的地址（地址通过物理接地或者拉高），主从设备之间就通过这个地址来确定与哪个器件进行通信</strong>，在通常的应用中，我们把CPU带I2C总线接口的模块作为主设备，把挂接在总线上的其他设备都作为从设备。</p>\n<p>也就是说，<strong>主设备在传输有效数据之前要先指定从设备的地址，地址指定的过程和上面数据传输的过程一样，只不过大多数从设备的地址是7位的，然后协议规定再给地址添加一个最低位用来表示接下来数据传输的方向，0表示主设备向从设备写数据，1表示主设备向从设备读数据。</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/shixutu.jpg\" alt=\"shixutu\"></p>\n<ul>\n<li><strong>主设备往从设备中写数据。数据传输格式如下：</strong></li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/w_data.jpg\" alt=\"w_data\"></p>\n<p>淡蓝色部分表示数据由主机向从机传送，粉红色部分则表示数据由从机向主机传送。</p>\n<p><strong>写用0来表示（高电平），读用1来表示（低电平）。</strong></p>\n<ul>\n<li><strong>主设备从从设备中读数据。数据传输格式如下：</strong></li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/r_data.jpg\" alt=\"r_data\"></p>\n<p><strong>在从机产生响应时，主机从发送变成接收，从机从接收变成发送。之后，数据由从机发送，主机接收，每个应答由主机产生，时钟信号仍由主机产生。若主机要终止本次传输，则发送一个非应答信号，接着主机产生停止条件。</strong></p>\n<ul>\n<li>主设备往从设备中写数据，然后重启起始条件，紧接着从从设备中读取数据；或者是主设备从从设备中读数据，然后重启起始条件，紧接着主设备往从设备中写数据。数据传输格式如下：</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/rw_data.jpg\" alt=\"rw_data\"></p>\n<p>在多主的通信系统中，总线上有多个节点，它们都有自己的寻址地址，可以作为从节点被别的节点访问，同时它们都可以作为主节点向其它的节点发送控制字节和传送数据。但是如果有两个或两个以上的节点都向总线上发送启动信号并开始传送数据，这样就形成了冲突。要解决这种冲突，就要进行仲裁的判决，这就是I2C总线上的仲裁。</p>\n<p><strong>I2C总线上的仲裁分两部分：SCL线的同步和SDA线的仲裁。</strong></p>\n<p>这部分就暂时不介绍了，想要了解：可以参考链接<a href=\"https://blog.csdn.net/bluewhaletech/article/details/37876111\">浅谈I2C总线</a>或<a href=\"http://www.cnblogs.com/aaronLinux/p/6218660.html\">I2C总线协议图解</a>。</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"安装文, 档快速开始","link":"https://butterfly.js.org/posts/21cfbf15/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"Butterfly主题 帮助文档"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"一、IIC简介\"><a href=\"#一、IIC简介\" class=\"headerlink\" title=\"一、IIC简介\"></a>一、IIC简介</h1><p><strong>I2C（Inter-Integrated Circuit，集成线路总线） 总线</strong>是由飞利浦(Philips)公司开发的一种简单、双向二线制同步串行总线。它只需要两根线即可在连接于总线上的器件之间传送信息。</p>\n<p>I2C 总线支持任何IC 生产过程(NMOS CMOS、 双极性)。两线――串行数据（SDA） 和串行时钟 （SCL） 线在连接到总线的器件间传递信息。 每个器件都有一个唯一的地址识别（无论是微控制器——MCU、 LCD 驱动器、 存储器或键盘接口） ， 而且都可以作为一个发送器或接收器（由器件的功能决定) 。<br>在 <code>CPU 与被控 IC 之间</code>、 <code>IC 与 IC 之间进行双向传送</code>， 高速 IIC 总线一般<u>可达 400kbps 以上</u>。<br>I2C 总线在传送数据过程中共有三种类型信号， 它们分别是：&#x3D;&#x3D;开始信号、结束信号和应答信号&#x3D;&#x3D;。</p>\n<h1 id=\"二、I2C总线物理拓补结构（主从模式）\"><a href=\"#二、I2C总线物理拓补结构（主从模式）\" class=\"headerlink\" title=\"二、I2C总线物理拓补结构（主从模式）\"></a>二、I2C总线物理拓补结构（主从模式）</h1><p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/IIC%E6%80%BB%E7%BA%BF%E7%89%A9%E7%90%86%E6%8B%93%E6%89%91.jpg\" alt=\"IIC总线物理拓扑\"></p>\n<p>一般情况下，数据线SDA和时钟线SCL都是处于上拉电阻状态。因为：在总线空闲状态时，这两根线一般被上面所接的上拉电阻拉高，保持着高电平。<font color=red>(上拉电阻一般在4.7k~10k之间，默认拉高)</font></p>\n<p>数据的传输速率在标准模式下可达100kbit&#x2F;s，在快速模式下可达400kbit&#x2F;s，在高速模式（Hs模式）下可达3.4Mbit&#x2F;s，各种被控器件均并联在总线上，通过器件地址（每个器件的地址在器件手册有些）识别。</p>\n<p>一般我们使用的I2C总线速度小于400Kbit&#x2F;s。</p>\n<p>由于I2C器件一般采用开漏结构与总线连接，所以SCL和SDA线均接上拉电阻</p>\n<h1 id=\"三、I2C时序\"><a href=\"#三、I2C时序\" class=\"headerlink\" title=\"三、I2C时序\"></a>三、I2C时序</h1><p>IIC总线在传输数据的过程的信号中，**<u>起始信号</u>是必需的<strong>，</strong>结束信号和应答信号，都可以不要**。同时我们还要介绍其<code>空闲状态、数据的有效性、数据传输</code>。</p>\n<p>IIC总线的时序图：</p>\n<p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/iic%E6%97%B6%E5%BA%8F.jpg\" alt=\"iic时序\"></p>\n<p>简化了的时序图</p>\n<p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/start_stop.jpg\" alt=\"start_stop\"></p>\n<h2 id=\"空闲状态\"><a href=\"#空闲状态\" class=\"headerlink\" title=\"空闲状态\"></a>空闲状态</h2><p><strong>当IIC总线的数据线SDA和时钟线SCL两条信号线同时处于高电平时，规定为总线的空闲状态。</strong>此时各个器件的输出级场效应管均处在截止状态，即释放总线，由两条信号线各自的上拉电阻把电平拉高。 </p>\n<h2 id=\"起始信号与停止信号\"><a href=\"#起始信号与停止信号\" class=\"headerlink\" title=\"起始信号与停止信号\"></a>起始信号与停止信号</h2><ul>\n<li><p><strong>起始信号：</strong>当时钟线SCL为高电平时，数据线SDA由高到低低电的跳变；(启动信号是一种电平跳变时序信号，而不是一个电平信号)</p>\n</li>\n<li><p><strong>停止信号：</strong>当时钟线SCL为高电平时，数据线SDA由低到高低电的跳变；(停止信号也是一种电平跳变时序信号，而不是一个电平信号)</p>\n</li>\n</ul>\n<h2 id=\"应答信号\"><a href=\"#应答信号\" class=\"headerlink\" title=\"应答信号\"></a>应答信号</h2><p>发送器每发送一个字节（8个bit），就在时钟脉冲9期间释放数据线，由接收器反馈一个应答信号。 </p>\n<ul>\n<li><p>应答信号为低电平时，规定为有效应答位（ACK，简称应答位），表示接收器已经成功地接收了该字节；</p>\n</li>\n<li><p>应答信号为高电平时，规定为非应答位（NACK），一般表示接收器接收该字节没有成功。</p>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/ACK.jpg\" alt=\"ACK\"></p>\n<p>对于反馈有效应答位ACK的要求是：接收器在第9个时钟脉冲之前的低电平期间将数据线SDA拉低，并且确保在该时钟的高电平期间为稳定的低电平。 <strong>如果接收器是主控器，则在它收到最后一个字节后，发送一个NACK信号，以通知被控发送器结束数据发送，并释放数据线SDA，以便主控接收器发送一个停止信号P。</strong></p>\n<h3 id=\"数据有效性\"><a href=\"#数据有效性\" class=\"headerlink\" title=\"数据有效性\"></a>数据有效性</h3><p><strong>IIC总线进行数据传送时，时钟信号为高电平期间，数据线上的数据必须保持稳定；只有在时钟线上的信号为低电平期间，数据线上的高电平或低电平状态才允许变化。</strong> </p>\n<p>即：<strong>数据在时钟线SCL的上升沿到来之前就需准备好。并在在下降沿到来之前必须稳定。</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/stable.jpg\" alt=\"stable\"></p>\n<h3 id=\"数据的传达\"><a href=\"#数据的传达\" class=\"headerlink\" title=\"数据的传达\"></a>数据的传达</h3><p>在IIC总线上传送的每一位数据都有一个时钟脉冲相对应（或同步控制），即在SCL串行时钟的配合下，在SDA上逐位地串行传送每一位数据。数据位的传输是边沿触发。</p>\n<h3 id=\"延时时间\"><a href=\"#延时时间\" class=\"headerlink\" title=\"延时时间\"></a>延时时间</h3><p>可以查手册，也可以直接浏览下方图：</p>\n<p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/delay_time.jpg\" alt=\"delay_time\"></p>\n<h2 id=\"IIC总线的数据传送\"><a href=\"#IIC总线的数据传送\" class=\"headerlink\" title=\"IIC总线的数据传送\"></a>IIC总线的数据传送</h2><p><strong>IIC总线上的每一个设备都可以作为主设备或者从设备，而且每一个设备都会对应一个唯一的地址（地址通过物理接地或者拉高），主从设备之间就通过这个地址来确定与哪个器件进行通信</strong>，在通常的应用中，我们把CPU带I2C总线接口的模块作为主设备，把挂接在总线上的其他设备都作为从设备。</p>\n<p>也就是说，<strong>主设备在传输有效数据之前要先指定从设备的地址，地址指定的过程和上面数据传输的过程一样，只不过大多数从设备的地址是7位的，然后协议规定再给地址添加一个最低位用来表示接下来数据传输的方向，0表示主设备向从设备写数据，1表示主设备向从设备读数据。</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/shixutu.jpg\" alt=\"shixutu\"></p>\n<ul>\n<li><strong>主设备往从设备中写数据。数据传输格式如下：</strong></li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/w_data.jpg\" alt=\"w_data\"></p>\n<p>淡蓝色部分表示数据由主机向从机传送，粉红色部分则表示数据由从机向主机传送。</p>\n<p><strong>写用0来表示（高电平），读用1来表示（低电平）。</strong></p>\n<ul>\n<li><strong>主设备从从设备中读数据。数据传输格式如下：</strong></li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/r_data.jpg\" alt=\"r_data\"></p>\n<p><strong>在从机产生响应时，主机从发送变成接收，从机从接收变成发送。之后，数据由从机发送，主机接收，每个应答由主机产生，时钟信号仍由主机产生。若主机要终止本次传输，则发送一个非应答信号，接着主机产生停止条件。</strong></p>\n<ul>\n<li>主设备往从设备中写数据，然后重启起始条件，紧接着从从设备中读取数据；或者是主设备从从设备中读数据，然后重启起始条件，紧接着主设备往从设备中写数据。数据传输格式如下：</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/images/rw_data.jpg\" alt=\"rw_data\"></p>\n<p>在多主的通信系统中，总线上有多个节点，它们都有自己的寻址地址，可以作为从节点被别的节点访问，同时它们都可以作为主节点向其它的节点发送控制字节和传送数据。但是如果有两个或两个以上的节点都向总线上发送启动信号并开始传送数据，这样就形成了冲突。要解决这种冲突，就要进行仲裁的判决，这就是I2C总线上的仲裁。</p>\n<p><strong>I2C总线上的仲裁分两部分：SCL线的同步和SDA线的仲裁。</strong></p>\n<p>这部分就暂时不介绍了，想要了解：可以参考链接<a href=\"https://blog.csdn.net/bluewhaletech/article/details/37876111\">浅谈I2C总线</a>或<a href=\"http://www.cnblogs.com/aaronLinux/p/6218660.html\">I2C总线协议图解</a>。</p>\n"},{"title":"学物联网之ESP8266NodeMCU（四）","abbrlink":"84438cc6","date":"2022-08-31T07:28:02.000Z","keywords":null,"description":"ESP8266-NodeMCU网络服务器","password":null,"abstract":null,"message":null,"cover":"http://qiniu.hanvon.top/blog_cover/esp8266-nodemcu-web-server_covrer.png","copyright":false,"_content":"\n# [建立基本网络服务器](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/esp8266-nodemcu-web-server/web-server/)\n\n网络服务是一个很宽泛的概念，我们在这里即将给您介绍的是网络服务中的网页服务功能。所谓**网页服务**就是专门用于网页浏览的服务。这个操作我相信所有看到这篇教程的朋友们都使用过，因为您现在正阅读的这篇教程就是通过网页服务传输到您面前的。\n\n为了能够应付来自全世界的朋友们大量访问，网站服务器是一台运算能力很强的计算机。假如这个网站只有您自己访问，那么ESP8266-NodeMCU就足够了。下面这个示例程序可以让ESP8266-NodeMCU实现最基本的网页服务功能。请先将这段示例程序复制并且上传NodeMCU。\n\n```c\n/**********************************************************************\n项目名称/Project          : 零基础入门学用物联网\n程序名称/Program name     : 3_2_1_First_Web_Server\n团队/Team                : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)\n程序目的/Purpose          : 使用NodeMCU建立基本服务器。用户可通过浏览器使用8266的IP地址\n                           访问8266所建立的基本网页（Hello from ESP8266）\n \n***********************************************************************/\n#include <ESP8266WiFi.h>        // 本程序使用 ESP8266WiFi库\n#include <ESP8266WiFiMulti.h>   //  ESP8266WiFiMulti库\n#include <ESP8266WebServer.h>   //  ESP8266WebServer库\n \nESP8266WiFiMulti wifiMulti;     // 建立ESP8266WiFiMulti对象,对象名称是'wifiMulti'\n \nESP8266WebServer esp8266_server(80);// 建立ESP8266WebServer对象，对象名称为esp8266_server\n                                    // 括号中的数字是网路服务器响应http请求的端口号\n                                    // 网络服务器标准http端口号为80，因此这里使用80为端口号\n \nvoid setup(void){\n  Serial.begin(9600);          // 启动串口通讯\n \n  //通过addAp函数存储  WiFi名称       WiFi密码\n  wifiMulti.addAP(\"taichi-maker\", \"12345678\");  // 这三条语句通过调用函数addAP来记录3个不同的WiFi网络信息。\n  wifiMulti.addAP(\"taichi-maker2\", \"87654321\"); // 这3个WiFi网络名称分别是taichi-maker, taichi-maker2, taichi-maker3。\n  wifiMulti.addAP(\"taichi-maker3\", \"13572468\"); // 这3个网络的密码分别是123456789，87654321，13572468。\n                                                // 此处WiFi信息只是示例，请在使用时将需要连接的WiFi信息填入相应位置。\n                                                // 另外这里只存储了3个WiFi信息，您可以存储更多的WiFi信息在此处。\n \n  int i = 0;                                 \n  while (wifiMulti.run() != WL_CONNECTED) {  // 此处的wifiMulti.run()是重点。通过wifiMulti.run()，NodeMCU将会在当前\n    delay(1000);                             // 环境中搜索addAP函数所存储的WiFi。如果搜到多个存储的WiFi那么NodeMCU\n    Serial.print(i++); Serial.print(' ');    // 将会连接信号最强的那一个WiFi信号。\n  }                                          // 一旦连接WiFI成功，wifiMulti.run()将会返回“WL_CONNECTED”。这也是\n                                             // 此处while循环判断是否跳出循环的条件。\n \n  // WiFi连接成功后将通过串口监视器输出连接成功信息 \n  Serial.println('\\n');                     // WiFi连接成功后\n  Serial.print(\"Connected to \");            // NodeMCU将通过串口监视器输出。\n  Serial.println(WiFi.SSID());              // 连接的WiFI名称\n  Serial.print(\"IP address:\\t\");            // 以及\n  Serial.println(WiFi.localIP());           // NodeMCU的IP地址\n  \n//--------\"启动网络服务功能\"程序部分开始-------- //  此部分为程序为本示例程序重点1\n  esp8266_server.begin();                   //  详细讲解请参见太极创客网站《零基础入门学用物联网》\n  esp8266_server.on(\"/\", handleRoot);       //  第3章-第2节 ESP8266-NodeMCU网络服务器-1\n  esp8266_server.onNotFound(handleNotFound);        \n//--------\"启动网络服务功能\"程序部分结束--------\n  Serial.println(\"HTTP esp8266_server started\");//  告知用户ESP8266网络服务功能已经启动\n}\n \n/* 以下函数语句为本示例程序重点3\n详细讲解请参见太极创客网站《零基础入门学用物联网》\n第3章-第2节 3_2_1_First_Web_Server 的说明讲解*/  \nvoid loop(void){\n  esp8266_server.handleClient();     // 处理http服务器访问\n}\n \n/* 以下两个函数为本示例程序重点2\n详细讲解请参见太极创客网站《零基础入门学用物联网》\n第3章-第2节 3_2_1_First_Web_Server 的说明讲解*/                                                                            \nvoid handleRoot() {   //处理网站根目录“/”的访问请求 \n  esp8266_server.send(200, \"text/plain\", \"Hello from ESP8266\");   // NodeMCU将调用此函数。 \n}\t\t\t\t\t\t\t\t\t\t\t\t\t\t//这个网站只有一个网页。且网页只有一行文字“Hello from ESP8266”。\n \n// 设置处理404情况的函数'handleNotFound'\nvoid handleNotFound(){                                        // 当浏览器请求的网络资源无法在服务器找到时，\n  esp8266_server.send(404, \"text/plain\", \"404: Not found\");   // NodeMCU将调用此函数。\n}\n```\n\n上传给NodeMCU，启动NodeMCU并且确保它已经成功连接WiFi, 打开浏览器，在地址栏中输入NodeMCU的IP地址并按下回车。\n\n假如将在浏览器中看到“Hello from ESP8266”(如下所示），那么恭喜您已经成功的让NodeMCU实现了网络服务功能，因为您所看到的这条文字信息正是来自于NodeMCU。换句话说，NodeMCU为您建立了一个超级迷你的小网站。\n\n首先讲解示例程序的第1个重点内容：**”启动网络服务功能“程序部分**\n\n``` c\nesp8266_server.begin();             \nesp8266_server.on(\"/\", handleRoot);      \nesp8266_server.onNotFound(handleNotFound); \n```\n\n程序第一句`esp8266_server.begin()`使用了ESP8266WebServer库中的`begin`函数。这个函数的作用是让ESP8266-NodeMCU来启动网络服务功能。该函数无需任何参数。\n\n接下来的的语句`esp8266_server.on(\"/\", handleRoot)`相对复杂一些。这条语句调用了ESP8266WebServer库中的`on`函数，该函数的作用是**指挥NodeMCU来如何处理浏览器的http请求**。我们看到`on`函数一共有两个参数，第一个参数是字符串”/”，第二个参数是一个函数的名称handleRoot。这个handleRoot函数的具体内容，我后面会给您做详细讲解。现在请您留意`on`函数有两个参数，一个是字符串”/”，另一个是函数名handleRoot。\n\n下面我来给您仔细解释一下参数”/”的作用。我们知道一个网站有很多页面。为了加以区分，这些页面都有各自的名称。对于刚刚您在浏览器看到的“Hello from ESP8266”这个页面是NodeMCU服务器中的网站首页。这个网站首页的名称正是”/”。目前的ESP8266-NodeMCU服务器中只有一页，因此我们还无法了解如果想要调用其他页面该如何操作。不过请别担心，这个操作我们会在下一个示例程序中为您讲解。\n\n好了，现在请将您的思绪拉回到我们的NodeMCU程序中来。接下来我们来看`on`函数的第二个参数。这个参数是`handleRoot`函数的名字。`handlRoot`函数的主要作用是告诉NodeMCU该如何生成和发送网站首页给浏览器。不过关于这个`handleRoot`函数的具体内容，我会在接下来的教程中给您做详细讲解。现在我们需要把关注点集中在`on`函数上。\n\n最后我们再来完整的看一下这条语句`esp8266_server.on(\"/\", handleRoot)`。它的作用就是告诉NodeMCU，当有浏览器请求网站首页时，请执行handlRoot函数来生成网站首页内容然后发送给浏览器。\n\n讲到这里不知道您会不会感到好奇。我们只是在浏览器地址栏输入了NodeMCU的IP地址，然后就按下了回车。浏览器怎么会知道我们需要的是网站的首页呢。这是浏览器约定俗成的一种操作方法。当我们在地址栏只输入IP地址而没有任何附加地址信息，浏览器就会知道我们是要获取一个网站的首页信息。\n\n结束了`on`函数的讲解，我们来继续往下看。下面一条语句`esp8266_server.onNotFound(handleNotFound)`使用了`onNotFound`函数。它的作用是**指挥NodeMCU在收到无法满足的http请求时应该如何处理**。目前Hello from ESP8266网站只有一个页面。假如有人想要浏览网站的其它页面，NodeMCU是无法满足这一请求的。这时候我们可以让NodeMCU答复一个“错误提示”页面给提出请求的浏览器。`onNotFound`函数就是用来告诉NodeMCU如果出现无法满足的http请求时该如何进行处理。`onNotFound`函数有一个参数，这个参数的内容是函数`handleNotFound`的名字。  \n\n\n\n假设现在我们通过浏览器向NodeMCU服务器请求一个名叫“LED”的页面。由于NodeMCU的程序里没有“LED”页面信息，因此需要给浏览器答复一个“错误提示”页面。`onNotFound`的作用就是告诉NodeMCU在遇到这种无法满足的http请求时，应该执行`handleNotFound`函数来生成并发送“错误提示”页面给浏览器。\n\n为了验证这一功能，我们来做一个实验。请在浏览器中输入NodMCU的IP地址然后加一个“/LED”再回车。比如下图所示，我的NodeMCU的IP地址是192.168.0.109，那么当我在浏览器栏中输入`192.168.0.109/LED`然后回车，就会看到浏览器显示出文字404: Not found。\n\n\n\n这里我们所看到的这行文字“404: Not found”正是因为NodeMCU没有名叫“LED”的页面，因此它会使用handleNotFound函数生成并发送给浏览器这个“错误提示”页面。既然讲到这里了，那么我们就来仔细看一看handleNotFound函数的具体内容。  \n\n```c\nvoid handleNotFound(){                                \n  esp8266_server.send(404, \"text/plain\", \"404: Not found\");  \n}\n```\n\nhandleNotFound函数只有一条语句： `esp8266_server.send(404, \"text/plain\", \"404: Not found\")`。这条语句调用了ESP8266WebServer库中的`send`函数。该函数的作用是生成并且发送http响应信息。也就是说，电脑浏览器所收到的网页信息都是通过`send`函数生成并且发送的。那么具体这个网页信息是如何生成的呢？这就要仔细看看`send`函数的几个参数内容了。  \n\n首先我们来看第一个参数404。这个数字对于很多朋友来说都不会感到陌生，在[互联网基础-应用层](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/internet-basics/application-layer/#http-response)的http响应部分对它做过介绍。404是一个服务器状态码。它的含义是“客户端的请求有错误”。也就是说，浏览器在收到了状态码404后就知道，它所请求的页面在服务器上是不存在的。请留意，这个服务器状态码是专门给浏览器用的。我们是看不到它的。为了让我们也看到页面不存在的出错信息，`send`函数的最后一个参数使用了一个字符串”404: Not found”。这个字符串的内容才是真正显示在浏览器中供我们阅读的内容。你可以任意的改变这个字符串的内容。  \n\n  \n\n到这里我们来小结一下。浏览器能够看懂的信息是send函数的第一个参数,它的类型是整数型，它的内容是数字404。而显示在浏览器中的出错信息是一个字符串型的参数。它是send函数的最后一个参数。在我们的示例程序里，它的内容是“404: Not found”。\n\n`send`函数还有一个字符串参数“text/plain”。它的作用是**说明http响应体的信息类型**。在这段示例中，我们用“text/plain”的原因是要告诉浏览器后面的”404: Not found”为一段纯文本信息。这里当然也可以使用其它类型的信息。不过这一知识我们后续教程中会给您介绍。\n\n为了让您更好的理解刚刚给您解释的内容，我来对这句`esp8266_server.send(404, \"text/plain\", \"404: Not found\")`做一下总结。\n\nsend函数一共有3个参数。第一个参数404是服务器状态码。第二个参数“text/plain”是说明http响应体信息类型。第三个参数“404: Not found”则是响应体的具体信息了。\n\n细心的读者可能已经发现了。我在上面这段总结文字中指明了响应体这一概念。http响应是分为两部分的。第一部分是响应头，在我们这个示例中，响应头的内容就是404 text/plain。而响应体的内容则是404: Not found。\n\n结束了handleNotFound的讲解我们最后再来看看示例程序中另一个用于生成和发送首页信息的函数：`handleRoot`。\n\n```c\nvoid handleRoot() {                         \n    esp8266_server.send(200, \"text/plain\", \"Hello from ESP8266\");\n}\n```\n\n这段示例程序与刚刚我们见到的handleNotFound函数非常相似。都是使用`send`函数生成并且发送http响应信息。\n\n`send`函数的第一个参数200，它同样是一个服务器状态码，含义是“成功接收请求，并已完成整个处理过程”。 第二个参数text/plain的作用我刚刚给您讲过，不再赘述了。最后一个参数”Hello from ESP8266″正是我们在浏览器中看到的首页文字内容。\n\n最后我们来看一下这段示例程序的第3个重点内容，也就是loop函数中唯一的一条语句`esp8266_server.handleClient()`。这句程序调用了`handleClient`函数。它的主要作用之一是检查有没有设备通过网络向NodeMCU发送请求。`函数handleClient`每次被调用时，NodeMCU都会检查一下是否有人发送http请求。因此我们需要把它放在loop函数中，从而确保它能经常被调用。假如我们的loop函数里有类似delay一类的函数延迟程序运行，那么这时候就一定要注意了。如果`handleClient`函数长时间得不到调用，NodeMCU的网络服务会变得很不稳定。因此在使用NodeMCU执行网络服务功能的时候，一定要确保`handleClient`函数经常得以调用。我在这里反复强调这一点是因为这一点非常关键，请务必注意！\n\n这一节的程序内容到这里就讲解完毕了，下一节教程我将为您讲解如何建立可以控制NodeMCU开发板的网页。\n\n\n\n# [通过网络服务实现NodeMCU开发板基本控制](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/esp8266-nodemcu-web-server/pin-control/)\n\n利用NodeMCU建立网络服务\n\n用户通过浏览器可以访问NodeMCU所建立的网页\n\n通过该网页，用户可实现对NodeMCU的控制。\n\n以下是示例代码：\n\n```c\n/**********************************************************************\n项目名称/Project          : 零基础入门学用物联网\n程序名称/Program name     : 3_2_2_Turning_on_and_off_an_LED\n团队/Team                : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)\n程序目的/Purpose          : 使用NodeMCU建立基本服务器。用户可通过浏览器使用8266的IP地址\n                           访问8266所建立的基本网页并通过该页面点亮/熄灭NodeMCU的内置LED\n\n***********************************************************************/\n#include <ESP8266WiFi.h>        // 本程序使用 ESP8266WiFi库\n#include <ESP8266WiFiMulti.h>   //  ESP8266WiFiMulti库\n#include <ESP8266WebServer.h>   //  ESP8266WebServer库\n \nESP8266WiFiMulti wifiMulti;     // 建立ESP8266WiFiMulti对象,对象名称是 'wifiMulti'\n \nESP8266WebServer esp8266_server(80);// 建立网络服务器对象，该对象用于响应HTTP请求。监听端口（80）\n \nvoid setup(void){\n  Serial.begin(9600);   // 启动串口通讯\n \n  pinMode(LED_BUILTIN, OUTPUT); //设置内置LED引脚为输出模式以便控制LED\n  \n  wifiMulti.addAP(\"ssid_from_AP_1\", \"your_password_for_AP_1\"); // 将需要连接的一系列WiFi ID和密码输入这里\n  wifiMulti.addAP(\"ssid_from_AP_2\", \"your_password_for_AP_2\"); // ESP8266-NodeMCU再启动后会扫描当前网络\n  wifiMulti.addAP(\"ssid_from_AP_3\", \"your_password_for_AP_3\"); // 环境查找是否有这里列出的WiFi ID。如果有\n  Serial.println(\"Connecting ...\");                            // 则尝试使用此处存储的密码进行连接。\n  \n  int i = 0;                                 \n  while (wifiMulti.run() != WL_CONNECTED) {  // 此处的wifiMulti.run()是重点。通过wifiMulti.run()，NodeMCU将会在当前\n    delay(1000);                             // 环境中搜索addAP函数所存储的WiFi。如果搜到多个存储的WiFi那么NodeMCU\n    Serial.print(i++); Serial.print(' ');    // 将会连接信号最强的那一个WiFi信号。\n  }                                          // 一旦连接WiFI成功，wifiMulti.run()将会返回“WL_CONNECTED”。这也是\n                                             // 此处while循环判断是否跳出循环的条件。\n  \n  // WiFi连接成功后将通过串口监视器输出连接成功信息 \n  Serial.println('\\n');\n  Serial.print(\"Connected to \");\n  Serial.println(WiFi.SSID());              // 通过串口监视器输出连接的WiFi名称\n  Serial.print(\"IP address:\\t\");\n  Serial.println(WiFi.localIP());           // 通过串口监视器输出ESP8266-NodeMCU的IP\n \n  esp8266_server.begin();                           // 启动网站服务\n  esp8266_server.on(\"/\", HTTP_GET, handleRoot);     // 设置服务器根目录即'/'的函数'handleRoot'\n  esp8266_server.on(\"/LED\", HTTP_POST, handleLED);  // 设置处理LED控制请求的函数'handleLED'\n  esp8266_server.onNotFound(handleNotFound);        // 设置处理404情况的函数'handleNotFound'\n \n  Serial.println(\"HTTP esp8266_server started\");//  告知用户ESP8266网络服务功能已经启动\n}\n \nvoid loop(void){\n  esp8266_server.handleClient();                     // 检查http服务器访问\n}\n \n/*设置服务器根目录即'/'的函数'handleRoot'\n  该函数的作用是每当有客户端访问NodeMCU服务器根目录时，\n  NodeMCU都会向访问设备发送 HTTP 状态 200 (Ok) 这是send函数的第一个参数。\n  同时NodeMCU还会向浏览器发送HTML代码，以下示例中send函数中第三个参数，\n  也就是双引号中的内容就是NodeMCU发送的HTML代码。该代码可在网页中产生LED控制按钮。 \n  当用户按下按钮时，浏览器将会向NodeMCU的/LED页面发送HTTP请求，请求方式为POST。\n  NodeMCU接收到此请求后将会执行handleLED函数内容*/\nvoid handleRoot() {       \n  esp8266_server.send(200, \"text/html\", \"<form action=\\\"/LED\\\" method=\\\"POST\\\"><input type=\\\"submit\\\" value=\\\"Toggle LED\\\"></form>\");\n}\n \n//处理LED控制请求的函数'handleLED'\nvoid handleLED() {                          \n  digitalWrite(LED_BUILTIN,!digitalRead(LED_BUILTIN));// 改变LED的点亮或者熄灭状态\n  esp8266_server.sendHeader(\"Location\",\"/\");          // 跳转回页面根目录\n  esp8266_server.send(303);                           // 发送Http相应代码303 跳转  \n}\n \n// 设置处理404情况的函数'handleNotFound'\nvoid handleNotFound(){\n  esp8266_server.send(404, \"text/plain\", \"404: Not found\"); // 发送 HTTP 状态 404 (未找到页面) 并向浏览器发送文字 \"404: Not found\"\n}\n```\n\n\n\n# [通过网络服务将开发板引脚状态显示在网页中](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/esp8266-nodemcu-web-server/pin-state/)\n\n为了便于学习，我们将使用D3引脚作为演示, 因为它已经与开发板上的FLASH按键开关连接好了。*我们可以通过NodeMCU开发板上的FLASH按键控制D3引脚的电平。*\n\n![NodeMCU开发板FLASH按键开关](https://raw.githubusercontent.com/wild-civil/typora_img/main/backgrounds/esp8266-nodemcu-Flash-Button-1.jpg)\n\n\n\n```c\n/**********************************************************************\n项目名称/Project          : 零基础入门学用物联网\n程序名称/Program name     : 3_2_3_Pin_State_Display\n团队/Team                : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)\n\n程序目的/Purpose          : 使用NodeMCU建立基本服务器。该页面将会自动刷新并且显示NodeMCU\n                           的D3引脚状态。NodeMCU开发板上的FLASH按键可以控制D3引脚的电平。\n                           没有按下该按键时D3引脚将会保持高电平状态。当按下该按键后，\n                           D3引脚会变为低电平。\n\n***********************************************************************/\n \n#include <ESP8266WiFi.h>        // 本程序使用 ESP8266WiFi库\n#include <ESP8266WiFiMulti.h>   //  ESP8266WiFiMulti库\n#include <ESP8266WebServer.h>   //  ESP8266WebServer库\n \n#define buttonPin D3            // 按钮引脚D3\n \nESP8266WiFiMulti wifiMulti;     // 建立ESP8266WiFiMulti对象,对象名称是'wifiMulti'\n \nESP8266WebServer esp8266_server(80);// 建立网络服务器对象，该对象用于响应HTTP请求。监听端口（80）\n \nbool pinState;  // 存储引脚状态用变量\n \nvoid setup(){\n  Serial.begin(9600);   // 启动串口通讯\n \n  pinMode(buttonPin, INPUT_PULLUP); // 将按键引脚设置为输入上拉模式\n \n  wifiMulti.addAP(\"ssid_from_AP_1\", \"your_password_for_AP_1\"); // 将需要连接的一系列WiFi ID和密码输入这里\n  wifiMulti.addAP(\"ssid_from_AP_2\", \"your_password_for_AP_2\"); // ESP8266-NodeMCU再启动后会扫描当前网络\n  wifiMulti.addAP(\"ssid_from_AP_3\", \"your_password_for_AP_3\"); // 环境查找是否有这里列出的WiFi ID。如果有\n  Serial.println(\"Connecting ...\");                            // 则尝试使用此处存储的密码进行连接。\n  \n  int i = 0;                                 \n  while (wifiMulti.run() != WL_CONNECTED) {  // 此处的wifiMulti.run()是重点。通过wifiMulti.run()，NodeMCU将会在当前\n    delay(1000);                             // 环境中搜索addAP函数所存储的WiFi。如果搜到多个存储的WiFi那么NodeMCU\n    Serial.print(i++); Serial.print(' ');    // 将会连接信号最强的那一个WiFi信号。\n  }                                          // 一旦连接WiFI成功，wifiMulti.run()将会返回“WL_CONNECTED”。这也是\n                                             // 此处while循环判断是否跳出循环的条件。\n  // WiFi连接成功后将通过串口监视器输出连接成功信息 \n  Serial.println('\\n');                     // WiFi连接成功后\n  Serial.print(\"Connected to \");            // NodeMCU将通过串口监视器输出。\n  Serial.println(WiFi.SSID());              // 连接的WiFI名称\n  Serial.print(\"IP address:\\t\");            // 以及\n  Serial.println(WiFi.localIP());           // NodeMCU的IP地址\n  \n  esp8266_server.begin();                   // 启动网站服务                \n  esp8266_server.on(\"/\", handleRoot);       // 设置服务器根目录即'/'的函数'handleRoot'\n  esp8266_server.onNotFound(handleNotFound);// 设置处理404情况的函数'handleNotFound'        \n \n  Serial.println(\"HTTP esp8266_server started\");//  告知用户ESP8266网络服务功能已经启动\n}\n \nvoid loop(){\n  esp8266_server.handleClient();     // 处理http服务器访问\n  pinState = digitalRead(buttonPin); // 获取引脚状态\n}\n \n//--------------------------------------------------------------------------------\n/* 以下函数处理网站首页的访问请求。此函数为本示例程序重点1\n详细讲解请参见太极创客网站《零基础入门学用物联网》\n第3章-第2节“通过网络服务将开发板引脚状态显示在网页中”的说明讲解。*/                                                                       \nvoid handleRoot() {   \n  String displayPinState;                   // 存储按键状态的字符串变量\n  \n  if(pinState == HIGH){                     // 当按键引脚D3为高电平\n    displayPinState = \"Button State: HIGH\"; // 字符串赋值高电平信息\n  } else {                                  // 当按键引脚D3为低电平\n    displayPinState = \"Button State: LOW\";  // 字符串赋值低电平信息\n  }\n  \n  esp8266_server.send(200, \"text/plain\", displayPinState); \n                                            // 向浏览器发送按键状态信息  \n}\n//--------------------------------------------------------------------------------\n \n// 设置处理404情况的函数'handleNotFound'\nvoid handleNotFound(){                                        // 当浏览器请求的网络资源无法在服务器找到时，\n  esp8266_server.send(404, \"text/plain\", \"404: Not found\");   // NodeMCU将调用此函数。\n}\n```\n\n\n\n在以上程序的loop函数中，`pinState = digitalRead(buttonPin);` 语句将不断检查NodeMCU开发板D3引脚状态，也就是检查该引脚所连接的按键是否被按下。该状态将会存储与布尔变量pinState中。\n\n变量pinState将会用于本程序的重点1，也就是handleRoot() 函数里。在handleRoot函数里，我们利用逻辑判断语句来对displayPinState 进行赋值。**如果按键没有被按下**，pinState为HIGH，这时候程序将会执行`displayPinState = \"Button State: HIGH\";`也就是为displayPinState的赋值为“Button State: HIGH”。这句话的意思是“按键引脚状态为高电平”。反之，当我们按下按键后，程序将会执行`displayPinState = \"Button State: LOW\";`也就是为displayPinState的赋值为“Button State: LOW”。\n\n在handleRoot函数的结尾处，\n`esp8266_server.send(200, \"text/plain\", displayPinState);`\n这条语句将会把displayPinState所存储的信息发送给浏览器。于是我们在没有按下按键时，将会得到以下页面信息。\n\n# **暂时没放图**\n\n以上示例中，我们需要刷新网页页面才能将按键的最新状态显示在网页中。为了实现页面的自动刷新，请您参考以下示例程序。\n\n```c\n/**********************************************************************\n项目名称/Project          : 零基础入门学用物联网\n程序名称/Program name     : 3_2_4_Pin_State_Display_Auto_Refresh\n团队/Team                : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)\n\n程序目的/Purpose          : 使用NodeMCU建立基本服务器。该网页将显示引脚D3状态。同时状态会\n                           每隔5秒钟更新一次。\n\n***********************************************************************/\n \n#include <ESP8266WiFi.h>        // 本程序使用 ESP8266WiFi库\n#include <ESP8266WiFiMulti.h>   //  ESP8266WiFiMulti库\n#include <ESP8266WebServer.h>   //  ESP8266WebServer库\n \n#define buttonPin D3            // 按钮引脚D3\n \nESP8266WiFiMulti wifiMulti;     // 建立ESP8266WiFiMulti对象,对象名称是'wifiMulti'\n \nESP8266WebServer esp8266_server(80);// 建立网络服务器对象，该对象用于响应HTTP请求。监听端口（80）\n \nbool pinState;                      // 存储引脚状态用变量\n \nvoid setup(){\n  Serial.begin(9600);          // 启动串口通讯\n  delay(10);\n  Serial.println(\"\");\n \n  pinMode(buttonPin, INPUT_PULLUP); // 将按键引脚设置为输入上拉模式\n \n  wifiMulti.addAP(\"ssid_from_AP_1\", \"your_password_for_AP_1\"); // 将需要连接的一系列WiFi ID和密码输入这里\n  wifiMulti.addAP(\"ssid_from_AP_2\", \"your_password_for_AP_2\"); // ESP8266-NodeMCU在启动后会扫描当前网络\n  wifiMulti.addAP(\"ssid_from_AP_3\", \"your_password_for_AP_3\"); // 环境查找是否有这里列出的WiFi ID。如果有\n  Serial.println(\"Connecting ...\");                            // 则尝试使用此处存储的密码进行连接。\n                                                               // 另外这里只存储了3个WiFi信息，您可以存储更多\n                                                               // 的WiFi信息在此处。\n  int i = 0;                                 \n  while (wifiMulti.run() != WL_CONNECTED) {  // 此处的wifiMulti.run()是重点。通过wifiMulti.run()，NodeMCU将会在当前\n    delay(1000);                             // 环境中搜索addAP函数所存储的WiFi。如果搜到多个存储的WiFi那么NodeMCU\n    Serial.print(i++); Serial.print(' ');    // 将会连接信号最强的那一个WiFi信号。\n  }                                          // 一旦连接WiFI成功，wifiMulti.run()将会返回“WL_CONNECTED”。这也是\n                                             // 此处while循环判断是否跳出循环的条件。\n  // WiFi连接成功后将通过串口监视器输出连接成功信息 \n  Serial.println('\\n');                     // WiFi连接成功后\n  Serial.print(\"Connected to \");            // NodeMCU将通过串口监视器输出。\n  Serial.println(WiFi.SSID());              // 连接的WiFI名称\n  Serial.print(\"IP address:\\t\");            // 以及\n  Serial.println(WiFi.localIP());           // NodeMCU的IP地址\n  \n  esp8266_server.begin();                  \n  esp8266_server.on(\"/\", handleRoot);      \n  esp8266_server.onNotFound(handleNotFound);        \n \n  Serial.println(\"HTTP esp8266_server started\");//  告知用户ESP8266网络服务功能已经启动\n}\n \nvoid loop(){\n  esp8266_server.handleClient();     // 处理http服务器访问\n  pinState = digitalRead(buttonPin); // 获取引脚状态\n}                                                                   \n \n/* 以下函数处理网站首页的访问请求。此函数为本示例程序重点1\n详细讲解请参见太极创客网站《零基础入门学用物联网》\n第3章-第2节“通过网络服务将开发板引脚状态显示在网页中”的说明讲解。*/    \nvoid handleRoot() {   //处理网站目录“/”的访问请求 \n  esp8266_server.send(200, \"text/html\", sendHTML(pinState));  \n}\n \n//--------------------------------------------------------------------------------\n/*\n建立用于发送给客户端浏览器的HTML代码。此代码将会每隔5秒刷新页面。\n通过页面刷新，引脚的最新状态也会显示于页面中\n*/\nString sendHTML(bool buttonState){\n  \n  String htmlCode = \"<!DOCTYPE html> <html>\\n\";\n  htmlCode +=\"<head><meta http-equiv='refresh' content='5'/>\\n\";\n  htmlCode +=\"<title>ESP8266 Butoon State</title>\\n\";\n  htmlCode +=\"<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}\\n\";\n  htmlCode +=\"body{margin-top: 50px;} h1 {color: #444444;margin: 50px auto 30px;} h3 {color: #444444;margin-bottom: 50px;}\\n\";\n  htmlCode +=\"</style>\\n\";\n  htmlCode +=\"</head>\\n\";\n  htmlCode +=\"<body>\\n\";\n  htmlCode +=\"<h1>ESP8266 BUTTON STATE</h1>\\n\";\n  \n  if(buttonState)\n    {htmlCode +=\"<p>Button Status: HIGH</p>\\n\";}\n  else\n    {htmlCode +=\"<p>Button Status: LOW</p>\\n\";}\n    \n  htmlCode +=\"</body>\\n\";\n  htmlCode +=\"</html>\\n\";\n  \n  return htmlCode;\n}\n//--------------------------------------------------------------------------------\n \n// 设置处理404情况的函数'handleNotFound'\nvoid handleNotFound(){                                        // 当浏览器请求的网络资源无法在服务器找到时，\n  esp8266_server.send(404, \"text/plain\", \"404: Not found\");   // NodeMCU将调用此函数。\n}\n```\n\n在以上示例程序中的`handleRoot`函数中，`esp8266_server.send(200, \"text/html\", sendHTML(pinState))`语句的的3个参数 `sendHTML(pinState)`调用了`sendHTML`函数。该函数的作用是建立一个可以定时刷新的HTML网页代码。通过定时刷新网页，开发板的引脚状态将会不断地在页面中进行更新。\n\n此HTML网页代码是由`sendHTML`函数产生的。该函数建立了一个字符串变量，该字符串变量所存储的信息正是网页HTML代码。值得注意的是，该HTML代码会不断地检查变量pinState状态，并且根据pinState的状态改变HTML代码的信息，从而实现在网页上显示引脚状态。\n\n此HTML代码中真正实现定时刷新网页功能的语句是代码中的第79行语句。这条语句是告诉网页需要定时刷新，刷新频率5秒钟，即每5秒钟刷新一次页面。您可以通过改变此行语句中的数值5来调整页面刷新频率。\n\n每一次页面刷新，浏览器都会向NodeMCU发送HTTP请求。NodeMCU在收到浏览器请求后，将会把最新的HTML代码信息返回给浏览器。浏览器收到最新的HTML代码后将会在页面中显示引脚的状态。\n以下是没有按下按键时的页面显示信息。\n\n# **暂时没放图**\n","source":"_posts/学物联网-NodeMCU-四.md","raw":"---\ntitle: 学物联网之ESP8266NodeMCU（四）\nabbrlink: 84438cc6\ndate: 2022-08-31 15:28:02\ntags:\n  - esp8266\n  - 物联网\nkeywords:\ndescription: ESP8266-NodeMCU网络服务器\npassword:\nabstract:\nmessage:\ncover: http://qiniu.hanvon.top/blog_cover/esp8266-nodemcu-web-server_covrer.png\ncopyright: false\n---\n\n# [建立基本网络服务器](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/esp8266-nodemcu-web-server/web-server/)\n\n网络服务是一个很宽泛的概念，我们在这里即将给您介绍的是网络服务中的网页服务功能。所谓**网页服务**就是专门用于网页浏览的服务。这个操作我相信所有看到这篇教程的朋友们都使用过，因为您现在正阅读的这篇教程就是通过网页服务传输到您面前的。\n\n为了能够应付来自全世界的朋友们大量访问，网站服务器是一台运算能力很强的计算机。假如这个网站只有您自己访问，那么ESP8266-NodeMCU就足够了。下面这个示例程序可以让ESP8266-NodeMCU实现最基本的网页服务功能。请先将这段示例程序复制并且上传NodeMCU。\n\n```c\n/**********************************************************************\n项目名称/Project          : 零基础入门学用物联网\n程序名称/Program name     : 3_2_1_First_Web_Server\n团队/Team                : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)\n程序目的/Purpose          : 使用NodeMCU建立基本服务器。用户可通过浏览器使用8266的IP地址\n                           访问8266所建立的基本网页（Hello from ESP8266）\n \n***********************************************************************/\n#include <ESP8266WiFi.h>        // 本程序使用 ESP8266WiFi库\n#include <ESP8266WiFiMulti.h>   //  ESP8266WiFiMulti库\n#include <ESP8266WebServer.h>   //  ESP8266WebServer库\n \nESP8266WiFiMulti wifiMulti;     // 建立ESP8266WiFiMulti对象,对象名称是'wifiMulti'\n \nESP8266WebServer esp8266_server(80);// 建立ESP8266WebServer对象，对象名称为esp8266_server\n                                    // 括号中的数字是网路服务器响应http请求的端口号\n                                    // 网络服务器标准http端口号为80，因此这里使用80为端口号\n \nvoid setup(void){\n  Serial.begin(9600);          // 启动串口通讯\n \n  //通过addAp函数存储  WiFi名称       WiFi密码\n  wifiMulti.addAP(\"taichi-maker\", \"12345678\");  // 这三条语句通过调用函数addAP来记录3个不同的WiFi网络信息。\n  wifiMulti.addAP(\"taichi-maker2\", \"87654321\"); // 这3个WiFi网络名称分别是taichi-maker, taichi-maker2, taichi-maker3。\n  wifiMulti.addAP(\"taichi-maker3\", \"13572468\"); // 这3个网络的密码分别是123456789，87654321，13572468。\n                                                // 此处WiFi信息只是示例，请在使用时将需要连接的WiFi信息填入相应位置。\n                                                // 另外这里只存储了3个WiFi信息，您可以存储更多的WiFi信息在此处。\n \n  int i = 0;                                 \n  while (wifiMulti.run() != WL_CONNECTED) {  // 此处的wifiMulti.run()是重点。通过wifiMulti.run()，NodeMCU将会在当前\n    delay(1000);                             // 环境中搜索addAP函数所存储的WiFi。如果搜到多个存储的WiFi那么NodeMCU\n    Serial.print(i++); Serial.print(' ');    // 将会连接信号最强的那一个WiFi信号。\n  }                                          // 一旦连接WiFI成功，wifiMulti.run()将会返回“WL_CONNECTED”。这也是\n                                             // 此处while循环判断是否跳出循环的条件。\n \n  // WiFi连接成功后将通过串口监视器输出连接成功信息 \n  Serial.println('\\n');                     // WiFi连接成功后\n  Serial.print(\"Connected to \");            // NodeMCU将通过串口监视器输出。\n  Serial.println(WiFi.SSID());              // 连接的WiFI名称\n  Serial.print(\"IP address:\\t\");            // 以及\n  Serial.println(WiFi.localIP());           // NodeMCU的IP地址\n  \n//--------\"启动网络服务功能\"程序部分开始-------- //  此部分为程序为本示例程序重点1\n  esp8266_server.begin();                   //  详细讲解请参见太极创客网站《零基础入门学用物联网》\n  esp8266_server.on(\"/\", handleRoot);       //  第3章-第2节 ESP8266-NodeMCU网络服务器-1\n  esp8266_server.onNotFound(handleNotFound);        \n//--------\"启动网络服务功能\"程序部分结束--------\n  Serial.println(\"HTTP esp8266_server started\");//  告知用户ESP8266网络服务功能已经启动\n}\n \n/* 以下函数语句为本示例程序重点3\n详细讲解请参见太极创客网站《零基础入门学用物联网》\n第3章-第2节 3_2_1_First_Web_Server 的说明讲解*/  \nvoid loop(void){\n  esp8266_server.handleClient();     // 处理http服务器访问\n}\n \n/* 以下两个函数为本示例程序重点2\n详细讲解请参见太极创客网站《零基础入门学用物联网》\n第3章-第2节 3_2_1_First_Web_Server 的说明讲解*/                                                                            \nvoid handleRoot() {   //处理网站根目录“/”的访问请求 \n  esp8266_server.send(200, \"text/plain\", \"Hello from ESP8266\");   // NodeMCU将调用此函数。 \n}\t\t\t\t\t\t\t\t\t\t\t\t\t\t//这个网站只有一个网页。且网页只有一行文字“Hello from ESP8266”。\n \n// 设置处理404情况的函数'handleNotFound'\nvoid handleNotFound(){                                        // 当浏览器请求的网络资源无法在服务器找到时，\n  esp8266_server.send(404, \"text/plain\", \"404: Not found\");   // NodeMCU将调用此函数。\n}\n```\n\n上传给NodeMCU，启动NodeMCU并且确保它已经成功连接WiFi, 打开浏览器，在地址栏中输入NodeMCU的IP地址并按下回车。\n\n假如将在浏览器中看到“Hello from ESP8266”(如下所示），那么恭喜您已经成功的让NodeMCU实现了网络服务功能，因为您所看到的这条文字信息正是来自于NodeMCU。换句话说，NodeMCU为您建立了一个超级迷你的小网站。\n\n首先讲解示例程序的第1个重点内容：**”启动网络服务功能“程序部分**\n\n``` c\nesp8266_server.begin();             \nesp8266_server.on(\"/\", handleRoot);      \nesp8266_server.onNotFound(handleNotFound); \n```\n\n程序第一句`esp8266_server.begin()`使用了ESP8266WebServer库中的`begin`函数。这个函数的作用是让ESP8266-NodeMCU来启动网络服务功能。该函数无需任何参数。\n\n接下来的的语句`esp8266_server.on(\"/\", handleRoot)`相对复杂一些。这条语句调用了ESP8266WebServer库中的`on`函数，该函数的作用是**指挥NodeMCU来如何处理浏览器的http请求**。我们看到`on`函数一共有两个参数，第一个参数是字符串”/”，第二个参数是一个函数的名称handleRoot。这个handleRoot函数的具体内容，我后面会给您做详细讲解。现在请您留意`on`函数有两个参数，一个是字符串”/”，另一个是函数名handleRoot。\n\n下面我来给您仔细解释一下参数”/”的作用。我们知道一个网站有很多页面。为了加以区分，这些页面都有各自的名称。对于刚刚您在浏览器看到的“Hello from ESP8266”这个页面是NodeMCU服务器中的网站首页。这个网站首页的名称正是”/”。目前的ESP8266-NodeMCU服务器中只有一页，因此我们还无法了解如果想要调用其他页面该如何操作。不过请别担心，这个操作我们会在下一个示例程序中为您讲解。\n\n好了，现在请将您的思绪拉回到我们的NodeMCU程序中来。接下来我们来看`on`函数的第二个参数。这个参数是`handleRoot`函数的名字。`handlRoot`函数的主要作用是告诉NodeMCU该如何生成和发送网站首页给浏览器。不过关于这个`handleRoot`函数的具体内容，我会在接下来的教程中给您做详细讲解。现在我们需要把关注点集中在`on`函数上。\n\n最后我们再来完整的看一下这条语句`esp8266_server.on(\"/\", handleRoot)`。它的作用就是告诉NodeMCU，当有浏览器请求网站首页时，请执行handlRoot函数来生成网站首页内容然后发送给浏览器。\n\n讲到这里不知道您会不会感到好奇。我们只是在浏览器地址栏输入了NodeMCU的IP地址，然后就按下了回车。浏览器怎么会知道我们需要的是网站的首页呢。这是浏览器约定俗成的一种操作方法。当我们在地址栏只输入IP地址而没有任何附加地址信息，浏览器就会知道我们是要获取一个网站的首页信息。\n\n结束了`on`函数的讲解，我们来继续往下看。下面一条语句`esp8266_server.onNotFound(handleNotFound)`使用了`onNotFound`函数。它的作用是**指挥NodeMCU在收到无法满足的http请求时应该如何处理**。目前Hello from ESP8266网站只有一个页面。假如有人想要浏览网站的其它页面，NodeMCU是无法满足这一请求的。这时候我们可以让NodeMCU答复一个“错误提示”页面给提出请求的浏览器。`onNotFound`函数就是用来告诉NodeMCU如果出现无法满足的http请求时该如何进行处理。`onNotFound`函数有一个参数，这个参数的内容是函数`handleNotFound`的名字。  \n\n\n\n假设现在我们通过浏览器向NodeMCU服务器请求一个名叫“LED”的页面。由于NodeMCU的程序里没有“LED”页面信息，因此需要给浏览器答复一个“错误提示”页面。`onNotFound`的作用就是告诉NodeMCU在遇到这种无法满足的http请求时，应该执行`handleNotFound`函数来生成并发送“错误提示”页面给浏览器。\n\n为了验证这一功能，我们来做一个实验。请在浏览器中输入NodMCU的IP地址然后加一个“/LED”再回车。比如下图所示，我的NodeMCU的IP地址是192.168.0.109，那么当我在浏览器栏中输入`192.168.0.109/LED`然后回车，就会看到浏览器显示出文字404: Not found。\n\n\n\n这里我们所看到的这行文字“404: Not found”正是因为NodeMCU没有名叫“LED”的页面，因此它会使用handleNotFound函数生成并发送给浏览器这个“错误提示”页面。既然讲到这里了，那么我们就来仔细看一看handleNotFound函数的具体内容。  \n\n```c\nvoid handleNotFound(){                                \n  esp8266_server.send(404, \"text/plain\", \"404: Not found\");  \n}\n```\n\nhandleNotFound函数只有一条语句： `esp8266_server.send(404, \"text/plain\", \"404: Not found\")`。这条语句调用了ESP8266WebServer库中的`send`函数。该函数的作用是生成并且发送http响应信息。也就是说，电脑浏览器所收到的网页信息都是通过`send`函数生成并且发送的。那么具体这个网页信息是如何生成的呢？这就要仔细看看`send`函数的几个参数内容了。  \n\n首先我们来看第一个参数404。这个数字对于很多朋友来说都不会感到陌生，在[互联网基础-应用层](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/internet-basics/application-layer/#http-response)的http响应部分对它做过介绍。404是一个服务器状态码。它的含义是“客户端的请求有错误”。也就是说，浏览器在收到了状态码404后就知道，它所请求的页面在服务器上是不存在的。请留意，这个服务器状态码是专门给浏览器用的。我们是看不到它的。为了让我们也看到页面不存在的出错信息，`send`函数的最后一个参数使用了一个字符串”404: Not found”。这个字符串的内容才是真正显示在浏览器中供我们阅读的内容。你可以任意的改变这个字符串的内容。  \n\n  \n\n到这里我们来小结一下。浏览器能够看懂的信息是send函数的第一个参数,它的类型是整数型，它的内容是数字404。而显示在浏览器中的出错信息是一个字符串型的参数。它是send函数的最后一个参数。在我们的示例程序里，它的内容是“404: Not found”。\n\n`send`函数还有一个字符串参数“text/plain”。它的作用是**说明http响应体的信息类型**。在这段示例中，我们用“text/plain”的原因是要告诉浏览器后面的”404: Not found”为一段纯文本信息。这里当然也可以使用其它类型的信息。不过这一知识我们后续教程中会给您介绍。\n\n为了让您更好的理解刚刚给您解释的内容，我来对这句`esp8266_server.send(404, \"text/plain\", \"404: Not found\")`做一下总结。\n\nsend函数一共有3个参数。第一个参数404是服务器状态码。第二个参数“text/plain”是说明http响应体信息类型。第三个参数“404: Not found”则是响应体的具体信息了。\n\n细心的读者可能已经发现了。我在上面这段总结文字中指明了响应体这一概念。http响应是分为两部分的。第一部分是响应头，在我们这个示例中，响应头的内容就是404 text/plain。而响应体的内容则是404: Not found。\n\n结束了handleNotFound的讲解我们最后再来看看示例程序中另一个用于生成和发送首页信息的函数：`handleRoot`。\n\n```c\nvoid handleRoot() {                         \n    esp8266_server.send(200, \"text/plain\", \"Hello from ESP8266\");\n}\n```\n\n这段示例程序与刚刚我们见到的handleNotFound函数非常相似。都是使用`send`函数生成并且发送http响应信息。\n\n`send`函数的第一个参数200，它同样是一个服务器状态码，含义是“成功接收请求，并已完成整个处理过程”。 第二个参数text/plain的作用我刚刚给您讲过，不再赘述了。最后一个参数”Hello from ESP8266″正是我们在浏览器中看到的首页文字内容。\n\n最后我们来看一下这段示例程序的第3个重点内容，也就是loop函数中唯一的一条语句`esp8266_server.handleClient()`。这句程序调用了`handleClient`函数。它的主要作用之一是检查有没有设备通过网络向NodeMCU发送请求。`函数handleClient`每次被调用时，NodeMCU都会检查一下是否有人发送http请求。因此我们需要把它放在loop函数中，从而确保它能经常被调用。假如我们的loop函数里有类似delay一类的函数延迟程序运行，那么这时候就一定要注意了。如果`handleClient`函数长时间得不到调用，NodeMCU的网络服务会变得很不稳定。因此在使用NodeMCU执行网络服务功能的时候，一定要确保`handleClient`函数经常得以调用。我在这里反复强调这一点是因为这一点非常关键，请务必注意！\n\n这一节的程序内容到这里就讲解完毕了，下一节教程我将为您讲解如何建立可以控制NodeMCU开发板的网页。\n\n\n\n# [通过网络服务实现NodeMCU开发板基本控制](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/esp8266-nodemcu-web-server/pin-control/)\n\n利用NodeMCU建立网络服务\n\n用户通过浏览器可以访问NodeMCU所建立的网页\n\n通过该网页，用户可实现对NodeMCU的控制。\n\n以下是示例代码：\n\n```c\n/**********************************************************************\n项目名称/Project          : 零基础入门学用物联网\n程序名称/Program name     : 3_2_2_Turning_on_and_off_an_LED\n团队/Team                : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)\n程序目的/Purpose          : 使用NodeMCU建立基本服务器。用户可通过浏览器使用8266的IP地址\n                           访问8266所建立的基本网页并通过该页面点亮/熄灭NodeMCU的内置LED\n\n***********************************************************************/\n#include <ESP8266WiFi.h>        // 本程序使用 ESP8266WiFi库\n#include <ESP8266WiFiMulti.h>   //  ESP8266WiFiMulti库\n#include <ESP8266WebServer.h>   //  ESP8266WebServer库\n \nESP8266WiFiMulti wifiMulti;     // 建立ESP8266WiFiMulti对象,对象名称是 'wifiMulti'\n \nESP8266WebServer esp8266_server(80);// 建立网络服务器对象，该对象用于响应HTTP请求。监听端口（80）\n \nvoid setup(void){\n  Serial.begin(9600);   // 启动串口通讯\n \n  pinMode(LED_BUILTIN, OUTPUT); //设置内置LED引脚为输出模式以便控制LED\n  \n  wifiMulti.addAP(\"ssid_from_AP_1\", \"your_password_for_AP_1\"); // 将需要连接的一系列WiFi ID和密码输入这里\n  wifiMulti.addAP(\"ssid_from_AP_2\", \"your_password_for_AP_2\"); // ESP8266-NodeMCU再启动后会扫描当前网络\n  wifiMulti.addAP(\"ssid_from_AP_3\", \"your_password_for_AP_3\"); // 环境查找是否有这里列出的WiFi ID。如果有\n  Serial.println(\"Connecting ...\");                            // 则尝试使用此处存储的密码进行连接。\n  \n  int i = 0;                                 \n  while (wifiMulti.run() != WL_CONNECTED) {  // 此处的wifiMulti.run()是重点。通过wifiMulti.run()，NodeMCU将会在当前\n    delay(1000);                             // 环境中搜索addAP函数所存储的WiFi。如果搜到多个存储的WiFi那么NodeMCU\n    Serial.print(i++); Serial.print(' ');    // 将会连接信号最强的那一个WiFi信号。\n  }                                          // 一旦连接WiFI成功，wifiMulti.run()将会返回“WL_CONNECTED”。这也是\n                                             // 此处while循环判断是否跳出循环的条件。\n  \n  // WiFi连接成功后将通过串口监视器输出连接成功信息 \n  Serial.println('\\n');\n  Serial.print(\"Connected to \");\n  Serial.println(WiFi.SSID());              // 通过串口监视器输出连接的WiFi名称\n  Serial.print(\"IP address:\\t\");\n  Serial.println(WiFi.localIP());           // 通过串口监视器输出ESP8266-NodeMCU的IP\n \n  esp8266_server.begin();                           // 启动网站服务\n  esp8266_server.on(\"/\", HTTP_GET, handleRoot);     // 设置服务器根目录即'/'的函数'handleRoot'\n  esp8266_server.on(\"/LED\", HTTP_POST, handleLED);  // 设置处理LED控制请求的函数'handleLED'\n  esp8266_server.onNotFound(handleNotFound);        // 设置处理404情况的函数'handleNotFound'\n \n  Serial.println(\"HTTP esp8266_server started\");//  告知用户ESP8266网络服务功能已经启动\n}\n \nvoid loop(void){\n  esp8266_server.handleClient();                     // 检查http服务器访问\n}\n \n/*设置服务器根目录即'/'的函数'handleRoot'\n  该函数的作用是每当有客户端访问NodeMCU服务器根目录时，\n  NodeMCU都会向访问设备发送 HTTP 状态 200 (Ok) 这是send函数的第一个参数。\n  同时NodeMCU还会向浏览器发送HTML代码，以下示例中send函数中第三个参数，\n  也就是双引号中的内容就是NodeMCU发送的HTML代码。该代码可在网页中产生LED控制按钮。 \n  当用户按下按钮时，浏览器将会向NodeMCU的/LED页面发送HTTP请求，请求方式为POST。\n  NodeMCU接收到此请求后将会执行handleLED函数内容*/\nvoid handleRoot() {       \n  esp8266_server.send(200, \"text/html\", \"<form action=\\\"/LED\\\" method=\\\"POST\\\"><input type=\\\"submit\\\" value=\\\"Toggle LED\\\"></form>\");\n}\n \n//处理LED控制请求的函数'handleLED'\nvoid handleLED() {                          \n  digitalWrite(LED_BUILTIN,!digitalRead(LED_BUILTIN));// 改变LED的点亮或者熄灭状态\n  esp8266_server.sendHeader(\"Location\",\"/\");          // 跳转回页面根目录\n  esp8266_server.send(303);                           // 发送Http相应代码303 跳转  \n}\n \n// 设置处理404情况的函数'handleNotFound'\nvoid handleNotFound(){\n  esp8266_server.send(404, \"text/plain\", \"404: Not found\"); // 发送 HTTP 状态 404 (未找到页面) 并向浏览器发送文字 \"404: Not found\"\n}\n```\n\n\n\n# [通过网络服务将开发板引脚状态显示在网页中](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/esp8266-nodemcu-web-server/pin-state/)\n\n为了便于学习，我们将使用D3引脚作为演示, 因为它已经与开发板上的FLASH按键开关连接好了。*我们可以通过NodeMCU开发板上的FLASH按键控制D3引脚的电平。*\n\n![NodeMCU开发板FLASH按键开关](https://raw.githubusercontent.com/wild-civil/typora_img/main/backgrounds/esp8266-nodemcu-Flash-Button-1.jpg)\n\n\n\n```c\n/**********************************************************************\n项目名称/Project          : 零基础入门学用物联网\n程序名称/Program name     : 3_2_3_Pin_State_Display\n团队/Team                : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)\n\n程序目的/Purpose          : 使用NodeMCU建立基本服务器。该页面将会自动刷新并且显示NodeMCU\n                           的D3引脚状态。NodeMCU开发板上的FLASH按键可以控制D3引脚的电平。\n                           没有按下该按键时D3引脚将会保持高电平状态。当按下该按键后，\n                           D3引脚会变为低电平。\n\n***********************************************************************/\n \n#include <ESP8266WiFi.h>        // 本程序使用 ESP8266WiFi库\n#include <ESP8266WiFiMulti.h>   //  ESP8266WiFiMulti库\n#include <ESP8266WebServer.h>   //  ESP8266WebServer库\n \n#define buttonPin D3            // 按钮引脚D3\n \nESP8266WiFiMulti wifiMulti;     // 建立ESP8266WiFiMulti对象,对象名称是'wifiMulti'\n \nESP8266WebServer esp8266_server(80);// 建立网络服务器对象，该对象用于响应HTTP请求。监听端口（80）\n \nbool pinState;  // 存储引脚状态用变量\n \nvoid setup(){\n  Serial.begin(9600);   // 启动串口通讯\n \n  pinMode(buttonPin, INPUT_PULLUP); // 将按键引脚设置为输入上拉模式\n \n  wifiMulti.addAP(\"ssid_from_AP_1\", \"your_password_for_AP_1\"); // 将需要连接的一系列WiFi ID和密码输入这里\n  wifiMulti.addAP(\"ssid_from_AP_2\", \"your_password_for_AP_2\"); // ESP8266-NodeMCU再启动后会扫描当前网络\n  wifiMulti.addAP(\"ssid_from_AP_3\", \"your_password_for_AP_3\"); // 环境查找是否有这里列出的WiFi ID。如果有\n  Serial.println(\"Connecting ...\");                            // 则尝试使用此处存储的密码进行连接。\n  \n  int i = 0;                                 \n  while (wifiMulti.run() != WL_CONNECTED) {  // 此处的wifiMulti.run()是重点。通过wifiMulti.run()，NodeMCU将会在当前\n    delay(1000);                             // 环境中搜索addAP函数所存储的WiFi。如果搜到多个存储的WiFi那么NodeMCU\n    Serial.print(i++); Serial.print(' ');    // 将会连接信号最强的那一个WiFi信号。\n  }                                          // 一旦连接WiFI成功，wifiMulti.run()将会返回“WL_CONNECTED”。这也是\n                                             // 此处while循环判断是否跳出循环的条件。\n  // WiFi连接成功后将通过串口监视器输出连接成功信息 \n  Serial.println('\\n');                     // WiFi连接成功后\n  Serial.print(\"Connected to \");            // NodeMCU将通过串口监视器输出。\n  Serial.println(WiFi.SSID());              // 连接的WiFI名称\n  Serial.print(\"IP address:\\t\");            // 以及\n  Serial.println(WiFi.localIP());           // NodeMCU的IP地址\n  \n  esp8266_server.begin();                   // 启动网站服务                \n  esp8266_server.on(\"/\", handleRoot);       // 设置服务器根目录即'/'的函数'handleRoot'\n  esp8266_server.onNotFound(handleNotFound);// 设置处理404情况的函数'handleNotFound'        \n \n  Serial.println(\"HTTP esp8266_server started\");//  告知用户ESP8266网络服务功能已经启动\n}\n \nvoid loop(){\n  esp8266_server.handleClient();     // 处理http服务器访问\n  pinState = digitalRead(buttonPin); // 获取引脚状态\n}\n \n//--------------------------------------------------------------------------------\n/* 以下函数处理网站首页的访问请求。此函数为本示例程序重点1\n详细讲解请参见太极创客网站《零基础入门学用物联网》\n第3章-第2节“通过网络服务将开发板引脚状态显示在网页中”的说明讲解。*/                                                                       \nvoid handleRoot() {   \n  String displayPinState;                   // 存储按键状态的字符串变量\n  \n  if(pinState == HIGH){                     // 当按键引脚D3为高电平\n    displayPinState = \"Button State: HIGH\"; // 字符串赋值高电平信息\n  } else {                                  // 当按键引脚D3为低电平\n    displayPinState = \"Button State: LOW\";  // 字符串赋值低电平信息\n  }\n  \n  esp8266_server.send(200, \"text/plain\", displayPinState); \n                                            // 向浏览器发送按键状态信息  \n}\n//--------------------------------------------------------------------------------\n \n// 设置处理404情况的函数'handleNotFound'\nvoid handleNotFound(){                                        // 当浏览器请求的网络资源无法在服务器找到时，\n  esp8266_server.send(404, \"text/plain\", \"404: Not found\");   // NodeMCU将调用此函数。\n}\n```\n\n\n\n在以上程序的loop函数中，`pinState = digitalRead(buttonPin);` 语句将不断检查NodeMCU开发板D3引脚状态，也就是检查该引脚所连接的按键是否被按下。该状态将会存储与布尔变量pinState中。\n\n变量pinState将会用于本程序的重点1，也就是handleRoot() 函数里。在handleRoot函数里，我们利用逻辑判断语句来对displayPinState 进行赋值。**如果按键没有被按下**，pinState为HIGH，这时候程序将会执行`displayPinState = \"Button State: HIGH\";`也就是为displayPinState的赋值为“Button State: HIGH”。这句话的意思是“按键引脚状态为高电平”。反之，当我们按下按键后，程序将会执行`displayPinState = \"Button State: LOW\";`也就是为displayPinState的赋值为“Button State: LOW”。\n\n在handleRoot函数的结尾处，\n`esp8266_server.send(200, \"text/plain\", displayPinState);`\n这条语句将会把displayPinState所存储的信息发送给浏览器。于是我们在没有按下按键时，将会得到以下页面信息。\n\n# **暂时没放图**\n\n以上示例中，我们需要刷新网页页面才能将按键的最新状态显示在网页中。为了实现页面的自动刷新，请您参考以下示例程序。\n\n```c\n/**********************************************************************\n项目名称/Project          : 零基础入门学用物联网\n程序名称/Program name     : 3_2_4_Pin_State_Display_Auto_Refresh\n团队/Team                : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)\n\n程序目的/Purpose          : 使用NodeMCU建立基本服务器。该网页将显示引脚D3状态。同时状态会\n                           每隔5秒钟更新一次。\n\n***********************************************************************/\n \n#include <ESP8266WiFi.h>        // 本程序使用 ESP8266WiFi库\n#include <ESP8266WiFiMulti.h>   //  ESP8266WiFiMulti库\n#include <ESP8266WebServer.h>   //  ESP8266WebServer库\n \n#define buttonPin D3            // 按钮引脚D3\n \nESP8266WiFiMulti wifiMulti;     // 建立ESP8266WiFiMulti对象,对象名称是'wifiMulti'\n \nESP8266WebServer esp8266_server(80);// 建立网络服务器对象，该对象用于响应HTTP请求。监听端口（80）\n \nbool pinState;                      // 存储引脚状态用变量\n \nvoid setup(){\n  Serial.begin(9600);          // 启动串口通讯\n  delay(10);\n  Serial.println(\"\");\n \n  pinMode(buttonPin, INPUT_PULLUP); // 将按键引脚设置为输入上拉模式\n \n  wifiMulti.addAP(\"ssid_from_AP_1\", \"your_password_for_AP_1\"); // 将需要连接的一系列WiFi ID和密码输入这里\n  wifiMulti.addAP(\"ssid_from_AP_2\", \"your_password_for_AP_2\"); // ESP8266-NodeMCU在启动后会扫描当前网络\n  wifiMulti.addAP(\"ssid_from_AP_3\", \"your_password_for_AP_3\"); // 环境查找是否有这里列出的WiFi ID。如果有\n  Serial.println(\"Connecting ...\");                            // 则尝试使用此处存储的密码进行连接。\n                                                               // 另外这里只存储了3个WiFi信息，您可以存储更多\n                                                               // 的WiFi信息在此处。\n  int i = 0;                                 \n  while (wifiMulti.run() != WL_CONNECTED) {  // 此处的wifiMulti.run()是重点。通过wifiMulti.run()，NodeMCU将会在当前\n    delay(1000);                             // 环境中搜索addAP函数所存储的WiFi。如果搜到多个存储的WiFi那么NodeMCU\n    Serial.print(i++); Serial.print(' ');    // 将会连接信号最强的那一个WiFi信号。\n  }                                          // 一旦连接WiFI成功，wifiMulti.run()将会返回“WL_CONNECTED”。这也是\n                                             // 此处while循环判断是否跳出循环的条件。\n  // WiFi连接成功后将通过串口监视器输出连接成功信息 \n  Serial.println('\\n');                     // WiFi连接成功后\n  Serial.print(\"Connected to \");            // NodeMCU将通过串口监视器输出。\n  Serial.println(WiFi.SSID());              // 连接的WiFI名称\n  Serial.print(\"IP address:\\t\");            // 以及\n  Serial.println(WiFi.localIP());           // NodeMCU的IP地址\n  \n  esp8266_server.begin();                  \n  esp8266_server.on(\"/\", handleRoot);      \n  esp8266_server.onNotFound(handleNotFound);        \n \n  Serial.println(\"HTTP esp8266_server started\");//  告知用户ESP8266网络服务功能已经启动\n}\n \nvoid loop(){\n  esp8266_server.handleClient();     // 处理http服务器访问\n  pinState = digitalRead(buttonPin); // 获取引脚状态\n}                                                                   \n \n/* 以下函数处理网站首页的访问请求。此函数为本示例程序重点1\n详细讲解请参见太极创客网站《零基础入门学用物联网》\n第3章-第2节“通过网络服务将开发板引脚状态显示在网页中”的说明讲解。*/    \nvoid handleRoot() {   //处理网站目录“/”的访问请求 \n  esp8266_server.send(200, \"text/html\", sendHTML(pinState));  \n}\n \n//--------------------------------------------------------------------------------\n/*\n建立用于发送给客户端浏览器的HTML代码。此代码将会每隔5秒刷新页面。\n通过页面刷新，引脚的最新状态也会显示于页面中\n*/\nString sendHTML(bool buttonState){\n  \n  String htmlCode = \"<!DOCTYPE html> <html>\\n\";\n  htmlCode +=\"<head><meta http-equiv='refresh' content='5'/>\\n\";\n  htmlCode +=\"<title>ESP8266 Butoon State</title>\\n\";\n  htmlCode +=\"<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}\\n\";\n  htmlCode +=\"body{margin-top: 50px;} h1 {color: #444444;margin: 50px auto 30px;} h3 {color: #444444;margin-bottom: 50px;}\\n\";\n  htmlCode +=\"</style>\\n\";\n  htmlCode +=\"</head>\\n\";\n  htmlCode +=\"<body>\\n\";\n  htmlCode +=\"<h1>ESP8266 BUTTON STATE</h1>\\n\";\n  \n  if(buttonState)\n    {htmlCode +=\"<p>Button Status: HIGH</p>\\n\";}\n  else\n    {htmlCode +=\"<p>Button Status: LOW</p>\\n\";}\n    \n  htmlCode +=\"</body>\\n\";\n  htmlCode +=\"</html>\\n\";\n  \n  return htmlCode;\n}\n//--------------------------------------------------------------------------------\n \n// 设置处理404情况的函数'handleNotFound'\nvoid handleNotFound(){                                        // 当浏览器请求的网络资源无法在服务器找到时，\n  esp8266_server.send(404, \"text/plain\", \"404: Not found\");   // NodeMCU将调用此函数。\n}\n```\n\n在以上示例程序中的`handleRoot`函数中，`esp8266_server.send(200, \"text/html\", sendHTML(pinState))`语句的的3个参数 `sendHTML(pinState)`调用了`sendHTML`函数。该函数的作用是建立一个可以定时刷新的HTML网页代码。通过定时刷新网页，开发板的引脚状态将会不断地在页面中进行更新。\n\n此HTML网页代码是由`sendHTML`函数产生的。该函数建立了一个字符串变量，该字符串变量所存储的信息正是网页HTML代码。值得注意的是，该HTML代码会不断地检查变量pinState状态，并且根据pinState的状态改变HTML代码的信息，从而实现在网页上显示引脚状态。\n\n此HTML代码中真正实现定时刷新网页功能的语句是代码中的第79行语句。这条语句是告诉网页需要定时刷新，刷新频率5秒钟，即每5秒钟刷新一次页面。您可以通过改变此行语句中的数值5来调整页面刷新频率。\n\n每一次页面刷新，浏览器都会向NodeMCU发送HTTP请求。NodeMCU在收到浏览器请求后，将会把最新的HTML代码信息返回给浏览器。浏览器收到最新的HTML代码后将会在页面中显示引脚的状态。\n以下是没有按下按键时的页面显示信息。\n\n# **暂时没放图**\n","slug":"学物联网-NodeMCU-四","published":1,"updated":"2023-11-01T03:57:59.882Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clofj2tc70016oot37a0s0awg","content":"<h1 id=\"建立基本网络服务器\"><a href=\"#建立基本网络服务器\" class=\"headerlink\" title=\"建立基本网络服务器\"></a><a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/esp8266-nodemcu-web-server/web-server/\">建立基本网络服务器</a></h1><p>网络服务是一个很宽泛的概念，我们在这里即将给您介绍的是网络服务中的网页服务功能。所谓<strong>网页服务</strong>就是专门用于网页浏览的服务。这个操作我相信所有看到这篇教程的朋友们都使用过，因为您现在正阅读的这篇教程就是通过网页服务传输到您面前的。</p>\n<p>为了能够应付来自全世界的朋友们大量访问，网站服务器是一台运算能力很强的计算机。假如这个网站只有您自己访问，那么ESP8266-NodeMCU就足够了。下面这个示例程序可以让ESP8266-NodeMCU实现最基本的网页服务功能。请先将这段示例程序复制并且上传NodeMCU。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**********************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">项目名称/Project          : 零基础入门学用物联网</span></span><br><span class=\"line\"><span class=\"comment\">程序名称/Program name     : 3_2_1_First_Web_Server</span></span><br><span class=\"line\"><span class=\"comment\">团队/Team                : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)</span></span><br><span class=\"line\"><span class=\"comment\">程序目的/Purpose          : 使用NodeMCU建立基本服务器。用户可通过浏览器使用8266的IP地址</span></span><br><span class=\"line\"><span class=\"comment\">                           访问8266所建立的基本网页（Hello from ESP8266）</span></span><br><span class=\"line\"><span class=\"comment\"> </span></span><br><span class=\"line\"><span class=\"comment\">***********************************************************************/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ESP8266WiFi.h&gt;</span>        <span class=\"comment\">// 本程序使用 ESP8266WiFi库</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ESP8266WiFiMulti.h&gt;</span>   <span class=\"comment\">//  ESP8266WiFiMulti库</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ESP8266WebServer.h&gt;</span>   <span class=\"comment\">//  ESP8266WebServer库</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\">ESP8266WiFiMulti wifiMulti;     <span class=\"comment\">// 建立ESP8266WiFiMulti对象,对象名称是&#x27;wifiMulti&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">ESP8266WebServer <span class=\"title function_\">esp8266_server</span><span class=\"params\">(<span class=\"number\">80</span>)</span>;<span class=\"comment\">// 建立ESP8266WebServer对象，对象名称为esp8266_server</span></span><br><span class=\"line\">                                    <span class=\"comment\">// 括号中的数字是网路服务器响应http请求的端口号</span></span><br><span class=\"line\">                                    <span class=\"comment\">// 网络服务器标准http端口号为80，因此这里使用80为端口号</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">setup</span><span class=\"params\">(<span class=\"type\">void</span>)</span>&#123;</span><br><span class=\"line\">  Serial.begin(<span class=\"number\">9600</span>);          <span class=\"comment\">// 启动串口通讯</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">//通过addAp函数存储  WiFi名称       WiFi密码</span></span><br><span class=\"line\">  wifiMulti.addAP(<span class=\"string\">&quot;taichi-maker&quot;</span>, <span class=\"string\">&quot;12345678&quot;</span>);  <span class=\"comment\">// 这三条语句通过调用函数addAP来记录3个不同的WiFi网络信息。</span></span><br><span class=\"line\">  wifiMulti.addAP(<span class=\"string\">&quot;taichi-maker2&quot;</span>, <span class=\"string\">&quot;87654321&quot;</span>); <span class=\"comment\">// 这3个WiFi网络名称分别是taichi-maker, taichi-maker2, taichi-maker3。</span></span><br><span class=\"line\">  wifiMulti.addAP(<span class=\"string\">&quot;taichi-maker3&quot;</span>, <span class=\"string\">&quot;13572468&quot;</span>); <span class=\"comment\">// 这3个网络的密码分别是123456789，87654321，13572468。</span></span><br><span class=\"line\">                                                <span class=\"comment\">// 此处WiFi信息只是示例，请在使用时将需要连接的WiFi信息填入相应位置。</span></span><br><span class=\"line\">                                                <span class=\"comment\">// 另外这里只存储了3个WiFi信息，您可以存储更多的WiFi信息在此处。</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"type\">int</span> i = <span class=\"number\">0</span>;                                 </span><br><span class=\"line\">  <span class=\"keyword\">while</span> (wifiMulti.run() != WL_CONNECTED) &#123;  <span class=\"comment\">// 此处的wifiMulti.run()是重点。通过wifiMulti.run()，NodeMCU将会在当前</span></span><br><span class=\"line\">    delay(<span class=\"number\">1000</span>);                             <span class=\"comment\">// 环境中搜索addAP函数所存储的WiFi。如果搜到多个存储的WiFi那么NodeMCU</span></span><br><span class=\"line\">    Serial.print(i++); Serial.print(<span class=\"string\">&#x27; &#x27;</span>);    <span class=\"comment\">// 将会连接信号最强的那一个WiFi信号。</span></span><br><span class=\"line\">  &#125;                                          <span class=\"comment\">// 一旦连接WiFI成功，wifiMulti.run()将会返回“WL_CONNECTED”。这也是</span></span><br><span class=\"line\">                                             <span class=\"comment\">// 此处while循环判断是否跳出循环的条件。</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// WiFi连接成功后将通过串口监视器输出连接成功信息 </span></span><br><span class=\"line\">  Serial.println(<span class=\"string\">&#x27;\\n&#x27;</span>);                     <span class=\"comment\">// WiFi连接成功后</span></span><br><span class=\"line\">  Serial.print(<span class=\"string\">&quot;Connected to &quot;</span>);            <span class=\"comment\">// NodeMCU将通过串口监视器输出。</span></span><br><span class=\"line\">  Serial.println(WiFi.SSID());              <span class=\"comment\">// 连接的WiFI名称</span></span><br><span class=\"line\">  Serial.print(<span class=\"string\">&quot;IP address:\\t&quot;</span>);            <span class=\"comment\">// 以及</span></span><br><span class=\"line\">  Serial.println(WiFi.localIP());           <span class=\"comment\">// NodeMCU的IP地址</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//--------&quot;启动网络服务功能&quot;程序部分开始-------- //  此部分为程序为本示例程序重点1</span></span><br><span class=\"line\">  esp8266_server.begin();                   <span class=\"comment\">//  详细讲解请参见太极创客网站《零基础入门学用物联网》</span></span><br><span class=\"line\">  esp8266_server.on(<span class=\"string\">&quot;/&quot;</span>, handleRoot);       <span class=\"comment\">//  第3章-第2节 ESP8266-NodeMCU网络服务器-1</span></span><br><span class=\"line\">  esp8266_server.onNotFound(handleNotFound);        </span><br><span class=\"line\"><span class=\"comment\">//--------&quot;启动网络服务功能&quot;程序部分结束--------</span></span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot;HTTP esp8266_server started&quot;</span>);<span class=\"comment\">//  告知用户ESP8266网络服务功能已经启动</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/* 以下函数语句为本示例程序重点3</span></span><br><span class=\"line\"><span class=\"comment\">详细讲解请参见太极创客网站《零基础入门学用物联网》</span></span><br><span class=\"line\"><span class=\"comment\">第3章-第2节 3_2_1_First_Web_Server 的说明讲解*/</span>  </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">loop</span><span class=\"params\">(<span class=\"type\">void</span>)</span>&#123;</span><br><span class=\"line\">  esp8266_server.handleClient();     <span class=\"comment\">// 处理http服务器访问</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/* 以下两个函数为本示例程序重点2</span></span><br><span class=\"line\"><span class=\"comment\">详细讲解请参见太极创客网站《零基础入门学用物联网》</span></span><br><span class=\"line\"><span class=\"comment\">第3章-第2节 3_2_1_First_Web_Server 的说明讲解*/</span>                                                                            </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">handleRoot</span><span class=\"params\">()</span> &#123;   <span class=\"comment\">//处理网站根目录“/”的访问请求 </span></span><br><span class=\"line\">  esp8266_server.send(<span class=\"number\">200</span>, <span class=\"string\">&quot;text/plain&quot;</span>, <span class=\"string\">&quot;Hello from ESP8266&quot;</span>);   <span class=\"comment\">// NodeMCU将调用此函数。 </span></span><br><span class=\"line\">&#125;\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//这个网站只有一个网页。且网页只有一行文字“Hello from ESP8266”。</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 设置处理404情况的函数&#x27;handleNotFound&#x27;</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">handleNotFound</span><span class=\"params\">()</span>&#123;                                        <span class=\"comment\">// 当浏览器请求的网络资源无法在服务器找到时，</span></span><br><span class=\"line\">  esp8266_server.send(<span class=\"number\">404</span>, <span class=\"string\">&quot;text/plain&quot;</span>, <span class=\"string\">&quot;404: Not found&quot;</span>);   <span class=\"comment\">// NodeMCU将调用此函数。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上传给NodeMCU，启动NodeMCU并且确保它已经成功连接WiFi, 打开浏览器，在地址栏中输入NodeMCU的IP地址并按下回车。</p>\n<p>假如将在浏览器中看到“Hello from ESP8266”(如下所示），那么恭喜您已经成功的让NodeMCU实现了网络服务功能，因为您所看到的这条文字信息正是来自于NodeMCU。换句话说，NodeMCU为您建立了一个超级迷你的小网站。</p>\n<p>首先讲解示例程序的第1个重点内容：<strong>”启动网络服务功能“程序部分</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">esp8266_server.begin();             </span><br><span class=\"line\">esp8266_server.on(<span class=\"string\">&quot;/&quot;</span>, handleRoot);      </span><br><span class=\"line\">esp8266_server.onNotFound(handleNotFound); </span><br></pre></td></tr></table></figure>\n\n<p>程序第一句<code>esp8266_server.begin()</code>使用了ESP8266WebServer库中的<code>begin</code>函数。这个函数的作用是让ESP8266-NodeMCU来启动网络服务功能。该函数无需任何参数。</p>\n<p>接下来的的语句<code>esp8266_server.on(&quot;/&quot;, handleRoot)</code>相对复杂一些。这条语句调用了ESP8266WebServer库中的<code>on</code>函数，该函数的作用是<strong>指挥NodeMCU来如何处理浏览器的http请求</strong>。我们看到<code>on</code>函数一共有两个参数，第一个参数是字符串”&#x2F;”，第二个参数是一个函数的名称handleRoot。这个handleRoot函数的具体内容，我后面会给您做详细讲解。现在请您留意<code>on</code>函数有两个参数，一个是字符串”&#x2F;”，另一个是函数名handleRoot。</p>\n<p>下面我来给您仔细解释一下参数”&#x2F;”的作用。我们知道一个网站有很多页面。为了加以区分，这些页面都有各自的名称。对于刚刚您在浏览器看到的“Hello from ESP8266”这个页面是NodeMCU服务器中的网站首页。这个网站首页的名称正是”&#x2F;”。目前的ESP8266-NodeMCU服务器中只有一页，因此我们还无法了解如果想要调用其他页面该如何操作。不过请别担心，这个操作我们会在下一个示例程序中为您讲解。</p>\n<p>好了，现在请将您的思绪拉回到我们的NodeMCU程序中来。接下来我们来看<code>on</code>函数的第二个参数。这个参数是<code>handleRoot</code>函数的名字。<code>handlRoot</code>函数的主要作用是告诉NodeMCU该如何生成和发送网站首页给浏览器。不过关于这个<code>handleRoot</code>函数的具体内容，我会在接下来的教程中给您做详细讲解。现在我们需要把关注点集中在<code>on</code>函数上。</p>\n<p>最后我们再来完整的看一下这条语句<code>esp8266_server.on(&quot;/&quot;, handleRoot)</code>。它的作用就是告诉NodeMCU，当有浏览器请求网站首页时，请执行handlRoot函数来生成网站首页内容然后发送给浏览器。</p>\n<p>讲到这里不知道您会不会感到好奇。我们只是在浏览器地址栏输入了NodeMCU的IP地址，然后就按下了回车。浏览器怎么会知道我们需要的是网站的首页呢。这是浏览器约定俗成的一种操作方法。当我们在地址栏只输入IP地址而没有任何附加地址信息，浏览器就会知道我们是要获取一个网站的首页信息。</p>\n<p>结束了<code>on</code>函数的讲解，我们来继续往下看。下面一条语句<code>esp8266_server.onNotFound(handleNotFound)</code>使用了<code>onNotFound</code>函数。它的作用是<strong>指挥NodeMCU在收到无法满足的http请求时应该如何处理</strong>。目前Hello from ESP8266网站只有一个页面。假如有人想要浏览网站的其它页面，NodeMCU是无法满足这一请求的。这时候我们可以让NodeMCU答复一个“错误提示”页面给提出请求的浏览器。<code>onNotFound</code>函数就是用来告诉NodeMCU如果出现无法满足的http请求时该如何进行处理。<code>onNotFound</code>函数有一个参数，这个参数的内容是函数<code>handleNotFound</code>的名字。  </p>\n<p>假设现在我们通过浏览器向NodeMCU服务器请求一个名叫“LED”的页面。由于NodeMCU的程序里没有“LED”页面信息，因此需要给浏览器答复一个“错误提示”页面。<code>onNotFound</code>的作用就是告诉NodeMCU在遇到这种无法满足的http请求时，应该执行<code>handleNotFound</code>函数来生成并发送“错误提示”页面给浏览器。</p>\n<p>为了验证这一功能，我们来做一个实验。请在浏览器中输入NodMCU的IP地址然后加一个“&#x2F;LED”再回车。比如下图所示，我的NodeMCU的IP地址是192.168.0.109，那么当我在浏览器栏中输入<code>192.168.0.109/LED</code>然后回车，就会看到浏览器显示出文字404: Not found。</p>\n<p>这里我们所看到的这行文字“404: Not found”正是因为NodeMCU没有名叫“LED”的页面，因此它会使用handleNotFound函数生成并发送给浏览器这个“错误提示”页面。既然讲到这里了，那么我们就来仔细看一看handleNotFound函数的具体内容。  </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">handleNotFound</span><span class=\"params\">()</span>&#123;                                </span><br><span class=\"line\">  esp8266_server.send(<span class=\"number\">404</span>, <span class=\"string\">&quot;text/plain&quot;</span>, <span class=\"string\">&quot;404: Not found&quot;</span>);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>handleNotFound函数只有一条语句： <code>esp8266_server.send(404, &quot;text/plain&quot;, &quot;404: Not found&quot;)</code>。这条语句调用了ESP8266WebServer库中的<code>send</code>函数。该函数的作用是生成并且发送http响应信息。也就是说，电脑浏览器所收到的网页信息都是通过<code>send</code>函数生成并且发送的。那么具体这个网页信息是如何生成的呢？这就要仔细看看<code>send</code>函数的几个参数内容了。  </p>\n<p>首先我们来看第一个参数404。这个数字对于很多朋友来说都不会感到陌生，在<a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/internet-basics/application-layer/#http-response\">互联网基础-应用层</a>的http响应部分对它做过介绍。404是一个服务器状态码。它的含义是“客户端的请求有错误”。也就是说，浏览器在收到了状态码404后就知道，它所请求的页面在服务器上是不存在的。请留意，这个服务器状态码是专门给浏览器用的。我们是看不到它的。为了让我们也看到页面不存在的出错信息，<code>send</code>函数的最后一个参数使用了一个字符串”404: Not found”。这个字符串的内容才是真正显示在浏览器中供我们阅读的内容。你可以任意的改变这个字符串的内容。  </p>\n<p>到这里我们来小结一下。浏览器能够看懂的信息是send函数的第一个参数,它的类型是整数型，它的内容是数字404。而显示在浏览器中的出错信息是一个字符串型的参数。它是send函数的最后一个参数。在我们的示例程序里，它的内容是“404: Not found”。</p>\n<p><code>send</code>函数还有一个字符串参数“text&#x2F;plain”。它的作用是<strong>说明http响应体的信息类型</strong>。在这段示例中，我们用“text&#x2F;plain”的原因是要告诉浏览器后面的”404: Not found”为一段纯文本信息。这里当然也可以使用其它类型的信息。不过这一知识我们后续教程中会给您介绍。</p>\n<p>为了让您更好的理解刚刚给您解释的内容，我来对这句<code>esp8266_server.send(404, &quot;text/plain&quot;, &quot;404: Not found&quot;)</code>做一下总结。</p>\n<p>send函数一共有3个参数。第一个参数404是服务器状态码。第二个参数“text&#x2F;plain”是说明http响应体信息类型。第三个参数“404: Not found”则是响应体的具体信息了。</p>\n<p>细心的读者可能已经发现了。我在上面这段总结文字中指明了响应体这一概念。http响应是分为两部分的。第一部分是响应头，在我们这个示例中，响应头的内容就是404 text&#x2F;plain。而响应体的内容则是404: Not found。</p>\n<p>结束了handleNotFound的讲解我们最后再来看看示例程序中另一个用于生成和发送首页信息的函数：<code>handleRoot</code>。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">handleRoot</span><span class=\"params\">()</span> &#123;                         </span><br><span class=\"line\">    esp8266_server.send(<span class=\"number\">200</span>, <span class=\"string\">&quot;text/plain&quot;</span>, <span class=\"string\">&quot;Hello from ESP8266&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段示例程序与刚刚我们见到的handleNotFound函数非常相似。都是使用<code>send</code>函数生成并且发送http响应信息。</p>\n<p><code>send</code>函数的第一个参数200，它同样是一个服务器状态码，含义是“成功接收请求，并已完成整个处理过程”。 第二个参数text&#x2F;plain的作用我刚刚给您讲过，不再赘述了。最后一个参数”Hello from ESP8266″正是我们在浏览器中看到的首页文字内容。</p>\n<p>最后我们来看一下这段示例程序的第3个重点内容，也就是loop函数中唯一的一条语句<code>esp8266_server.handleClient()</code>。这句程序调用了<code>handleClient</code>函数。它的主要作用之一是检查有没有设备通过网络向NodeMCU发送请求。<code>函数handleClient</code>每次被调用时，NodeMCU都会检查一下是否有人发送http请求。因此我们需要把它放在loop函数中，从而确保它能经常被调用。假如我们的loop函数里有类似delay一类的函数延迟程序运行，那么这时候就一定要注意了。如果<code>handleClient</code>函数长时间得不到调用，NodeMCU的网络服务会变得很不稳定。因此在使用NodeMCU执行网络服务功能的时候，一定要确保<code>handleClient</code>函数经常得以调用。我在这里反复强调这一点是因为这一点非常关键，请务必注意！</p>\n<p>这一节的程序内容到这里就讲解完毕了，下一节教程我将为您讲解如何建立可以控制NodeMCU开发板的网页。</p>\n<h1 id=\"通过网络服务实现NodeMCU开发板基本控制\"><a href=\"#通过网络服务实现NodeMCU开发板基本控制\" class=\"headerlink\" title=\"通过网络服务实现NodeMCU开发板基本控制\"></a><a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/esp8266-nodemcu-web-server/pin-control/\">通过网络服务实现NodeMCU开发板基本控制</a></h1><p>利用NodeMCU建立网络服务</p>\n<p>用户通过浏览器可以访问NodeMCU所建立的网页</p>\n<p>通过该网页，用户可实现对NodeMCU的控制。</p>\n<p>以下是示例代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**********************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">项目名称/Project          : 零基础入门学用物联网</span></span><br><span class=\"line\"><span class=\"comment\">程序名称/Program name     : 3_2_2_Turning_on_and_off_an_LED</span></span><br><span class=\"line\"><span class=\"comment\">团队/Team                : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)</span></span><br><span class=\"line\"><span class=\"comment\">程序目的/Purpose          : 使用NodeMCU建立基本服务器。用户可通过浏览器使用8266的IP地址</span></span><br><span class=\"line\"><span class=\"comment\">                           访问8266所建立的基本网页并通过该页面点亮/熄灭NodeMCU的内置LED</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">***********************************************************************/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ESP8266WiFi.h&gt;</span>        <span class=\"comment\">// 本程序使用 ESP8266WiFi库</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ESP8266WiFiMulti.h&gt;</span>   <span class=\"comment\">//  ESP8266WiFiMulti库</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ESP8266WebServer.h&gt;</span>   <span class=\"comment\">//  ESP8266WebServer库</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\">ESP8266WiFiMulti wifiMulti;     <span class=\"comment\">// 建立ESP8266WiFiMulti对象,对象名称是 &#x27;wifiMulti&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">ESP8266WebServer <span class=\"title function_\">esp8266_server</span><span class=\"params\">(<span class=\"number\">80</span>)</span>;<span class=\"comment\">// 建立网络服务器对象，该对象用于响应HTTP请求。监听端口（80）</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">setup</span><span class=\"params\">(<span class=\"type\">void</span>)</span>&#123;</span><br><span class=\"line\">  Serial.begin(<span class=\"number\">9600</span>);   <span class=\"comment\">// 启动串口通讯</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  pinMode(LED_BUILTIN, OUTPUT); <span class=\"comment\">//设置内置LED引脚为输出模式以便控制LED</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  wifiMulti.addAP(<span class=\"string\">&quot;ssid_from_AP_1&quot;</span>, <span class=\"string\">&quot;your_password_for_AP_1&quot;</span>); <span class=\"comment\">// 将需要连接的一系列WiFi ID和密码输入这里</span></span><br><span class=\"line\">  wifiMulti.addAP(<span class=\"string\">&quot;ssid_from_AP_2&quot;</span>, <span class=\"string\">&quot;your_password_for_AP_2&quot;</span>); <span class=\"comment\">// ESP8266-NodeMCU再启动后会扫描当前网络</span></span><br><span class=\"line\">  wifiMulti.addAP(<span class=\"string\">&quot;ssid_from_AP_3&quot;</span>, <span class=\"string\">&quot;your_password_for_AP_3&quot;</span>); <span class=\"comment\">// 环境查找是否有这里列出的WiFi ID。如果有</span></span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot;Connecting ...&quot;</span>);                            <span class=\"comment\">// 则尝试使用此处存储的密码进行连接。</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"type\">int</span> i = <span class=\"number\">0</span>;                                 </span><br><span class=\"line\">  <span class=\"keyword\">while</span> (wifiMulti.run() != WL_CONNECTED) &#123;  <span class=\"comment\">// 此处的wifiMulti.run()是重点。通过wifiMulti.run()，NodeMCU将会在当前</span></span><br><span class=\"line\">    delay(<span class=\"number\">1000</span>);                             <span class=\"comment\">// 环境中搜索addAP函数所存储的WiFi。如果搜到多个存储的WiFi那么NodeMCU</span></span><br><span class=\"line\">    Serial.print(i++); Serial.print(<span class=\"string\">&#x27; &#x27;</span>);    <span class=\"comment\">// 将会连接信号最强的那一个WiFi信号。</span></span><br><span class=\"line\">  &#125;                                          <span class=\"comment\">// 一旦连接WiFI成功，wifiMulti.run()将会返回“WL_CONNECTED”。这也是</span></span><br><span class=\"line\">                                             <span class=\"comment\">// 此处while循环判断是否跳出循环的条件。</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// WiFi连接成功后将通过串口监视器输出连接成功信息 </span></span><br><span class=\"line\">  Serial.println(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">  Serial.print(<span class=\"string\">&quot;Connected to &quot;</span>);</span><br><span class=\"line\">  Serial.println(WiFi.SSID());              <span class=\"comment\">// 通过串口监视器输出连接的WiFi名称</span></span><br><span class=\"line\">  Serial.print(<span class=\"string\">&quot;IP address:\\t&quot;</span>);</span><br><span class=\"line\">  Serial.println(WiFi.localIP());           <span class=\"comment\">// 通过串口监视器输出ESP8266-NodeMCU的IP</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  esp8266_server.begin();                           <span class=\"comment\">// 启动网站服务</span></span><br><span class=\"line\">  esp8266_server.on(<span class=\"string\">&quot;/&quot;</span>, HTTP_GET, handleRoot);     <span class=\"comment\">// 设置服务器根目录即&#x27;/&#x27;的函数&#x27;handleRoot&#x27;</span></span><br><span class=\"line\">  esp8266_server.on(<span class=\"string\">&quot;/LED&quot;</span>, HTTP_POST, handleLED);  <span class=\"comment\">// 设置处理LED控制请求的函数&#x27;handleLED&#x27;</span></span><br><span class=\"line\">  esp8266_server.onNotFound(handleNotFound);        <span class=\"comment\">// 设置处理404情况的函数&#x27;handleNotFound&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot;HTTP esp8266_server started&quot;</span>);<span class=\"comment\">//  告知用户ESP8266网络服务功能已经启动</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">loop</span><span class=\"params\">(<span class=\"type\">void</span>)</span>&#123;</span><br><span class=\"line\">  esp8266_server.handleClient();                     <span class=\"comment\">// 检查http服务器访问</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/*设置服务器根目录即&#x27;/&#x27;的函数&#x27;handleRoot&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">  该函数的作用是每当有客户端访问NodeMCU服务器根目录时，</span></span><br><span class=\"line\"><span class=\"comment\">  NodeMCU都会向访问设备发送 HTTP 状态 200 (Ok) 这是send函数的第一个参数。</span></span><br><span class=\"line\"><span class=\"comment\">  同时NodeMCU还会向浏览器发送HTML代码，以下示例中send函数中第三个参数，</span></span><br><span class=\"line\"><span class=\"comment\">  也就是双引号中的内容就是NodeMCU发送的HTML代码。该代码可在网页中产生LED控制按钮。 </span></span><br><span class=\"line\"><span class=\"comment\">  当用户按下按钮时，浏览器将会向NodeMCU的/LED页面发送HTTP请求，请求方式为POST。</span></span><br><span class=\"line\"><span class=\"comment\">  NodeMCU接收到此请求后将会执行handleLED函数内容*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">handleRoot</span><span class=\"params\">()</span> &#123;       </span><br><span class=\"line\">  esp8266_server.send(<span class=\"number\">200</span>, <span class=\"string\">&quot;text/html&quot;</span>, <span class=\"string\">&quot;&lt;form action=\\&quot;/LED\\&quot; method=\\&quot;POST\\&quot;&gt;&lt;input type=\\&quot;submit\\&quot; value=\\&quot;Toggle LED\\&quot;&gt;&lt;/form&gt;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//处理LED控制请求的函数&#x27;handleLED&#x27;</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">handleLED</span><span class=\"params\">()</span> &#123;                          </span><br><span class=\"line\">  digitalWrite(LED_BUILTIN,!digitalRead(LED_BUILTIN));<span class=\"comment\">// 改变LED的点亮或者熄灭状态</span></span><br><span class=\"line\">  esp8266_server.sendHeader(<span class=\"string\">&quot;Location&quot;</span>,<span class=\"string\">&quot;/&quot;</span>);          <span class=\"comment\">// 跳转回页面根目录</span></span><br><span class=\"line\">  esp8266_server.send(<span class=\"number\">303</span>);                           <span class=\"comment\">// 发送Http相应代码303 跳转  </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 设置处理404情况的函数&#x27;handleNotFound&#x27;</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">handleNotFound</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  esp8266_server.send(<span class=\"number\">404</span>, <span class=\"string\">&quot;text/plain&quot;</span>, <span class=\"string\">&quot;404: Not found&quot;</span>); <span class=\"comment\">// 发送 HTTP 状态 404 (未找到页面) 并向浏览器发送文字 &quot;404: Not found&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"通过网络服务将开发板引脚状态显示在网页中\"><a href=\"#通过网络服务将开发板引脚状态显示在网页中\" class=\"headerlink\" title=\"通过网络服务将开发板引脚状态显示在网页中\"></a><a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/esp8266-nodemcu-web-server/pin-state/\">通过网络服务将开发板引脚状态显示在网页中</a></h1><p>为了便于学习，我们将使用D3引脚作为演示, 因为它已经与开发板上的FLASH按键开关连接好了。<em>我们可以通过NodeMCU开发板上的FLASH按键控制D3引脚的电平。</em></p>\n<p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/backgrounds/esp8266-nodemcu-Flash-Button-1.jpg\" alt=\"NodeMCU开发板FLASH按键开关\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**********************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">项目名称/Project          : 零基础入门学用物联网</span></span><br><span class=\"line\"><span class=\"comment\">程序名称/Program name     : 3_2_3_Pin_State_Display</span></span><br><span class=\"line\"><span class=\"comment\">团队/Team                : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">程序目的/Purpose          : 使用NodeMCU建立基本服务器。该页面将会自动刷新并且显示NodeMCU</span></span><br><span class=\"line\"><span class=\"comment\">                           的D3引脚状态。NodeMCU开发板上的FLASH按键可以控制D3引脚的电平。</span></span><br><span class=\"line\"><span class=\"comment\">                           没有按下该按键时D3引脚将会保持高电平状态。当按下该按键后，</span></span><br><span class=\"line\"><span class=\"comment\">                           D3引脚会变为低电平。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">***********************************************************************/</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ESP8266WiFi.h&gt;</span>        <span class=\"comment\">// 本程序使用 ESP8266WiFi库</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ESP8266WiFiMulti.h&gt;</span>   <span class=\"comment\">//  ESP8266WiFiMulti库</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ESP8266WebServer.h&gt;</span>   <span class=\"comment\">//  ESP8266WebServer库</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> buttonPin D3            <span class=\"comment\">// 按钮引脚D3</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\">ESP8266WiFiMulti wifiMulti;     <span class=\"comment\">// 建立ESP8266WiFiMulti对象,对象名称是&#x27;wifiMulti&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">ESP8266WebServer <span class=\"title function_\">esp8266_server</span><span class=\"params\">(<span class=\"number\">80</span>)</span>;<span class=\"comment\">// 建立网络服务器对象，该对象用于响应HTTP请求。监听端口（80）</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">bool</span> pinState;  <span class=\"comment\">// 存储引脚状态用变量</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">setup</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  Serial.begin(<span class=\"number\">9600</span>);   <span class=\"comment\">// 启动串口通讯</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  pinMode(buttonPin, INPUT_PULLUP); <span class=\"comment\">// 将按键引脚设置为输入上拉模式</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  wifiMulti.addAP(<span class=\"string\">&quot;ssid_from_AP_1&quot;</span>, <span class=\"string\">&quot;your_password_for_AP_1&quot;</span>); <span class=\"comment\">// 将需要连接的一系列WiFi ID和密码输入这里</span></span><br><span class=\"line\">  wifiMulti.addAP(<span class=\"string\">&quot;ssid_from_AP_2&quot;</span>, <span class=\"string\">&quot;your_password_for_AP_2&quot;</span>); <span class=\"comment\">// ESP8266-NodeMCU再启动后会扫描当前网络</span></span><br><span class=\"line\">  wifiMulti.addAP(<span class=\"string\">&quot;ssid_from_AP_3&quot;</span>, <span class=\"string\">&quot;your_password_for_AP_3&quot;</span>); <span class=\"comment\">// 环境查找是否有这里列出的WiFi ID。如果有</span></span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot;Connecting ...&quot;</span>);                            <span class=\"comment\">// 则尝试使用此处存储的密码进行连接。</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"type\">int</span> i = <span class=\"number\">0</span>;                                 </span><br><span class=\"line\">  <span class=\"keyword\">while</span> (wifiMulti.run() != WL_CONNECTED) &#123;  <span class=\"comment\">// 此处的wifiMulti.run()是重点。通过wifiMulti.run()，NodeMCU将会在当前</span></span><br><span class=\"line\">    delay(<span class=\"number\">1000</span>);                             <span class=\"comment\">// 环境中搜索addAP函数所存储的WiFi。如果搜到多个存储的WiFi那么NodeMCU</span></span><br><span class=\"line\">    Serial.print(i++); Serial.print(<span class=\"string\">&#x27; &#x27;</span>);    <span class=\"comment\">// 将会连接信号最强的那一个WiFi信号。</span></span><br><span class=\"line\">  &#125;                                          <span class=\"comment\">// 一旦连接WiFI成功，wifiMulti.run()将会返回“WL_CONNECTED”。这也是</span></span><br><span class=\"line\">                                             <span class=\"comment\">// 此处while循环判断是否跳出循环的条件。</span></span><br><span class=\"line\">  <span class=\"comment\">// WiFi连接成功后将通过串口监视器输出连接成功信息 </span></span><br><span class=\"line\">  Serial.println(<span class=\"string\">&#x27;\\n&#x27;</span>);                     <span class=\"comment\">// WiFi连接成功后</span></span><br><span class=\"line\">  Serial.print(<span class=\"string\">&quot;Connected to &quot;</span>);            <span class=\"comment\">// NodeMCU将通过串口监视器输出。</span></span><br><span class=\"line\">  Serial.println(WiFi.SSID());              <span class=\"comment\">// 连接的WiFI名称</span></span><br><span class=\"line\">  Serial.print(<span class=\"string\">&quot;IP address:\\t&quot;</span>);            <span class=\"comment\">// 以及</span></span><br><span class=\"line\">  Serial.println(WiFi.localIP());           <span class=\"comment\">// NodeMCU的IP地址</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  esp8266_server.begin();                   <span class=\"comment\">// 启动网站服务                </span></span><br><span class=\"line\">  esp8266_server.on(<span class=\"string\">&quot;/&quot;</span>, handleRoot);       <span class=\"comment\">// 设置服务器根目录即&#x27;/&#x27;的函数&#x27;handleRoot&#x27;</span></span><br><span class=\"line\">  esp8266_server.onNotFound(handleNotFound);<span class=\"comment\">// 设置处理404情况的函数&#x27;handleNotFound&#x27;        </span></span><br><span class=\"line\"> </span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot;HTTP esp8266_server started&quot;</span>);<span class=\"comment\">//  告知用户ESP8266网络服务功能已经启动</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">loop</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  esp8266_server.handleClient();     <span class=\"comment\">// 处理http服务器访问</span></span><br><span class=\"line\">  pinState = digitalRead(buttonPin); <span class=\"comment\">// 获取引脚状态</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//--------------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">/* 以下函数处理网站首页的访问请求。此函数为本示例程序重点1</span></span><br><span class=\"line\"><span class=\"comment\">详细讲解请参见太极创客网站《零基础入门学用物联网》</span></span><br><span class=\"line\"><span class=\"comment\">第3章-第2节“通过网络服务将开发板引脚状态显示在网页中”的说明讲解。*/</span>                                                                       </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">handleRoot</span><span class=\"params\">()</span> &#123;   </span><br><span class=\"line\">  String displayPinState;                   <span class=\"comment\">// 存储按键状态的字符串变量</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(pinState == HIGH)&#123;                     <span class=\"comment\">// 当按键引脚D3为高电平</span></span><br><span class=\"line\">    displayPinState = <span class=\"string\">&quot;Button State: HIGH&quot;</span>; <span class=\"comment\">// 字符串赋值高电平信息</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;                                  <span class=\"comment\">// 当按键引脚D3为低电平</span></span><br><span class=\"line\">    displayPinState = <span class=\"string\">&quot;Button State: LOW&quot;</span>;  <span class=\"comment\">// 字符串赋值低电平信息</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  esp8266_server.send(<span class=\"number\">200</span>, <span class=\"string\">&quot;text/plain&quot;</span>, displayPinState); </span><br><span class=\"line\">                                            <span class=\"comment\">// 向浏览器发送按键状态信息  </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//--------------------------------------------------------------------------------</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 设置处理404情况的函数&#x27;handleNotFound&#x27;</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">handleNotFound</span><span class=\"params\">()</span>&#123;                                        <span class=\"comment\">// 当浏览器请求的网络资源无法在服务器找到时，</span></span><br><span class=\"line\">  esp8266_server.send(<span class=\"number\">404</span>, <span class=\"string\">&quot;text/plain&quot;</span>, <span class=\"string\">&quot;404: Not found&quot;</span>);   <span class=\"comment\">// NodeMCU将调用此函数。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在以上程序的loop函数中，<code>pinState = digitalRead(buttonPin);</code> 语句将不断检查NodeMCU开发板D3引脚状态，也就是检查该引脚所连接的按键是否被按下。该状态将会存储与布尔变量pinState中。</p>\n<p>变量pinState将会用于本程序的重点1，也就是handleRoot() 函数里。在handleRoot函数里，我们利用逻辑判断语句来对displayPinState 进行赋值。<strong>如果按键没有被按下</strong>，pinState为HIGH，这时候程序将会执行<code>displayPinState = &quot;Button State: HIGH&quot;;</code>也就是为displayPinState的赋值为“Button State: HIGH”。这句话的意思是“按键引脚状态为高电平”。反之，当我们按下按键后，程序将会执行<code>displayPinState = &quot;Button State: LOW&quot;;</code>也就是为displayPinState的赋值为“Button State: LOW”。</p>\n<p>在handleRoot函数的结尾处，<br><code>esp8266_server.send(200, &quot;text/plain&quot;, displayPinState);</code><br>这条语句将会把displayPinState所存储的信息发送给浏览器。于是我们在没有按下按键时，将会得到以下页面信息。</p>\n<h1 id=\"暂时没放图\"><a href=\"#暂时没放图\" class=\"headerlink\" title=\"暂时没放图\"></a><strong>暂时没放图</strong></h1><p>以上示例中，我们需要刷新网页页面才能将按键的最新状态显示在网页中。为了实现页面的自动刷新，请您参考以下示例程序。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**********************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">项目名称/Project          : 零基础入门学用物联网</span></span><br><span class=\"line\"><span class=\"comment\">程序名称/Program name     : 3_2_4_Pin_State_Display_Auto_Refresh</span></span><br><span class=\"line\"><span class=\"comment\">团队/Team                : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">程序目的/Purpose          : 使用NodeMCU建立基本服务器。该网页将显示引脚D3状态。同时状态会</span></span><br><span class=\"line\"><span class=\"comment\">                           每隔5秒钟更新一次。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">***********************************************************************/</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ESP8266WiFi.h&gt;</span>        <span class=\"comment\">// 本程序使用 ESP8266WiFi库</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ESP8266WiFiMulti.h&gt;</span>   <span class=\"comment\">//  ESP8266WiFiMulti库</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ESP8266WebServer.h&gt;</span>   <span class=\"comment\">//  ESP8266WebServer库</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> buttonPin D3            <span class=\"comment\">// 按钮引脚D3</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\">ESP8266WiFiMulti wifiMulti;     <span class=\"comment\">// 建立ESP8266WiFiMulti对象,对象名称是&#x27;wifiMulti&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">ESP8266WebServer <span class=\"title function_\">esp8266_server</span><span class=\"params\">(<span class=\"number\">80</span>)</span>;<span class=\"comment\">// 建立网络服务器对象，该对象用于响应HTTP请求。监听端口（80）</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">bool</span> pinState;                      <span class=\"comment\">// 存储引脚状态用变量</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">setup</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  Serial.begin(<span class=\"number\">9600</span>);          <span class=\"comment\">// 启动串口通讯</span></span><br><span class=\"line\">  delay(<span class=\"number\">10</span>);</span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">  pinMode(buttonPin, INPUT_PULLUP); <span class=\"comment\">// 将按键引脚设置为输入上拉模式</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  wifiMulti.addAP(<span class=\"string\">&quot;ssid_from_AP_1&quot;</span>, <span class=\"string\">&quot;your_password_for_AP_1&quot;</span>); <span class=\"comment\">// 将需要连接的一系列WiFi ID和密码输入这里</span></span><br><span class=\"line\">  wifiMulti.addAP(<span class=\"string\">&quot;ssid_from_AP_2&quot;</span>, <span class=\"string\">&quot;your_password_for_AP_2&quot;</span>); <span class=\"comment\">// ESP8266-NodeMCU在启动后会扫描当前网络</span></span><br><span class=\"line\">  wifiMulti.addAP(<span class=\"string\">&quot;ssid_from_AP_3&quot;</span>, <span class=\"string\">&quot;your_password_for_AP_3&quot;</span>); <span class=\"comment\">// 环境查找是否有这里列出的WiFi ID。如果有</span></span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot;Connecting ...&quot;</span>);                            <span class=\"comment\">// 则尝试使用此处存储的密码进行连接。</span></span><br><span class=\"line\">                                                               <span class=\"comment\">// 另外这里只存储了3个WiFi信息，您可以存储更多</span></span><br><span class=\"line\">                                                               <span class=\"comment\">// 的WiFi信息在此处。</span></span><br><span class=\"line\">  <span class=\"type\">int</span> i = <span class=\"number\">0</span>;                                 </span><br><span class=\"line\">  <span class=\"keyword\">while</span> (wifiMulti.run() != WL_CONNECTED) &#123;  <span class=\"comment\">// 此处的wifiMulti.run()是重点。通过wifiMulti.run()，NodeMCU将会在当前</span></span><br><span class=\"line\">    delay(<span class=\"number\">1000</span>);                             <span class=\"comment\">// 环境中搜索addAP函数所存储的WiFi。如果搜到多个存储的WiFi那么NodeMCU</span></span><br><span class=\"line\">    Serial.print(i++); Serial.print(<span class=\"string\">&#x27; &#x27;</span>);    <span class=\"comment\">// 将会连接信号最强的那一个WiFi信号。</span></span><br><span class=\"line\">  &#125;                                          <span class=\"comment\">// 一旦连接WiFI成功，wifiMulti.run()将会返回“WL_CONNECTED”。这也是</span></span><br><span class=\"line\">                                             <span class=\"comment\">// 此处while循环判断是否跳出循环的条件。</span></span><br><span class=\"line\">  <span class=\"comment\">// WiFi连接成功后将通过串口监视器输出连接成功信息 </span></span><br><span class=\"line\">  Serial.println(<span class=\"string\">&#x27;\\n&#x27;</span>);                     <span class=\"comment\">// WiFi连接成功后</span></span><br><span class=\"line\">  Serial.print(<span class=\"string\">&quot;Connected to &quot;</span>);            <span class=\"comment\">// NodeMCU将通过串口监视器输出。</span></span><br><span class=\"line\">  Serial.println(WiFi.SSID());              <span class=\"comment\">// 连接的WiFI名称</span></span><br><span class=\"line\">  Serial.print(<span class=\"string\">&quot;IP address:\\t&quot;</span>);            <span class=\"comment\">// 以及</span></span><br><span class=\"line\">  Serial.println(WiFi.localIP());           <span class=\"comment\">// NodeMCU的IP地址</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  esp8266_server.begin();                  </span><br><span class=\"line\">  esp8266_server.on(<span class=\"string\">&quot;/&quot;</span>, handleRoot);      </span><br><span class=\"line\">  esp8266_server.onNotFound(handleNotFound);        </span><br><span class=\"line\"> </span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot;HTTP esp8266_server started&quot;</span>);<span class=\"comment\">//  告知用户ESP8266网络服务功能已经启动</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">loop</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  esp8266_server.handleClient();     <span class=\"comment\">// 处理http服务器访问</span></span><br><span class=\"line\">  pinState = digitalRead(buttonPin); <span class=\"comment\">// 获取引脚状态</span></span><br><span class=\"line\">&#125;                                                                   </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/* 以下函数处理网站首页的访问请求。此函数为本示例程序重点1</span></span><br><span class=\"line\"><span class=\"comment\">详细讲解请参见太极创客网站《零基础入门学用物联网》</span></span><br><span class=\"line\"><span class=\"comment\">第3章-第2节“通过网络服务将开发板引脚状态显示在网页中”的说明讲解。*/</span>    </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">handleRoot</span><span class=\"params\">()</span> &#123;   <span class=\"comment\">//处理网站目录“/”的访问请求 </span></span><br><span class=\"line\">  esp8266_server.send(<span class=\"number\">200</span>, <span class=\"string\">&quot;text/html&quot;</span>, sendHTML(pinState));  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//--------------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">建立用于发送给客户端浏览器的HTML代码。此代码将会每隔5秒刷新页面。</span></span><br><span class=\"line\"><span class=\"comment\">通过页面刷新，引脚的最新状态也会显示于页面中</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">String <span class=\"title function_\">sendHTML</span><span class=\"params\">(<span class=\"type\">bool</span> buttonState)</span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  String htmlCode = <span class=\"string\">&quot;&lt;!DOCTYPE html&gt; &lt;html&gt;\\n&quot;</span>;</span><br><span class=\"line\">  htmlCode +=<span class=\"string\">&quot;&lt;head&gt;&lt;meta http-equiv=&#x27;refresh&#x27; content=&#x27;5&#x27;/&gt;\\n&quot;</span>;</span><br><span class=\"line\">  htmlCode +=<span class=\"string\">&quot;&lt;title&gt;ESP8266 Butoon State&lt;/title&gt;\\n&quot;</span>;</span><br><span class=\"line\">  htmlCode +=<span class=\"string\">&quot;&lt;style&gt;html &#123; font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;&#125;\\n&quot;</span>;</span><br><span class=\"line\">  htmlCode +=<span class=\"string\">&quot;body&#123;margin-top: 50px;&#125; h1 &#123;color: #444444;margin: 50px auto 30px;&#125; h3 &#123;color: #444444;margin-bottom: 50px;&#125;\\n&quot;</span>;</span><br><span class=\"line\">  htmlCode +=<span class=\"string\">&quot;&lt;/style&gt;\\n&quot;</span>;</span><br><span class=\"line\">  htmlCode +=<span class=\"string\">&quot;&lt;/head&gt;\\n&quot;</span>;</span><br><span class=\"line\">  htmlCode +=<span class=\"string\">&quot;&lt;body&gt;\\n&quot;</span>;</span><br><span class=\"line\">  htmlCode +=<span class=\"string\">&quot;&lt;h1&gt;ESP8266 BUTTON STATE&lt;/h1&gt;\\n&quot;</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(buttonState)</span><br><span class=\"line\">    &#123;htmlCode +=<span class=\"string\">&quot;&lt;p&gt;Button Status: HIGH&lt;/p&gt;\\n&quot;</span>;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;htmlCode +=<span class=\"string\">&quot;&lt;p&gt;Button Status: LOW&lt;/p&gt;\\n&quot;</span>;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  htmlCode +=<span class=\"string\">&quot;&lt;/body&gt;\\n&quot;</span>;</span><br><span class=\"line\">  htmlCode +=<span class=\"string\">&quot;&lt;/html&gt;\\n&quot;</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> htmlCode;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//--------------------------------------------------------------------------------</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 设置处理404情况的函数&#x27;handleNotFound&#x27;</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">handleNotFound</span><span class=\"params\">()</span>&#123;                                        <span class=\"comment\">// 当浏览器请求的网络资源无法在服务器找到时，</span></span><br><span class=\"line\">  esp8266_server.send(<span class=\"number\">404</span>, <span class=\"string\">&quot;text/plain&quot;</span>, <span class=\"string\">&quot;404: Not found&quot;</span>);   <span class=\"comment\">// NodeMCU将调用此函数。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在以上示例程序中的<code>handleRoot</code>函数中，<code>esp8266_server.send(200, &quot;text/html&quot;, sendHTML(pinState))</code>语句的的3个参数 <code>sendHTML(pinState)</code>调用了<code>sendHTML</code>函数。该函数的作用是建立一个可以定时刷新的HTML网页代码。通过定时刷新网页，开发板的引脚状态将会不断地在页面中进行更新。</p>\n<p>此HTML网页代码是由<code>sendHTML</code>函数产生的。该函数建立了一个字符串变量，该字符串变量所存储的信息正是网页HTML代码。值得注意的是，该HTML代码会不断地检查变量pinState状态，并且根据pinState的状态改变HTML代码的信息，从而实现在网页上显示引脚状态。</p>\n<p>此HTML代码中真正实现定时刷新网页功能的语句是代码中的第79行语句。这条语句是告诉网页需要定时刷新，刷新频率5秒钟，即每5秒钟刷新一次页面。您可以通过改变此行语句中的数值5来调整页面刷新频率。</p>\n<p>每一次页面刷新，浏览器都会向NodeMCU发送HTTP请求。NodeMCU在收到浏览器请求后，将会把最新的HTML代码信息返回给浏览器。浏览器收到最新的HTML代码后将会在页面中显示引脚的状态。<br>以下是没有按下按键时的页面显示信息。</p>\n<h1 id=\"暂时没放图-1\"><a href=\"#暂时没放图-1\" class=\"headerlink\" title=\"暂时没放图\"></a><strong>暂时没放图</strong></h1>","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"安装文, 档快速开始","link":"https://butterfly.js.org/posts/21cfbf15/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"Butterfly主题 帮助文档"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"建立基本网络服务器\"><a href=\"#建立基本网络服务器\" class=\"headerlink\" title=\"建立基本网络服务器\"></a><a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/esp8266-nodemcu-web-server/web-server/\">建立基本网络服务器</a></h1><p>网络服务是一个很宽泛的概念，我们在这里即将给您介绍的是网络服务中的网页服务功能。所谓<strong>网页服务</strong>就是专门用于网页浏览的服务。这个操作我相信所有看到这篇教程的朋友们都使用过，因为您现在正阅读的这篇教程就是通过网页服务传输到您面前的。</p>\n<p>为了能够应付来自全世界的朋友们大量访问，网站服务器是一台运算能力很强的计算机。假如这个网站只有您自己访问，那么ESP8266-NodeMCU就足够了。下面这个示例程序可以让ESP8266-NodeMCU实现最基本的网页服务功能。请先将这段示例程序复制并且上传NodeMCU。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**********************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">项目名称/Project          : 零基础入门学用物联网</span></span><br><span class=\"line\"><span class=\"comment\">程序名称/Program name     : 3_2_1_First_Web_Server</span></span><br><span class=\"line\"><span class=\"comment\">团队/Team                : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)</span></span><br><span class=\"line\"><span class=\"comment\">程序目的/Purpose          : 使用NodeMCU建立基本服务器。用户可通过浏览器使用8266的IP地址</span></span><br><span class=\"line\"><span class=\"comment\">                           访问8266所建立的基本网页（Hello from ESP8266）</span></span><br><span class=\"line\"><span class=\"comment\"> </span></span><br><span class=\"line\"><span class=\"comment\">***********************************************************************/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ESP8266WiFi.h&gt;</span>        <span class=\"comment\">// 本程序使用 ESP8266WiFi库</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ESP8266WiFiMulti.h&gt;</span>   <span class=\"comment\">//  ESP8266WiFiMulti库</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ESP8266WebServer.h&gt;</span>   <span class=\"comment\">//  ESP8266WebServer库</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\">ESP8266WiFiMulti wifiMulti;     <span class=\"comment\">// 建立ESP8266WiFiMulti对象,对象名称是&#x27;wifiMulti&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">ESP8266WebServer <span class=\"title function_\">esp8266_server</span><span class=\"params\">(<span class=\"number\">80</span>)</span>;<span class=\"comment\">// 建立ESP8266WebServer对象，对象名称为esp8266_server</span></span><br><span class=\"line\">                                    <span class=\"comment\">// 括号中的数字是网路服务器响应http请求的端口号</span></span><br><span class=\"line\">                                    <span class=\"comment\">// 网络服务器标准http端口号为80，因此这里使用80为端口号</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">setup</span><span class=\"params\">(<span class=\"type\">void</span>)</span>&#123;</span><br><span class=\"line\">  Serial.begin(<span class=\"number\">9600</span>);          <span class=\"comment\">// 启动串口通讯</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">//通过addAp函数存储  WiFi名称       WiFi密码</span></span><br><span class=\"line\">  wifiMulti.addAP(<span class=\"string\">&quot;taichi-maker&quot;</span>, <span class=\"string\">&quot;12345678&quot;</span>);  <span class=\"comment\">// 这三条语句通过调用函数addAP来记录3个不同的WiFi网络信息。</span></span><br><span class=\"line\">  wifiMulti.addAP(<span class=\"string\">&quot;taichi-maker2&quot;</span>, <span class=\"string\">&quot;87654321&quot;</span>); <span class=\"comment\">// 这3个WiFi网络名称分别是taichi-maker, taichi-maker2, taichi-maker3。</span></span><br><span class=\"line\">  wifiMulti.addAP(<span class=\"string\">&quot;taichi-maker3&quot;</span>, <span class=\"string\">&quot;13572468&quot;</span>); <span class=\"comment\">// 这3个网络的密码分别是123456789，87654321，13572468。</span></span><br><span class=\"line\">                                                <span class=\"comment\">// 此处WiFi信息只是示例，请在使用时将需要连接的WiFi信息填入相应位置。</span></span><br><span class=\"line\">                                                <span class=\"comment\">// 另外这里只存储了3个WiFi信息，您可以存储更多的WiFi信息在此处。</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"type\">int</span> i = <span class=\"number\">0</span>;                                 </span><br><span class=\"line\">  <span class=\"keyword\">while</span> (wifiMulti.run() != WL_CONNECTED) &#123;  <span class=\"comment\">// 此处的wifiMulti.run()是重点。通过wifiMulti.run()，NodeMCU将会在当前</span></span><br><span class=\"line\">    delay(<span class=\"number\">1000</span>);                             <span class=\"comment\">// 环境中搜索addAP函数所存储的WiFi。如果搜到多个存储的WiFi那么NodeMCU</span></span><br><span class=\"line\">    Serial.print(i++); Serial.print(<span class=\"string\">&#x27; &#x27;</span>);    <span class=\"comment\">// 将会连接信号最强的那一个WiFi信号。</span></span><br><span class=\"line\">  &#125;                                          <span class=\"comment\">// 一旦连接WiFI成功，wifiMulti.run()将会返回“WL_CONNECTED”。这也是</span></span><br><span class=\"line\">                                             <span class=\"comment\">// 此处while循环判断是否跳出循环的条件。</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// WiFi连接成功后将通过串口监视器输出连接成功信息 </span></span><br><span class=\"line\">  Serial.println(<span class=\"string\">&#x27;\\n&#x27;</span>);                     <span class=\"comment\">// WiFi连接成功后</span></span><br><span class=\"line\">  Serial.print(<span class=\"string\">&quot;Connected to &quot;</span>);            <span class=\"comment\">// NodeMCU将通过串口监视器输出。</span></span><br><span class=\"line\">  Serial.println(WiFi.SSID());              <span class=\"comment\">// 连接的WiFI名称</span></span><br><span class=\"line\">  Serial.print(<span class=\"string\">&quot;IP address:\\t&quot;</span>);            <span class=\"comment\">// 以及</span></span><br><span class=\"line\">  Serial.println(WiFi.localIP());           <span class=\"comment\">// NodeMCU的IP地址</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//--------&quot;启动网络服务功能&quot;程序部分开始-------- //  此部分为程序为本示例程序重点1</span></span><br><span class=\"line\">  esp8266_server.begin();                   <span class=\"comment\">//  详细讲解请参见太极创客网站《零基础入门学用物联网》</span></span><br><span class=\"line\">  esp8266_server.on(<span class=\"string\">&quot;/&quot;</span>, handleRoot);       <span class=\"comment\">//  第3章-第2节 ESP8266-NodeMCU网络服务器-1</span></span><br><span class=\"line\">  esp8266_server.onNotFound(handleNotFound);        </span><br><span class=\"line\"><span class=\"comment\">//--------&quot;启动网络服务功能&quot;程序部分结束--------</span></span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot;HTTP esp8266_server started&quot;</span>);<span class=\"comment\">//  告知用户ESP8266网络服务功能已经启动</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/* 以下函数语句为本示例程序重点3</span></span><br><span class=\"line\"><span class=\"comment\">详细讲解请参见太极创客网站《零基础入门学用物联网》</span></span><br><span class=\"line\"><span class=\"comment\">第3章-第2节 3_2_1_First_Web_Server 的说明讲解*/</span>  </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">loop</span><span class=\"params\">(<span class=\"type\">void</span>)</span>&#123;</span><br><span class=\"line\">  esp8266_server.handleClient();     <span class=\"comment\">// 处理http服务器访问</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/* 以下两个函数为本示例程序重点2</span></span><br><span class=\"line\"><span class=\"comment\">详细讲解请参见太极创客网站《零基础入门学用物联网》</span></span><br><span class=\"line\"><span class=\"comment\">第3章-第2节 3_2_1_First_Web_Server 的说明讲解*/</span>                                                                            </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">handleRoot</span><span class=\"params\">()</span> &#123;   <span class=\"comment\">//处理网站根目录“/”的访问请求 </span></span><br><span class=\"line\">  esp8266_server.send(<span class=\"number\">200</span>, <span class=\"string\">&quot;text/plain&quot;</span>, <span class=\"string\">&quot;Hello from ESP8266&quot;</span>);   <span class=\"comment\">// NodeMCU将调用此函数。 </span></span><br><span class=\"line\">&#125;\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//这个网站只有一个网页。且网页只有一行文字“Hello from ESP8266”。</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 设置处理404情况的函数&#x27;handleNotFound&#x27;</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">handleNotFound</span><span class=\"params\">()</span>&#123;                                        <span class=\"comment\">// 当浏览器请求的网络资源无法在服务器找到时，</span></span><br><span class=\"line\">  esp8266_server.send(<span class=\"number\">404</span>, <span class=\"string\">&quot;text/plain&quot;</span>, <span class=\"string\">&quot;404: Not found&quot;</span>);   <span class=\"comment\">// NodeMCU将调用此函数。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上传给NodeMCU，启动NodeMCU并且确保它已经成功连接WiFi, 打开浏览器，在地址栏中输入NodeMCU的IP地址并按下回车。</p>\n<p>假如将在浏览器中看到“Hello from ESP8266”(如下所示），那么恭喜您已经成功的让NodeMCU实现了网络服务功能，因为您所看到的这条文字信息正是来自于NodeMCU。换句话说，NodeMCU为您建立了一个超级迷你的小网站。</p>\n<p>首先讲解示例程序的第1个重点内容：<strong>”启动网络服务功能“程序部分</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">esp8266_server.begin();             </span><br><span class=\"line\">esp8266_server.on(<span class=\"string\">&quot;/&quot;</span>, handleRoot);      </span><br><span class=\"line\">esp8266_server.onNotFound(handleNotFound); </span><br></pre></td></tr></table></figure>\n\n<p>程序第一句<code>esp8266_server.begin()</code>使用了ESP8266WebServer库中的<code>begin</code>函数。这个函数的作用是让ESP8266-NodeMCU来启动网络服务功能。该函数无需任何参数。</p>\n<p>接下来的的语句<code>esp8266_server.on(&quot;/&quot;, handleRoot)</code>相对复杂一些。这条语句调用了ESP8266WebServer库中的<code>on</code>函数，该函数的作用是<strong>指挥NodeMCU来如何处理浏览器的http请求</strong>。我们看到<code>on</code>函数一共有两个参数，第一个参数是字符串”&#x2F;”，第二个参数是一个函数的名称handleRoot。这个handleRoot函数的具体内容，我后面会给您做详细讲解。现在请您留意<code>on</code>函数有两个参数，一个是字符串”&#x2F;”，另一个是函数名handleRoot。</p>\n<p>下面我来给您仔细解释一下参数”&#x2F;”的作用。我们知道一个网站有很多页面。为了加以区分，这些页面都有各自的名称。对于刚刚您在浏览器看到的“Hello from ESP8266”这个页面是NodeMCU服务器中的网站首页。这个网站首页的名称正是”&#x2F;”。目前的ESP8266-NodeMCU服务器中只有一页，因此我们还无法了解如果想要调用其他页面该如何操作。不过请别担心，这个操作我们会在下一个示例程序中为您讲解。</p>\n<p>好了，现在请将您的思绪拉回到我们的NodeMCU程序中来。接下来我们来看<code>on</code>函数的第二个参数。这个参数是<code>handleRoot</code>函数的名字。<code>handlRoot</code>函数的主要作用是告诉NodeMCU该如何生成和发送网站首页给浏览器。不过关于这个<code>handleRoot</code>函数的具体内容，我会在接下来的教程中给您做详细讲解。现在我们需要把关注点集中在<code>on</code>函数上。</p>\n<p>最后我们再来完整的看一下这条语句<code>esp8266_server.on(&quot;/&quot;, handleRoot)</code>。它的作用就是告诉NodeMCU，当有浏览器请求网站首页时，请执行handlRoot函数来生成网站首页内容然后发送给浏览器。</p>\n<p>讲到这里不知道您会不会感到好奇。我们只是在浏览器地址栏输入了NodeMCU的IP地址，然后就按下了回车。浏览器怎么会知道我们需要的是网站的首页呢。这是浏览器约定俗成的一种操作方法。当我们在地址栏只输入IP地址而没有任何附加地址信息，浏览器就会知道我们是要获取一个网站的首页信息。</p>\n<p>结束了<code>on</code>函数的讲解，我们来继续往下看。下面一条语句<code>esp8266_server.onNotFound(handleNotFound)</code>使用了<code>onNotFound</code>函数。它的作用是<strong>指挥NodeMCU在收到无法满足的http请求时应该如何处理</strong>。目前Hello from ESP8266网站只有一个页面。假如有人想要浏览网站的其它页面，NodeMCU是无法满足这一请求的。这时候我们可以让NodeMCU答复一个“错误提示”页面给提出请求的浏览器。<code>onNotFound</code>函数就是用来告诉NodeMCU如果出现无法满足的http请求时该如何进行处理。<code>onNotFound</code>函数有一个参数，这个参数的内容是函数<code>handleNotFound</code>的名字。  </p>\n<p>假设现在我们通过浏览器向NodeMCU服务器请求一个名叫“LED”的页面。由于NodeMCU的程序里没有“LED”页面信息，因此需要给浏览器答复一个“错误提示”页面。<code>onNotFound</code>的作用就是告诉NodeMCU在遇到这种无法满足的http请求时，应该执行<code>handleNotFound</code>函数来生成并发送“错误提示”页面给浏览器。</p>\n<p>为了验证这一功能，我们来做一个实验。请在浏览器中输入NodMCU的IP地址然后加一个“&#x2F;LED”再回车。比如下图所示，我的NodeMCU的IP地址是192.168.0.109，那么当我在浏览器栏中输入<code>192.168.0.109/LED</code>然后回车，就会看到浏览器显示出文字404: Not found。</p>\n<p>这里我们所看到的这行文字“404: Not found”正是因为NodeMCU没有名叫“LED”的页面，因此它会使用handleNotFound函数生成并发送给浏览器这个“错误提示”页面。既然讲到这里了，那么我们就来仔细看一看handleNotFound函数的具体内容。  </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">handleNotFound</span><span class=\"params\">()</span>&#123;                                </span><br><span class=\"line\">  esp8266_server.send(<span class=\"number\">404</span>, <span class=\"string\">&quot;text/plain&quot;</span>, <span class=\"string\">&quot;404: Not found&quot;</span>);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>handleNotFound函数只有一条语句： <code>esp8266_server.send(404, &quot;text/plain&quot;, &quot;404: Not found&quot;)</code>。这条语句调用了ESP8266WebServer库中的<code>send</code>函数。该函数的作用是生成并且发送http响应信息。也就是说，电脑浏览器所收到的网页信息都是通过<code>send</code>函数生成并且发送的。那么具体这个网页信息是如何生成的呢？这就要仔细看看<code>send</code>函数的几个参数内容了。  </p>\n<p>首先我们来看第一个参数404。这个数字对于很多朋友来说都不会感到陌生，在<a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/internet-basics/application-layer/#http-response\">互联网基础-应用层</a>的http响应部分对它做过介绍。404是一个服务器状态码。它的含义是“客户端的请求有错误”。也就是说，浏览器在收到了状态码404后就知道，它所请求的页面在服务器上是不存在的。请留意，这个服务器状态码是专门给浏览器用的。我们是看不到它的。为了让我们也看到页面不存在的出错信息，<code>send</code>函数的最后一个参数使用了一个字符串”404: Not found”。这个字符串的内容才是真正显示在浏览器中供我们阅读的内容。你可以任意的改变这个字符串的内容。  </p>\n<p>到这里我们来小结一下。浏览器能够看懂的信息是send函数的第一个参数,它的类型是整数型，它的内容是数字404。而显示在浏览器中的出错信息是一个字符串型的参数。它是send函数的最后一个参数。在我们的示例程序里，它的内容是“404: Not found”。</p>\n<p><code>send</code>函数还有一个字符串参数“text&#x2F;plain”。它的作用是<strong>说明http响应体的信息类型</strong>。在这段示例中，我们用“text&#x2F;plain”的原因是要告诉浏览器后面的”404: Not found”为一段纯文本信息。这里当然也可以使用其它类型的信息。不过这一知识我们后续教程中会给您介绍。</p>\n<p>为了让您更好的理解刚刚给您解释的内容，我来对这句<code>esp8266_server.send(404, &quot;text/plain&quot;, &quot;404: Not found&quot;)</code>做一下总结。</p>\n<p>send函数一共有3个参数。第一个参数404是服务器状态码。第二个参数“text&#x2F;plain”是说明http响应体信息类型。第三个参数“404: Not found”则是响应体的具体信息了。</p>\n<p>细心的读者可能已经发现了。我在上面这段总结文字中指明了响应体这一概念。http响应是分为两部分的。第一部分是响应头，在我们这个示例中，响应头的内容就是404 text&#x2F;plain。而响应体的内容则是404: Not found。</p>\n<p>结束了handleNotFound的讲解我们最后再来看看示例程序中另一个用于生成和发送首页信息的函数：<code>handleRoot</code>。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">handleRoot</span><span class=\"params\">()</span> &#123;                         </span><br><span class=\"line\">    esp8266_server.send(<span class=\"number\">200</span>, <span class=\"string\">&quot;text/plain&quot;</span>, <span class=\"string\">&quot;Hello from ESP8266&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段示例程序与刚刚我们见到的handleNotFound函数非常相似。都是使用<code>send</code>函数生成并且发送http响应信息。</p>\n<p><code>send</code>函数的第一个参数200，它同样是一个服务器状态码，含义是“成功接收请求，并已完成整个处理过程”。 第二个参数text&#x2F;plain的作用我刚刚给您讲过，不再赘述了。最后一个参数”Hello from ESP8266″正是我们在浏览器中看到的首页文字内容。</p>\n<p>最后我们来看一下这段示例程序的第3个重点内容，也就是loop函数中唯一的一条语句<code>esp8266_server.handleClient()</code>。这句程序调用了<code>handleClient</code>函数。它的主要作用之一是检查有没有设备通过网络向NodeMCU发送请求。<code>函数handleClient</code>每次被调用时，NodeMCU都会检查一下是否有人发送http请求。因此我们需要把它放在loop函数中，从而确保它能经常被调用。假如我们的loop函数里有类似delay一类的函数延迟程序运行，那么这时候就一定要注意了。如果<code>handleClient</code>函数长时间得不到调用，NodeMCU的网络服务会变得很不稳定。因此在使用NodeMCU执行网络服务功能的时候，一定要确保<code>handleClient</code>函数经常得以调用。我在这里反复强调这一点是因为这一点非常关键，请务必注意！</p>\n<p>这一节的程序内容到这里就讲解完毕了，下一节教程我将为您讲解如何建立可以控制NodeMCU开发板的网页。</p>\n<h1 id=\"通过网络服务实现NodeMCU开发板基本控制\"><a href=\"#通过网络服务实现NodeMCU开发板基本控制\" class=\"headerlink\" title=\"通过网络服务实现NodeMCU开发板基本控制\"></a><a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/esp8266-nodemcu-web-server/pin-control/\">通过网络服务实现NodeMCU开发板基本控制</a></h1><p>利用NodeMCU建立网络服务</p>\n<p>用户通过浏览器可以访问NodeMCU所建立的网页</p>\n<p>通过该网页，用户可实现对NodeMCU的控制。</p>\n<p>以下是示例代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**********************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">项目名称/Project          : 零基础入门学用物联网</span></span><br><span class=\"line\"><span class=\"comment\">程序名称/Program name     : 3_2_2_Turning_on_and_off_an_LED</span></span><br><span class=\"line\"><span class=\"comment\">团队/Team                : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)</span></span><br><span class=\"line\"><span class=\"comment\">程序目的/Purpose          : 使用NodeMCU建立基本服务器。用户可通过浏览器使用8266的IP地址</span></span><br><span class=\"line\"><span class=\"comment\">                           访问8266所建立的基本网页并通过该页面点亮/熄灭NodeMCU的内置LED</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">***********************************************************************/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ESP8266WiFi.h&gt;</span>        <span class=\"comment\">// 本程序使用 ESP8266WiFi库</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ESP8266WiFiMulti.h&gt;</span>   <span class=\"comment\">//  ESP8266WiFiMulti库</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ESP8266WebServer.h&gt;</span>   <span class=\"comment\">//  ESP8266WebServer库</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\">ESP8266WiFiMulti wifiMulti;     <span class=\"comment\">// 建立ESP8266WiFiMulti对象,对象名称是 &#x27;wifiMulti&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">ESP8266WebServer <span class=\"title function_\">esp8266_server</span><span class=\"params\">(<span class=\"number\">80</span>)</span>;<span class=\"comment\">// 建立网络服务器对象，该对象用于响应HTTP请求。监听端口（80）</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">setup</span><span class=\"params\">(<span class=\"type\">void</span>)</span>&#123;</span><br><span class=\"line\">  Serial.begin(<span class=\"number\">9600</span>);   <span class=\"comment\">// 启动串口通讯</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  pinMode(LED_BUILTIN, OUTPUT); <span class=\"comment\">//设置内置LED引脚为输出模式以便控制LED</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  wifiMulti.addAP(<span class=\"string\">&quot;ssid_from_AP_1&quot;</span>, <span class=\"string\">&quot;your_password_for_AP_1&quot;</span>); <span class=\"comment\">// 将需要连接的一系列WiFi ID和密码输入这里</span></span><br><span class=\"line\">  wifiMulti.addAP(<span class=\"string\">&quot;ssid_from_AP_2&quot;</span>, <span class=\"string\">&quot;your_password_for_AP_2&quot;</span>); <span class=\"comment\">// ESP8266-NodeMCU再启动后会扫描当前网络</span></span><br><span class=\"line\">  wifiMulti.addAP(<span class=\"string\">&quot;ssid_from_AP_3&quot;</span>, <span class=\"string\">&quot;your_password_for_AP_3&quot;</span>); <span class=\"comment\">// 环境查找是否有这里列出的WiFi ID。如果有</span></span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot;Connecting ...&quot;</span>);                            <span class=\"comment\">// 则尝试使用此处存储的密码进行连接。</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"type\">int</span> i = <span class=\"number\">0</span>;                                 </span><br><span class=\"line\">  <span class=\"keyword\">while</span> (wifiMulti.run() != WL_CONNECTED) &#123;  <span class=\"comment\">// 此处的wifiMulti.run()是重点。通过wifiMulti.run()，NodeMCU将会在当前</span></span><br><span class=\"line\">    delay(<span class=\"number\">1000</span>);                             <span class=\"comment\">// 环境中搜索addAP函数所存储的WiFi。如果搜到多个存储的WiFi那么NodeMCU</span></span><br><span class=\"line\">    Serial.print(i++); Serial.print(<span class=\"string\">&#x27; &#x27;</span>);    <span class=\"comment\">// 将会连接信号最强的那一个WiFi信号。</span></span><br><span class=\"line\">  &#125;                                          <span class=\"comment\">// 一旦连接WiFI成功，wifiMulti.run()将会返回“WL_CONNECTED”。这也是</span></span><br><span class=\"line\">                                             <span class=\"comment\">// 此处while循环判断是否跳出循环的条件。</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// WiFi连接成功后将通过串口监视器输出连接成功信息 </span></span><br><span class=\"line\">  Serial.println(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">  Serial.print(<span class=\"string\">&quot;Connected to &quot;</span>);</span><br><span class=\"line\">  Serial.println(WiFi.SSID());              <span class=\"comment\">// 通过串口监视器输出连接的WiFi名称</span></span><br><span class=\"line\">  Serial.print(<span class=\"string\">&quot;IP address:\\t&quot;</span>);</span><br><span class=\"line\">  Serial.println(WiFi.localIP());           <span class=\"comment\">// 通过串口监视器输出ESP8266-NodeMCU的IP</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  esp8266_server.begin();                           <span class=\"comment\">// 启动网站服务</span></span><br><span class=\"line\">  esp8266_server.on(<span class=\"string\">&quot;/&quot;</span>, HTTP_GET, handleRoot);     <span class=\"comment\">// 设置服务器根目录即&#x27;/&#x27;的函数&#x27;handleRoot&#x27;</span></span><br><span class=\"line\">  esp8266_server.on(<span class=\"string\">&quot;/LED&quot;</span>, HTTP_POST, handleLED);  <span class=\"comment\">// 设置处理LED控制请求的函数&#x27;handleLED&#x27;</span></span><br><span class=\"line\">  esp8266_server.onNotFound(handleNotFound);        <span class=\"comment\">// 设置处理404情况的函数&#x27;handleNotFound&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot;HTTP esp8266_server started&quot;</span>);<span class=\"comment\">//  告知用户ESP8266网络服务功能已经启动</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">loop</span><span class=\"params\">(<span class=\"type\">void</span>)</span>&#123;</span><br><span class=\"line\">  esp8266_server.handleClient();                     <span class=\"comment\">// 检查http服务器访问</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/*设置服务器根目录即&#x27;/&#x27;的函数&#x27;handleRoot&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">  该函数的作用是每当有客户端访问NodeMCU服务器根目录时，</span></span><br><span class=\"line\"><span class=\"comment\">  NodeMCU都会向访问设备发送 HTTP 状态 200 (Ok) 这是send函数的第一个参数。</span></span><br><span class=\"line\"><span class=\"comment\">  同时NodeMCU还会向浏览器发送HTML代码，以下示例中send函数中第三个参数，</span></span><br><span class=\"line\"><span class=\"comment\">  也就是双引号中的内容就是NodeMCU发送的HTML代码。该代码可在网页中产生LED控制按钮。 </span></span><br><span class=\"line\"><span class=\"comment\">  当用户按下按钮时，浏览器将会向NodeMCU的/LED页面发送HTTP请求，请求方式为POST。</span></span><br><span class=\"line\"><span class=\"comment\">  NodeMCU接收到此请求后将会执行handleLED函数内容*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">handleRoot</span><span class=\"params\">()</span> &#123;       </span><br><span class=\"line\">  esp8266_server.send(<span class=\"number\">200</span>, <span class=\"string\">&quot;text/html&quot;</span>, <span class=\"string\">&quot;&lt;form action=\\&quot;/LED\\&quot; method=\\&quot;POST\\&quot;&gt;&lt;input type=\\&quot;submit\\&quot; value=\\&quot;Toggle LED\\&quot;&gt;&lt;/form&gt;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//处理LED控制请求的函数&#x27;handleLED&#x27;</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">handleLED</span><span class=\"params\">()</span> &#123;                          </span><br><span class=\"line\">  digitalWrite(LED_BUILTIN,!digitalRead(LED_BUILTIN));<span class=\"comment\">// 改变LED的点亮或者熄灭状态</span></span><br><span class=\"line\">  esp8266_server.sendHeader(<span class=\"string\">&quot;Location&quot;</span>,<span class=\"string\">&quot;/&quot;</span>);          <span class=\"comment\">// 跳转回页面根目录</span></span><br><span class=\"line\">  esp8266_server.send(<span class=\"number\">303</span>);                           <span class=\"comment\">// 发送Http相应代码303 跳转  </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 设置处理404情况的函数&#x27;handleNotFound&#x27;</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">handleNotFound</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  esp8266_server.send(<span class=\"number\">404</span>, <span class=\"string\">&quot;text/plain&quot;</span>, <span class=\"string\">&quot;404: Not found&quot;</span>); <span class=\"comment\">// 发送 HTTP 状态 404 (未找到页面) 并向浏览器发送文字 &quot;404: Not found&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"通过网络服务将开发板引脚状态显示在网页中\"><a href=\"#通过网络服务将开发板引脚状态显示在网页中\" class=\"headerlink\" title=\"通过网络服务将开发板引脚状态显示在网页中\"></a><a href=\"http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/esp8266-nodemcu-web-server/pin-state/\">通过网络服务将开发板引脚状态显示在网页中</a></h1><p>为了便于学习，我们将使用D3引脚作为演示, 因为它已经与开发板上的FLASH按键开关连接好了。<em>我们可以通过NodeMCU开发板上的FLASH按键控制D3引脚的电平。</em></p>\n<p><img src=\"https://raw.githubusercontent.com/wild-civil/typora_img/main/backgrounds/esp8266-nodemcu-Flash-Button-1.jpg\" alt=\"NodeMCU开发板FLASH按键开关\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**********************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">项目名称/Project          : 零基础入门学用物联网</span></span><br><span class=\"line\"><span class=\"comment\">程序名称/Program name     : 3_2_3_Pin_State_Display</span></span><br><span class=\"line\"><span class=\"comment\">团队/Team                : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">程序目的/Purpose          : 使用NodeMCU建立基本服务器。该页面将会自动刷新并且显示NodeMCU</span></span><br><span class=\"line\"><span class=\"comment\">                           的D3引脚状态。NodeMCU开发板上的FLASH按键可以控制D3引脚的电平。</span></span><br><span class=\"line\"><span class=\"comment\">                           没有按下该按键时D3引脚将会保持高电平状态。当按下该按键后，</span></span><br><span class=\"line\"><span class=\"comment\">                           D3引脚会变为低电平。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">***********************************************************************/</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ESP8266WiFi.h&gt;</span>        <span class=\"comment\">// 本程序使用 ESP8266WiFi库</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ESP8266WiFiMulti.h&gt;</span>   <span class=\"comment\">//  ESP8266WiFiMulti库</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ESP8266WebServer.h&gt;</span>   <span class=\"comment\">//  ESP8266WebServer库</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> buttonPin D3            <span class=\"comment\">// 按钮引脚D3</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\">ESP8266WiFiMulti wifiMulti;     <span class=\"comment\">// 建立ESP8266WiFiMulti对象,对象名称是&#x27;wifiMulti&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">ESP8266WebServer <span class=\"title function_\">esp8266_server</span><span class=\"params\">(<span class=\"number\">80</span>)</span>;<span class=\"comment\">// 建立网络服务器对象，该对象用于响应HTTP请求。监听端口（80）</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">bool</span> pinState;  <span class=\"comment\">// 存储引脚状态用变量</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">setup</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  Serial.begin(<span class=\"number\">9600</span>);   <span class=\"comment\">// 启动串口通讯</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  pinMode(buttonPin, INPUT_PULLUP); <span class=\"comment\">// 将按键引脚设置为输入上拉模式</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  wifiMulti.addAP(<span class=\"string\">&quot;ssid_from_AP_1&quot;</span>, <span class=\"string\">&quot;your_password_for_AP_1&quot;</span>); <span class=\"comment\">// 将需要连接的一系列WiFi ID和密码输入这里</span></span><br><span class=\"line\">  wifiMulti.addAP(<span class=\"string\">&quot;ssid_from_AP_2&quot;</span>, <span class=\"string\">&quot;your_password_for_AP_2&quot;</span>); <span class=\"comment\">// ESP8266-NodeMCU再启动后会扫描当前网络</span></span><br><span class=\"line\">  wifiMulti.addAP(<span class=\"string\">&quot;ssid_from_AP_3&quot;</span>, <span class=\"string\">&quot;your_password_for_AP_3&quot;</span>); <span class=\"comment\">// 环境查找是否有这里列出的WiFi ID。如果有</span></span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot;Connecting ...&quot;</span>);                            <span class=\"comment\">// 则尝试使用此处存储的密码进行连接。</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"type\">int</span> i = <span class=\"number\">0</span>;                                 </span><br><span class=\"line\">  <span class=\"keyword\">while</span> (wifiMulti.run() != WL_CONNECTED) &#123;  <span class=\"comment\">// 此处的wifiMulti.run()是重点。通过wifiMulti.run()，NodeMCU将会在当前</span></span><br><span class=\"line\">    delay(<span class=\"number\">1000</span>);                             <span class=\"comment\">// 环境中搜索addAP函数所存储的WiFi。如果搜到多个存储的WiFi那么NodeMCU</span></span><br><span class=\"line\">    Serial.print(i++); Serial.print(<span class=\"string\">&#x27; &#x27;</span>);    <span class=\"comment\">// 将会连接信号最强的那一个WiFi信号。</span></span><br><span class=\"line\">  &#125;                                          <span class=\"comment\">// 一旦连接WiFI成功，wifiMulti.run()将会返回“WL_CONNECTED”。这也是</span></span><br><span class=\"line\">                                             <span class=\"comment\">// 此处while循环判断是否跳出循环的条件。</span></span><br><span class=\"line\">  <span class=\"comment\">// WiFi连接成功后将通过串口监视器输出连接成功信息 </span></span><br><span class=\"line\">  Serial.println(<span class=\"string\">&#x27;\\n&#x27;</span>);                     <span class=\"comment\">// WiFi连接成功后</span></span><br><span class=\"line\">  Serial.print(<span class=\"string\">&quot;Connected to &quot;</span>);            <span class=\"comment\">// NodeMCU将通过串口监视器输出。</span></span><br><span class=\"line\">  Serial.println(WiFi.SSID());              <span class=\"comment\">// 连接的WiFI名称</span></span><br><span class=\"line\">  Serial.print(<span class=\"string\">&quot;IP address:\\t&quot;</span>);            <span class=\"comment\">// 以及</span></span><br><span class=\"line\">  Serial.println(WiFi.localIP());           <span class=\"comment\">// NodeMCU的IP地址</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  esp8266_server.begin();                   <span class=\"comment\">// 启动网站服务                </span></span><br><span class=\"line\">  esp8266_server.on(<span class=\"string\">&quot;/&quot;</span>, handleRoot);       <span class=\"comment\">// 设置服务器根目录即&#x27;/&#x27;的函数&#x27;handleRoot&#x27;</span></span><br><span class=\"line\">  esp8266_server.onNotFound(handleNotFound);<span class=\"comment\">// 设置处理404情况的函数&#x27;handleNotFound&#x27;        </span></span><br><span class=\"line\"> </span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot;HTTP esp8266_server started&quot;</span>);<span class=\"comment\">//  告知用户ESP8266网络服务功能已经启动</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">loop</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  esp8266_server.handleClient();     <span class=\"comment\">// 处理http服务器访问</span></span><br><span class=\"line\">  pinState = digitalRead(buttonPin); <span class=\"comment\">// 获取引脚状态</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//--------------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">/* 以下函数处理网站首页的访问请求。此函数为本示例程序重点1</span></span><br><span class=\"line\"><span class=\"comment\">详细讲解请参见太极创客网站《零基础入门学用物联网》</span></span><br><span class=\"line\"><span class=\"comment\">第3章-第2节“通过网络服务将开发板引脚状态显示在网页中”的说明讲解。*/</span>                                                                       </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">handleRoot</span><span class=\"params\">()</span> &#123;   </span><br><span class=\"line\">  String displayPinState;                   <span class=\"comment\">// 存储按键状态的字符串变量</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(pinState == HIGH)&#123;                     <span class=\"comment\">// 当按键引脚D3为高电平</span></span><br><span class=\"line\">    displayPinState = <span class=\"string\">&quot;Button State: HIGH&quot;</span>; <span class=\"comment\">// 字符串赋值高电平信息</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;                                  <span class=\"comment\">// 当按键引脚D3为低电平</span></span><br><span class=\"line\">    displayPinState = <span class=\"string\">&quot;Button State: LOW&quot;</span>;  <span class=\"comment\">// 字符串赋值低电平信息</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  esp8266_server.send(<span class=\"number\">200</span>, <span class=\"string\">&quot;text/plain&quot;</span>, displayPinState); </span><br><span class=\"line\">                                            <span class=\"comment\">// 向浏览器发送按键状态信息  </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//--------------------------------------------------------------------------------</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 设置处理404情况的函数&#x27;handleNotFound&#x27;</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">handleNotFound</span><span class=\"params\">()</span>&#123;                                        <span class=\"comment\">// 当浏览器请求的网络资源无法在服务器找到时，</span></span><br><span class=\"line\">  esp8266_server.send(<span class=\"number\">404</span>, <span class=\"string\">&quot;text/plain&quot;</span>, <span class=\"string\">&quot;404: Not found&quot;</span>);   <span class=\"comment\">// NodeMCU将调用此函数。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在以上程序的loop函数中，<code>pinState = digitalRead(buttonPin);</code> 语句将不断检查NodeMCU开发板D3引脚状态，也就是检查该引脚所连接的按键是否被按下。该状态将会存储与布尔变量pinState中。</p>\n<p>变量pinState将会用于本程序的重点1，也就是handleRoot() 函数里。在handleRoot函数里，我们利用逻辑判断语句来对displayPinState 进行赋值。<strong>如果按键没有被按下</strong>，pinState为HIGH，这时候程序将会执行<code>displayPinState = &quot;Button State: HIGH&quot;;</code>也就是为displayPinState的赋值为“Button State: HIGH”。这句话的意思是“按键引脚状态为高电平”。反之，当我们按下按键后，程序将会执行<code>displayPinState = &quot;Button State: LOW&quot;;</code>也就是为displayPinState的赋值为“Button State: LOW”。</p>\n<p>在handleRoot函数的结尾处，<br><code>esp8266_server.send(200, &quot;text/plain&quot;, displayPinState);</code><br>这条语句将会把displayPinState所存储的信息发送给浏览器。于是我们在没有按下按键时，将会得到以下页面信息。</p>\n<h1 id=\"暂时没放图\"><a href=\"#暂时没放图\" class=\"headerlink\" title=\"暂时没放图\"></a><strong>暂时没放图</strong></h1><p>以上示例中，我们需要刷新网页页面才能将按键的最新状态显示在网页中。为了实现页面的自动刷新，请您参考以下示例程序。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**********************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">项目名称/Project          : 零基础入门学用物联网</span></span><br><span class=\"line\"><span class=\"comment\">程序名称/Program name     : 3_2_4_Pin_State_Display_Auto_Refresh</span></span><br><span class=\"line\"><span class=\"comment\">团队/Team                : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">程序目的/Purpose          : 使用NodeMCU建立基本服务器。该网页将显示引脚D3状态。同时状态会</span></span><br><span class=\"line\"><span class=\"comment\">                           每隔5秒钟更新一次。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">***********************************************************************/</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ESP8266WiFi.h&gt;</span>        <span class=\"comment\">// 本程序使用 ESP8266WiFi库</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ESP8266WiFiMulti.h&gt;</span>   <span class=\"comment\">//  ESP8266WiFiMulti库</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ESP8266WebServer.h&gt;</span>   <span class=\"comment\">//  ESP8266WebServer库</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> buttonPin D3            <span class=\"comment\">// 按钮引脚D3</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\">ESP8266WiFiMulti wifiMulti;     <span class=\"comment\">// 建立ESP8266WiFiMulti对象,对象名称是&#x27;wifiMulti&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">ESP8266WebServer <span class=\"title function_\">esp8266_server</span><span class=\"params\">(<span class=\"number\">80</span>)</span>;<span class=\"comment\">// 建立网络服务器对象，该对象用于响应HTTP请求。监听端口（80）</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">bool</span> pinState;                      <span class=\"comment\">// 存储引脚状态用变量</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">setup</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  Serial.begin(<span class=\"number\">9600</span>);          <span class=\"comment\">// 启动串口通讯</span></span><br><span class=\"line\">  delay(<span class=\"number\">10</span>);</span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">  pinMode(buttonPin, INPUT_PULLUP); <span class=\"comment\">// 将按键引脚设置为输入上拉模式</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  wifiMulti.addAP(<span class=\"string\">&quot;ssid_from_AP_1&quot;</span>, <span class=\"string\">&quot;your_password_for_AP_1&quot;</span>); <span class=\"comment\">// 将需要连接的一系列WiFi ID和密码输入这里</span></span><br><span class=\"line\">  wifiMulti.addAP(<span class=\"string\">&quot;ssid_from_AP_2&quot;</span>, <span class=\"string\">&quot;your_password_for_AP_2&quot;</span>); <span class=\"comment\">// ESP8266-NodeMCU在启动后会扫描当前网络</span></span><br><span class=\"line\">  wifiMulti.addAP(<span class=\"string\">&quot;ssid_from_AP_3&quot;</span>, <span class=\"string\">&quot;your_password_for_AP_3&quot;</span>); <span class=\"comment\">// 环境查找是否有这里列出的WiFi ID。如果有</span></span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot;Connecting ...&quot;</span>);                            <span class=\"comment\">// 则尝试使用此处存储的密码进行连接。</span></span><br><span class=\"line\">                                                               <span class=\"comment\">// 另外这里只存储了3个WiFi信息，您可以存储更多</span></span><br><span class=\"line\">                                                               <span class=\"comment\">// 的WiFi信息在此处。</span></span><br><span class=\"line\">  <span class=\"type\">int</span> i = <span class=\"number\">0</span>;                                 </span><br><span class=\"line\">  <span class=\"keyword\">while</span> (wifiMulti.run() != WL_CONNECTED) &#123;  <span class=\"comment\">// 此处的wifiMulti.run()是重点。通过wifiMulti.run()，NodeMCU将会在当前</span></span><br><span class=\"line\">    delay(<span class=\"number\">1000</span>);                             <span class=\"comment\">// 环境中搜索addAP函数所存储的WiFi。如果搜到多个存储的WiFi那么NodeMCU</span></span><br><span class=\"line\">    Serial.print(i++); Serial.print(<span class=\"string\">&#x27; &#x27;</span>);    <span class=\"comment\">// 将会连接信号最强的那一个WiFi信号。</span></span><br><span class=\"line\">  &#125;                                          <span class=\"comment\">// 一旦连接WiFI成功，wifiMulti.run()将会返回“WL_CONNECTED”。这也是</span></span><br><span class=\"line\">                                             <span class=\"comment\">// 此处while循环判断是否跳出循环的条件。</span></span><br><span class=\"line\">  <span class=\"comment\">// WiFi连接成功后将通过串口监视器输出连接成功信息 </span></span><br><span class=\"line\">  Serial.println(<span class=\"string\">&#x27;\\n&#x27;</span>);                     <span class=\"comment\">// WiFi连接成功后</span></span><br><span class=\"line\">  Serial.print(<span class=\"string\">&quot;Connected to &quot;</span>);            <span class=\"comment\">// NodeMCU将通过串口监视器输出。</span></span><br><span class=\"line\">  Serial.println(WiFi.SSID());              <span class=\"comment\">// 连接的WiFI名称</span></span><br><span class=\"line\">  Serial.print(<span class=\"string\">&quot;IP address:\\t&quot;</span>);            <span class=\"comment\">// 以及</span></span><br><span class=\"line\">  Serial.println(WiFi.localIP());           <span class=\"comment\">// NodeMCU的IP地址</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  esp8266_server.begin();                  </span><br><span class=\"line\">  esp8266_server.on(<span class=\"string\">&quot;/&quot;</span>, handleRoot);      </span><br><span class=\"line\">  esp8266_server.onNotFound(handleNotFound);        </span><br><span class=\"line\"> </span><br><span class=\"line\">  Serial.println(<span class=\"string\">&quot;HTTP esp8266_server started&quot;</span>);<span class=\"comment\">//  告知用户ESP8266网络服务功能已经启动</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">loop</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  esp8266_server.handleClient();     <span class=\"comment\">// 处理http服务器访问</span></span><br><span class=\"line\">  pinState = digitalRead(buttonPin); <span class=\"comment\">// 获取引脚状态</span></span><br><span class=\"line\">&#125;                                                                   </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/* 以下函数处理网站首页的访问请求。此函数为本示例程序重点1</span></span><br><span class=\"line\"><span class=\"comment\">详细讲解请参见太极创客网站《零基础入门学用物联网》</span></span><br><span class=\"line\"><span class=\"comment\">第3章-第2节“通过网络服务将开发板引脚状态显示在网页中”的说明讲解。*/</span>    </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">handleRoot</span><span class=\"params\">()</span> &#123;   <span class=\"comment\">//处理网站目录“/”的访问请求 </span></span><br><span class=\"line\">  esp8266_server.send(<span class=\"number\">200</span>, <span class=\"string\">&quot;text/html&quot;</span>, sendHTML(pinState));  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//--------------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">建立用于发送给客户端浏览器的HTML代码。此代码将会每隔5秒刷新页面。</span></span><br><span class=\"line\"><span class=\"comment\">通过页面刷新，引脚的最新状态也会显示于页面中</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">String <span class=\"title function_\">sendHTML</span><span class=\"params\">(<span class=\"type\">bool</span> buttonState)</span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  String htmlCode = <span class=\"string\">&quot;&lt;!DOCTYPE html&gt; &lt;html&gt;\\n&quot;</span>;</span><br><span class=\"line\">  htmlCode +=<span class=\"string\">&quot;&lt;head&gt;&lt;meta http-equiv=&#x27;refresh&#x27; content=&#x27;5&#x27;/&gt;\\n&quot;</span>;</span><br><span class=\"line\">  htmlCode +=<span class=\"string\">&quot;&lt;title&gt;ESP8266 Butoon State&lt;/title&gt;\\n&quot;</span>;</span><br><span class=\"line\">  htmlCode +=<span class=\"string\">&quot;&lt;style&gt;html &#123; font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;&#125;\\n&quot;</span>;</span><br><span class=\"line\">  htmlCode +=<span class=\"string\">&quot;body&#123;margin-top: 50px;&#125; h1 &#123;color: #444444;margin: 50px auto 30px;&#125; h3 &#123;color: #444444;margin-bottom: 50px;&#125;\\n&quot;</span>;</span><br><span class=\"line\">  htmlCode +=<span class=\"string\">&quot;&lt;/style&gt;\\n&quot;</span>;</span><br><span class=\"line\">  htmlCode +=<span class=\"string\">&quot;&lt;/head&gt;\\n&quot;</span>;</span><br><span class=\"line\">  htmlCode +=<span class=\"string\">&quot;&lt;body&gt;\\n&quot;</span>;</span><br><span class=\"line\">  htmlCode +=<span class=\"string\">&quot;&lt;h1&gt;ESP8266 BUTTON STATE&lt;/h1&gt;\\n&quot;</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(buttonState)</span><br><span class=\"line\">    &#123;htmlCode +=<span class=\"string\">&quot;&lt;p&gt;Button Status: HIGH&lt;/p&gt;\\n&quot;</span>;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;htmlCode +=<span class=\"string\">&quot;&lt;p&gt;Button Status: LOW&lt;/p&gt;\\n&quot;</span>;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  htmlCode +=<span class=\"string\">&quot;&lt;/body&gt;\\n&quot;</span>;</span><br><span class=\"line\">  htmlCode +=<span class=\"string\">&quot;&lt;/html&gt;\\n&quot;</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> htmlCode;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//--------------------------------------------------------------------------------</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 设置处理404情况的函数&#x27;handleNotFound&#x27;</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">handleNotFound</span><span class=\"params\">()</span>&#123;                                        <span class=\"comment\">// 当浏览器请求的网络资源无法在服务器找到时，</span></span><br><span class=\"line\">  esp8266_server.send(<span class=\"number\">404</span>, <span class=\"string\">&quot;text/plain&quot;</span>, <span class=\"string\">&quot;404: Not found&quot;</span>);   <span class=\"comment\">// NodeMCU将调用此函数。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在以上示例程序中的<code>handleRoot</code>函数中，<code>esp8266_server.send(200, &quot;text/html&quot;, sendHTML(pinState))</code>语句的的3个参数 <code>sendHTML(pinState)</code>调用了<code>sendHTML</code>函数。该函数的作用是建立一个可以定时刷新的HTML网页代码。通过定时刷新网页，开发板的引脚状态将会不断地在页面中进行更新。</p>\n<p>此HTML网页代码是由<code>sendHTML</code>函数产生的。该函数建立了一个字符串变量，该字符串变量所存储的信息正是网页HTML代码。值得注意的是，该HTML代码会不断地检查变量pinState状态，并且根据pinState的状态改变HTML代码的信息，从而实现在网页上显示引脚状态。</p>\n<p>此HTML代码中真正实现定时刷新网页功能的语句是代码中的第79行语句。这条语句是告诉网页需要定时刷新，刷新频率5秒钟，即每5秒钟刷新一次页面。您可以通过改变此行语句中的数值5来调整页面刷新频率。</p>\n<p>每一次页面刷新，浏览器都会向NodeMCU发送HTTP请求。NodeMCU在收到浏览器请求后，将会把最新的HTML代码信息返回给浏览器。浏览器收到最新的HTML代码后将会在页面中显示引脚的状态。<br>以下是没有按下按键时的页面显示信息。</p>\n<h1 id=\"暂时没放图-1\"><a href=\"#暂时没放图-1\" class=\"headerlink\" title=\"暂时没放图\"></a><strong>暂时没放图</strong></h1>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clofj2tbs0001oot3aa3t25ig","tag_id":"clofj2tbv0004oot3gfr3d4w4","_id":"clofj2tby000coot3fq5v4n2e"},{"post_id":"clofj2tbu0003oot35cfe9vpy","tag_id":"clofj2tby000boot3dl3032lh","_id":"clofj2tc0000joot35nwm7h11"},{"post_id":"clofj2tbw0006oot34w0mh07c","tag_id":"clofj2tc0000hoot30vvc0q8c","_id":"clofj2tc1000loot3d7p6h8f9"},{"post_id":"clofj2tbx0008oot3fs0eataq","tag_id":"clofj2tc0000hoot30vvc0q8c","_id":"clofj2tc1000ooot3g6di3dfb"},{"post_id":"clofj2tbx0008oot3fs0eataq","tag_id":"clofj2tc1000moot33608a98i","_id":"clofj2tc1000poot3fwh2352q"},{"post_id":"clofj2tby000aoot38nvv0bft","tag_id":"clofj2tc1000noot34qgu7kny","_id":"clofj2tc2000root3ff0agnu7"},{"post_id":"clofj2tbz000goot3ccij7v51","tag_id":"clofj2tc2000qoot3erq435wl","_id":"clofj2tc2000uoot3eel7f3s2"},{"post_id":"clofj2tbz000goot3ccij7v51","tag_id":"clofj2tc2000soot32zzpaw7o","_id":"clofj2tc2000voot3bxuq1xpq"},{"post_id":"clofj2tc0000ioot331iuf4wh","tag_id":"clofj2tc2000qoot3erq435wl","_id":"clofj2tc3000xoot3avwedcyg"},{"post_id":"clofj2tc0000ioot331iuf4wh","tag_id":"clofj2tc2000soot32zzpaw7o","_id":"clofj2tc3000yoot34j9cek6u"},{"post_id":"clofj2tc5000zoot3bxqlen9v","tag_id":"clofj2tc2000qoot3erq435wl","_id":"clofj2tc60011oot3az5acs9h"},{"post_id":"clofj2tc5000zoot3bxqlen9v","tag_id":"clofj2tc2000soot32zzpaw7o","_id":"clofj2tc70013oot313gq139r"},{"post_id":"clofj2tc60010oot3hwf0cpyv","tag_id":"clofj2tc2000qoot3erq435wl","_id":"clofj2tc70015oot3f7qohtx9"},{"post_id":"clofj2tc60010oot3hwf0cpyv","tag_id":"clofj2tc2000soot32zzpaw7o","_id":"clofj2tc70018oot3f0c60i3d"},{"post_id":"clofj2tc70016oot37a0s0awg","tag_id":"clofj2tc2000qoot3erq435wl","_id":"clofj2tc80019oot39ekhbei8"},{"post_id":"clofj2tc70016oot37a0s0awg","tag_id":"clofj2tc2000soot32zzpaw7o","_id":"clofj2tc8001aoot35p795ko3"},{"post_id":"clofj2tc70014oot351w48fig","tag_id":"clofj2tc70017oot3g5s09c5s","_id":"clofj2tc8001coot3egx06u9x"},{"post_id":"clofj2tc70014oot351w48fig","tag_id":"clofj2tc8001boot3301m01jb","_id":"clofj2tc8001doot32rui165u"}],"Tag":[{"name":"Learning record","_id":"clofj2tbv0004oot3gfr3d4w4"},{"name":"Git","_id":"clofj2tby000boot3dl3032lh"},{"name":"博客搭建","_id":"clofj2tc0000hoot30vvc0q8c"},{"name":"博客美化","_id":"clofj2tc1000moot33608a98i"},{"name":"matlab","_id":"clofj2tc1000noot34qgu7kny"},{"name":"esp8266","_id":"clofj2tc2000qoot3erq435wl"},{"name":"物联网","_id":"clofj2tc2000soot32zzpaw7o"},{"name":"iic","_id":"clofj2tc70017oot3g5s09c5s"},{"name":"时序","_id":"clofj2tc8001boot3301m01jb"}]}}